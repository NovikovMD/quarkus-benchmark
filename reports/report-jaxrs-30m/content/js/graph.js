/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 0.0, "minX": 0.0, "maxY": 1560.0, "series": [{"data": [[0.0, 0.0], [0.1, 4.0], [0.2, 6.0], [0.3, 9.0], [0.4, 11.0], [0.5, 15.0], [0.6, 19.0], [0.7, 23.0], [0.8, 27.0], [0.9, 32.0], [1.0, 36.0], [1.1, 41.0], [1.2, 46.0], [1.3, 51.0], [1.4, 56.0], [1.5, 61.0], [1.6, 67.0], [1.7, 75.0], [1.8, 81.0], [1.9, 86.0], [2.0, 91.0], [2.1, 92.0], [2.2, 93.0], [2.3, 94.0], [2.4, 94.0], [2.5, 94.0], [2.6, 95.0], [2.7, 95.0], [2.8, 95.0], [2.9, 95.0], [3.0, 96.0], [3.1, 96.0], [3.2, 96.0], [3.3, 96.0], [3.4, 96.0], [3.5, 96.0], [3.6, 97.0], [3.7, 97.0], [3.8, 97.0], [3.9, 97.0], [4.0, 97.0], [4.1, 97.0], [4.2, 97.0], [4.3, 97.0], [4.4, 97.0], [4.5, 98.0], [4.6, 98.0], [4.7, 98.0], [4.8, 98.0], [4.9, 98.0], [5.0, 98.0], [5.1, 98.0], [5.2, 98.0], [5.3, 98.0], [5.4, 98.0], [5.5, 98.0], [5.6, 98.0], [5.7, 98.0], [5.8, 99.0], [5.9, 99.0], [6.0, 99.0], [6.1, 99.0], [6.2, 99.0], [6.3, 99.0], [6.4, 99.0], [6.5, 99.0], [6.6, 99.0], [6.7, 99.0], [6.8, 99.0], [6.9, 99.0], [7.0, 99.0], [7.1, 99.0], [7.2, 99.0], [7.3, 99.0], [7.4, 99.0], [7.5, 99.0], [7.6, 100.0], [7.7, 100.0], [7.8, 100.0], [7.9, 100.0], [8.0, 100.0], [8.1, 100.0], [8.2, 100.0], [8.3, 100.0], [8.4, 100.0], [8.5, 100.0], [8.6, 100.0], [8.7, 100.0], [8.8, 100.0], [8.9, 100.0], [9.0, 100.0], [9.1, 100.0], [9.2, 100.0], [9.3, 100.0], [9.4, 100.0], [9.5, 100.0], [9.6, 100.0], [9.7, 100.0], [9.8, 101.0], [9.9, 101.0], [10.0, 101.0], [10.1, 101.0], [10.2, 101.0], [10.3, 101.0], [10.4, 101.0], [10.5, 101.0], [10.6, 101.0], [10.7, 101.0], [10.8, 101.0], [10.9, 101.0], [11.0, 101.0], [11.1, 101.0], [11.2, 101.0], [11.3, 101.0], [11.4, 101.0], [11.5, 101.0], [11.6, 101.0], [11.7, 101.0], [11.8, 101.0], [11.9, 101.0], [12.0, 101.0], [12.1, 101.0], [12.2, 101.0], [12.3, 101.0], [12.4, 101.0], [12.5, 102.0], [12.6, 102.0], [12.7, 102.0], [12.8, 102.0], [12.9, 102.0], [13.0, 102.0], [13.1, 102.0], [13.2, 102.0], [13.3, 102.0], [13.4, 102.0], [13.5, 102.0], [13.6, 102.0], [13.7, 102.0], [13.8, 102.0], [13.9, 102.0], [14.0, 102.0], [14.1, 102.0], [14.2, 102.0], [14.3, 102.0], [14.4, 102.0], [14.5, 102.0], [14.6, 102.0], [14.7, 102.0], [14.8, 102.0], [14.9, 102.0], [15.0, 102.0], [15.1, 102.0], [15.2, 102.0], [15.3, 102.0], [15.4, 102.0], [15.5, 103.0], [15.6, 103.0], [15.7, 103.0], [15.8, 103.0], [15.9, 103.0], [16.0, 103.0], [16.1, 103.0], [16.2, 103.0], [16.3, 103.0], [16.4, 103.0], [16.5, 103.0], [16.6, 103.0], [16.7, 103.0], [16.8, 103.0], [16.9, 103.0], [17.0, 103.0], [17.1, 103.0], [17.2, 103.0], [17.3, 103.0], [17.4, 103.0], [17.5, 103.0], [17.6, 103.0], [17.7, 103.0], [17.8, 103.0], [17.9, 103.0], [18.0, 103.0], [18.1, 103.0], [18.2, 103.0], [18.3, 103.0], [18.4, 103.0], [18.5, 103.0], [18.6, 103.0], [18.7, 103.0], [18.8, 103.0], [18.9, 104.0], [19.0, 104.0], [19.1, 104.0], [19.2, 104.0], [19.3, 104.0], [19.4, 104.0], [19.5, 104.0], [19.6, 104.0], [19.7, 104.0], [19.8, 104.0], [19.9, 104.0], [20.0, 104.0], [20.1, 104.0], [20.2, 104.0], [20.3, 104.0], [20.4, 104.0], [20.5, 104.0], [20.6, 104.0], [20.7, 104.0], [20.8, 104.0], [20.9, 104.0], [21.0, 104.0], [21.1, 104.0], [21.2, 104.0], [21.3, 104.0], [21.4, 104.0], [21.5, 104.0], [21.6, 104.0], [21.7, 104.0], [21.8, 104.0], [21.9, 104.0], [22.0, 104.0], [22.1, 104.0], [22.2, 104.0], [22.3, 104.0], [22.4, 104.0], [22.5, 105.0], [22.6, 105.0], [22.7, 105.0], [22.8, 105.0], [22.9, 105.0], [23.0, 105.0], [23.1, 105.0], [23.2, 105.0], [23.3, 105.0], [23.4, 105.0], [23.5, 105.0], [23.6, 105.0], [23.7, 105.0], [23.8, 105.0], [23.9, 105.0], [24.0, 105.0], [24.1, 105.0], [24.2, 105.0], [24.3, 105.0], [24.4, 105.0], [24.5, 105.0], [24.6, 105.0], [24.7, 105.0], [24.8, 105.0], [24.9, 105.0], [25.0, 105.0], [25.1, 105.0], [25.2, 105.0], [25.3, 105.0], [25.4, 105.0], [25.5, 105.0], [25.6, 105.0], [25.7, 105.0], [25.8, 105.0], [25.9, 105.0], [26.0, 105.0], [26.1, 105.0], [26.2, 106.0], [26.3, 106.0], [26.4, 106.0], [26.5, 106.0], [26.6, 106.0], [26.7, 106.0], [26.8, 106.0], [26.9, 106.0], [27.0, 106.0], [27.1, 106.0], [27.2, 106.0], [27.3, 106.0], [27.4, 106.0], [27.5, 106.0], [27.6, 106.0], [27.7, 106.0], [27.8, 106.0], [27.9, 106.0], [28.0, 106.0], [28.1, 106.0], [28.2, 106.0], [28.3, 106.0], [28.4, 106.0], [28.5, 106.0], [28.6, 106.0], [28.7, 106.0], [28.8, 106.0], [28.9, 106.0], [29.0, 106.0], [29.1, 106.0], [29.2, 106.0], [29.3, 106.0], [29.4, 106.0], [29.5, 106.0], [29.6, 106.0], [29.7, 106.0], [29.8, 106.0], [29.9, 107.0], [30.0, 107.0], [30.1, 107.0], [30.2, 107.0], [30.3, 107.0], [30.4, 107.0], [30.5, 107.0], [30.6, 107.0], [30.7, 107.0], [30.8, 107.0], [30.9, 107.0], [31.0, 107.0], [31.1, 107.0], [31.2, 107.0], [31.3, 107.0], [31.4, 107.0], [31.5, 107.0], [31.6, 107.0], [31.7, 107.0], [31.8, 107.0], [31.9, 107.0], [32.0, 107.0], [32.1, 107.0], [32.2, 107.0], [32.3, 107.0], [32.4, 107.0], [32.5, 107.0], [32.6, 107.0], [32.7, 107.0], [32.8, 107.0], [32.9, 107.0], [33.0, 107.0], [33.1, 107.0], [33.2, 107.0], [33.3, 107.0], [33.4, 107.0], [33.5, 108.0], [33.6, 108.0], [33.7, 108.0], [33.8, 108.0], [33.9, 108.0], [34.0, 108.0], [34.1, 108.0], [34.2, 108.0], [34.3, 108.0], [34.4, 108.0], [34.5, 108.0], [34.6, 108.0], [34.7, 108.0], [34.8, 108.0], [34.9, 108.0], [35.0, 108.0], [35.1, 108.0], [35.2, 108.0], [35.3, 108.0], [35.4, 108.0], [35.5, 108.0], [35.6, 108.0], [35.7, 108.0], [35.8, 108.0], [35.9, 108.0], [36.0, 108.0], [36.1, 108.0], [36.2, 108.0], [36.3, 108.0], [36.4, 108.0], [36.5, 108.0], [36.6, 108.0], [36.7, 108.0], [36.8, 108.0], [36.9, 109.0], [37.0, 109.0], [37.1, 109.0], [37.2, 109.0], [37.3, 109.0], [37.4, 109.0], [37.5, 109.0], [37.6, 109.0], [37.7, 109.0], [37.8, 109.0], [37.9, 109.0], [38.0, 109.0], [38.1, 109.0], [38.2, 109.0], [38.3, 109.0], [38.4, 109.0], [38.5, 109.0], [38.6, 109.0], [38.7, 109.0], [38.8, 109.0], [38.9, 109.0], [39.0, 109.0], [39.1, 109.0], [39.2, 109.0], [39.3, 109.0], [39.4, 109.0], [39.5, 109.0], [39.6, 109.0], [39.7, 109.0], [39.8, 109.0], [39.9, 109.0], [40.0, 109.0], [40.1, 110.0], [40.2, 110.0], [40.3, 110.0], [40.4, 110.0], [40.5, 110.0], [40.6, 110.0], [40.7, 110.0], [40.8, 110.0], [40.9, 110.0], [41.0, 110.0], [41.1, 110.0], [41.2, 110.0], [41.3, 110.0], [41.4, 110.0], [41.5, 110.0], [41.6, 110.0], [41.7, 110.0], [41.8, 110.0], [41.9, 110.0], [42.0, 110.0], [42.1, 110.0], [42.2, 110.0], [42.3, 110.0], [42.4, 110.0], [42.5, 110.0], [42.6, 110.0], [42.7, 110.0], [42.8, 111.0], [42.9, 111.0], [43.0, 111.0], [43.1, 111.0], [43.2, 111.0], [43.3, 111.0], [43.4, 111.0], [43.5, 111.0], [43.6, 111.0], [43.7, 111.0], [43.8, 111.0], [43.9, 111.0], [44.0, 111.0], [44.1, 111.0], [44.2, 111.0], [44.3, 111.0], [44.4, 111.0], [44.5, 111.0], [44.6, 111.0], [44.7, 111.0], [44.8, 111.0], [44.9, 111.0], [45.0, 111.0], [45.1, 111.0], [45.2, 112.0], [45.3, 112.0], [45.4, 112.0], [45.5, 112.0], [45.6, 112.0], [45.7, 112.0], [45.8, 112.0], [45.9, 112.0], [46.0, 112.0], [46.1, 112.0], [46.2, 112.0], [46.3, 112.0], [46.4, 112.0], [46.5, 112.0], [46.6, 112.0], [46.7, 112.0], [46.8, 112.0], [46.9, 112.0], [47.0, 112.0], [47.1, 112.0], [47.2, 112.0], [47.3, 113.0], [47.4, 113.0], [47.5, 113.0], [47.6, 113.0], [47.7, 113.0], [47.8, 113.0], [47.9, 113.0], [48.0, 113.0], [48.1, 113.0], [48.2, 113.0], [48.3, 113.0], [48.4, 113.0], [48.5, 113.0], [48.6, 113.0], [48.7, 113.0], [48.8, 113.0], [48.9, 114.0], [49.0, 114.0], [49.1, 114.0], [49.2, 114.0], [49.3, 114.0], [49.4, 114.0], [49.5, 114.0], [49.6, 114.0], [49.7, 114.0], [49.8, 114.0], [49.9, 114.0], [50.0, 114.0], [50.1, 114.0], [50.2, 114.0], [50.3, 115.0], [50.4, 115.0], [50.5, 115.0], [50.6, 115.0], [50.7, 115.0], [50.8, 115.0], [50.9, 115.0], [51.0, 115.0], [51.1, 115.0], [51.2, 115.0], [51.3, 115.0], [51.4, 116.0], [51.5, 116.0], [51.6, 116.0], [51.7, 116.0], [51.8, 116.0], [51.9, 116.0], [52.0, 116.0], [52.1, 116.0], [52.2, 116.0], [52.3, 117.0], [52.4, 117.0], [52.5, 117.0], [52.6, 117.0], [52.7, 117.0], [52.8, 117.0], [52.9, 117.0], [53.0, 118.0], [53.1, 118.0], [53.2, 118.0], [53.3, 118.0], [53.4, 118.0], [53.5, 119.0], [53.6, 119.0], [53.7, 119.0], [53.8, 119.0], [53.9, 119.0], [54.0, 120.0], [54.1, 120.0], [54.2, 120.0], [54.3, 121.0], [54.4, 121.0], [54.5, 121.0], [54.6, 122.0], [54.7, 122.0], [54.8, 122.0], [54.9, 123.0], [55.0, 123.0], [55.1, 124.0], [55.2, 125.0], [55.3, 125.0], [55.4, 126.0], [55.5, 127.0], [55.6, 129.0], [55.7, 130.0], [55.8, 132.0], [55.9, 134.0], [56.0, 138.0], [56.1, 145.0], [56.2, 159.0], [56.3, 170.0], [56.4, 172.0], [56.5, 173.0], [56.6, 174.0], [56.7, 175.0], [56.8, 176.0], [56.9, 176.0], [57.0, 177.0], [57.1, 177.0], [57.2, 177.0], [57.3, 178.0], [57.4, 178.0], [57.5, 178.0], [57.6, 179.0], [57.7, 179.0], [57.8, 179.0], [57.9, 179.0], [58.0, 179.0], [58.1, 180.0], [58.2, 180.0], [58.3, 180.0], [58.4, 180.0], [58.5, 180.0], [58.6, 181.0], [58.7, 181.0], [58.8, 181.0], [58.9, 181.0], [59.0, 181.0], [59.1, 181.0], [59.2, 182.0], [59.3, 182.0], [59.4, 182.0], [59.5, 182.0], [59.6, 182.0], [59.7, 182.0], [59.8, 182.0], [59.9, 183.0], [60.0, 183.0], [60.1, 183.0], [60.2, 183.0], [60.3, 183.0], [60.4, 183.0], [60.5, 183.0], [60.6, 183.0], [60.7, 183.0], [60.8, 184.0], [60.9, 184.0], [61.0, 184.0], [61.1, 184.0], [61.2, 184.0], [61.3, 184.0], [61.4, 184.0], [61.5, 184.0], [61.6, 184.0], [61.7, 185.0], [61.8, 185.0], [61.9, 185.0], [62.0, 185.0], [62.1, 185.0], [62.2, 185.0], [62.3, 185.0], [62.4, 185.0], [62.5, 185.0], [62.6, 185.0], [62.7, 185.0], [62.8, 186.0], [62.9, 186.0], [63.0, 186.0], [63.1, 186.0], [63.2, 186.0], [63.3, 186.0], [63.4, 186.0], [63.5, 186.0], [63.6, 186.0], [63.7, 186.0], [63.8, 186.0], [63.9, 187.0], [64.0, 187.0], [64.1, 187.0], [64.2, 187.0], [64.3, 187.0], [64.4, 187.0], [64.5, 187.0], [64.6, 187.0], [64.7, 187.0], [64.8, 187.0], [64.9, 187.0], [65.0, 187.0], [65.1, 188.0], [65.2, 188.0], [65.3, 188.0], [65.4, 188.0], [65.5, 188.0], [65.6, 188.0], [65.7, 188.0], [65.8, 188.0], [65.9, 188.0], [66.0, 188.0], [66.1, 188.0], [66.2, 188.0], [66.3, 189.0], [66.4, 189.0], [66.5, 189.0], [66.6, 189.0], [66.7, 189.0], [66.8, 189.0], [66.9, 189.0], [67.0, 189.0], [67.1, 189.0], [67.2, 189.0], [67.3, 189.0], [67.4, 189.0], [67.5, 189.0], [67.6, 190.0], [67.7, 190.0], [67.8, 190.0], [67.9, 190.0], [68.0, 190.0], [68.1, 190.0], [68.2, 190.0], [68.3, 190.0], [68.4, 190.0], [68.5, 190.0], [68.6, 190.0], [68.7, 190.0], [68.8, 190.0], [68.9, 191.0], [69.0, 191.0], [69.1, 191.0], [69.2, 191.0], [69.3, 191.0], [69.4, 191.0], [69.5, 191.0], [69.6, 191.0], [69.7, 191.0], [69.8, 191.0], [69.9, 191.0], [70.0, 191.0], [70.1, 191.0], [70.2, 192.0], [70.3, 192.0], [70.4, 192.0], [70.5, 192.0], [70.6, 192.0], [70.7, 192.0], [70.8, 192.0], [70.9, 192.0], [71.0, 192.0], [71.1, 192.0], [71.2, 192.0], [71.3, 192.0], [71.4, 192.0], [71.5, 193.0], [71.6, 193.0], [71.7, 193.0], [71.8, 193.0], [71.9, 193.0], [72.0, 193.0], [72.1, 193.0], [72.2, 193.0], [72.3, 193.0], [72.4, 193.0], [72.5, 193.0], [72.6, 193.0], [72.7, 194.0], [72.8, 194.0], [72.9, 194.0], [73.0, 194.0], [73.1, 194.0], [73.2, 194.0], [73.3, 194.0], [73.4, 194.0], [73.5, 194.0], [73.6, 194.0], [73.7, 194.0], [73.8, 194.0], [73.9, 195.0], [74.0, 195.0], [74.1, 195.0], [74.2, 195.0], [74.3, 195.0], [74.4, 195.0], [74.5, 195.0], [74.6, 195.0], [74.7, 195.0], [74.8, 195.0], [74.9, 195.0], [75.0, 196.0], [75.1, 196.0], [75.2, 196.0], [75.3, 196.0], [75.4, 196.0], [75.5, 196.0], [75.6, 196.0], [75.7, 196.0], [75.8, 196.0], [75.9, 196.0], [76.0, 197.0], [76.1, 197.0], [76.2, 197.0], [76.3, 197.0], [76.4, 197.0], [76.5, 197.0], [76.6, 197.0], [76.7, 197.0], [76.8, 197.0], [76.9, 197.0], [77.0, 198.0], [77.1, 198.0], [77.2, 198.0], [77.3, 198.0], [77.4, 198.0], [77.5, 198.0], [77.6, 198.0], [77.7, 198.0], [77.8, 199.0], [77.9, 199.0], [78.0, 199.0], [78.1, 199.0], [78.2, 199.0], [78.3, 199.0], [78.4, 199.0], [78.5, 199.0], [78.6, 200.0], [78.7, 200.0], [78.8, 200.0], [78.9, 200.0], [79.0, 200.0], [79.1, 200.0], [79.2, 201.0], [79.3, 201.0], [79.4, 201.0], [79.5, 201.0], [79.6, 201.0], [79.7, 201.0], [79.8, 202.0], [79.9, 202.0], [80.0, 202.0], [80.1, 202.0], [80.2, 202.0], [80.3, 203.0], [80.4, 203.0], [80.5, 203.0], [80.6, 203.0], [80.7, 203.0], [80.8, 204.0], [80.9, 204.0], [81.0, 204.0], [81.1, 204.0], [81.2, 205.0], [81.3, 205.0], [81.4, 205.0], [81.5, 206.0], [81.6, 206.0], [81.7, 206.0], [81.8, 207.0], [81.9, 207.0], [82.0, 208.0], [82.1, 208.0], [82.2, 209.0], [82.3, 209.0], [82.4, 210.0], [82.5, 210.0], [82.6, 211.0], [82.7, 212.0], [82.8, 213.0], [82.9, 214.0], [83.0, 215.0], [83.1, 216.0], [83.2, 218.0], [83.3, 220.0], [83.4, 223.0], [83.5, 228.0], [83.6, 236.0], [83.7, 248.0], [83.8, 254.0], [83.9, 257.0], [84.0, 258.0], [84.1, 259.0], [84.2, 260.0], [84.3, 261.0], [84.4, 262.0], [84.5, 263.0], [84.6, 263.0], [84.7, 264.0], [84.8, 264.0], [84.9, 265.0], [85.0, 265.0], [85.1, 266.0], [85.2, 266.0], [85.3, 267.0], [85.4, 267.0], [85.5, 267.0], [85.6, 268.0], [85.7, 268.0], [85.8, 268.0], [85.9, 269.0], [86.0, 269.0], [86.1, 269.0], [86.2, 270.0], [86.3, 270.0], [86.4, 270.0], [86.5, 271.0], [86.6, 271.0], [86.7, 271.0], [86.8, 271.0], [86.9, 272.0], [87.0, 272.0], [87.1, 272.0], [87.2, 273.0], [87.3, 273.0], [87.4, 273.0], [87.5, 273.0], [87.6, 274.0], [87.7, 274.0], [87.8, 274.0], [87.9, 274.0], [88.0, 275.0], [88.1, 275.0], [88.2, 275.0], [88.3, 275.0], [88.4, 276.0], [88.5, 276.0], [88.6, 276.0], [88.7, 276.0], [88.8, 277.0], [88.9, 277.0], [89.0, 277.0], [89.1, 277.0], [89.2, 278.0], [89.3, 278.0], [89.4, 278.0], [89.5, 278.0], [89.6, 279.0], [89.7, 279.0], [89.8, 279.0], [89.9, 279.0], [90.0, 280.0], [90.1, 280.0], [90.2, 280.0], [90.3, 281.0], [90.4, 281.0], [90.5, 281.0], [90.6, 281.0], [90.7, 282.0], [90.8, 282.0], [90.9, 282.0], [91.0, 283.0], [91.1, 283.0], [91.2, 283.0], [91.3, 284.0], [91.4, 284.0], [91.5, 284.0], [91.6, 285.0], [91.7, 285.0], [91.8, 285.0], [91.9, 286.0], [92.0, 286.0], [92.1, 287.0], [92.2, 287.0], [92.3, 287.0], [92.4, 288.0], [92.5, 288.0], [92.6, 289.0], [92.7, 289.0], [92.8, 290.0], [92.9, 291.0], [93.0, 291.0], [93.1, 292.0], [93.2, 293.0], [93.3, 293.0], [93.4, 294.0], [93.5, 295.0], [93.6, 296.0], [93.7, 298.0], [93.8, 299.0], [93.9, 301.0], [94.0, 303.0], [94.1, 306.0], [94.2, 309.0], [94.3, 315.0], [94.4, 324.0], [94.5, 336.0], [94.6, 342.0], [94.7, 345.0], [94.8, 347.0], [94.9, 349.0], [95.0, 350.0], [95.1, 352.0], [95.2, 353.0], [95.3, 354.0], [95.4, 355.0], [95.5, 356.0], [95.6, 357.0], [95.7, 358.0], [95.8, 359.0], [95.9, 360.0], [96.0, 361.0], [96.1, 361.0], [96.2, 362.0], [96.3, 363.0], [96.4, 364.0], [96.5, 365.0], [96.6, 366.0], [96.7, 367.0], [96.8, 368.0], [96.9, 369.0], [97.0, 370.0], [97.1, 371.0], [97.2, 373.0], [97.3, 374.0], [97.4, 376.0], [97.5, 377.0], [97.6, 379.0], [97.7, 382.0], [97.8, 385.0], [97.9, 390.0], [98.0, 397.0], [98.1, 414.0], [98.2, 428.0], [98.3, 434.0], [98.4, 438.0], [98.5, 442.0], [98.6, 445.0], [98.7, 448.0], [98.8, 451.0], [98.9, 454.0], [99.0, 458.0], [99.1, 463.0], [99.2, 469.0], [99.3, 483.0], [99.4, 515.0], [99.5, 528.0], [99.6, 538.0], [99.7, 552.0], [99.8, 603.0], [99.9, 643.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 2.0, "minX": 0.0, "maxY": 5350490.0, "series": [{"data": [[0.0, 5350490.0], [1500.0, 2.0], [500.0, 35019.0], [1000.0, 89.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 500, "maxX": 1500.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 2.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 5350597.0, "series": [{"data": [[0.0, 5350597.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 35001.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 2.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 2.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 59.67319765854836, "minX": 1.72959264E12, "maxY": 500.0, "series": [{"data": [[1.72959381E12, 500.0], [1.7295927E12, 460.2554495835184], [1.72959441E12, 500.0], [1.7295933E12, 500.0], [1.72959372E12, 500.0], [1.72959423E12, 500.0], [1.72959321E12, 500.0], [1.72959432E12, 500.0], [1.72959303E12, 500.0], [1.72959414E12, 500.0], [1.72959312E12, 500.0], [1.72959363E12, 500.0], [1.72959405E12, 500.0], [1.72959294E12, 500.0], [1.72959354E12, 500.0], [1.72959285E12, 500.0], [1.72959396E12, 500.0], [1.72959345E12, 500.0], [1.72959276E12, 500.0], [1.72959327E12, 500.0], [1.72959438E12, 500.0], [1.72959336E12, 500.0], [1.72959387E12, 500.0], [1.72959429E12, 500.0], [1.72959318E12, 500.0], [1.72959267E12, 234.26824589785042], [1.72959378E12, 500.0], [1.72959309E12, 500.0], [1.7295942E12, 500.0], [1.72959369E12, 500.0], [1.729593E12, 500.0], [1.72959351E12, 500.0], [1.7295936E12, 500.0], [1.72959411E12, 500.0], [1.72959342E12, 500.0], [1.72959291E12, 500.0], [1.72959402E12, 500.0], [1.72959333E12, 500.0], [1.72959444E12, 497.59595029912606], [1.72959393E12, 500.0], [1.72959282E12, 500.0], [1.72959324E12, 500.0], [1.72959375E12, 500.0], [1.72959273E12, 500.0], [1.72959384E12, 500.0], [1.72959435E12, 500.0], [1.72959366E12, 500.0], [1.72959264E12, 59.67319765854836], [1.72959315E12, 500.0], [1.72959426E12, 500.0], [1.72959357E12, 500.0], [1.72959417E12, 500.0], [1.72959306E12, 500.0], [1.72959348E12, 500.0], [1.72959399E12, 500.0], [1.72959297E12, 500.0], [1.72959408E12, 500.0], [1.72959279E12, 500.0], [1.7295939E12, 500.0], [1.72959288E12, 500.0], [1.72959339E12, 500.0]], "isOverall": false, "label": "Thread Group", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 30000, "maxX": 1.72959444E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 10800000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 4.761702127659573, "minX": 1.0, "maxY": 189.93678160919524, "series": [{"data": [[2.0, 185.0], [3.0, 15.542372881355936], [4.0, 9.054347826086955], [5.0, 6.487179487179486], [6.0, 6.484848484848484], [7.0, 5.681818181818183], [8.0, 4.761702127659573], [9.0, 6.573394495412844], [10.0, 5.843220338983054], [11.0, 5.566037735849057], [12.0, 5.977358490566037], [13.0, 6.414179104477612], [14.0, 5.703071672354947], [15.0, 7.26551724137931], [16.0, 8.130769230769229], [17.0, 7.214057507987221], [18.0, 9.21285140562249], [19.0, 8.193979933110374], [20.0, 8.93548387096774], [21.0, 8.351851851851855], [22.0, 10.534351145038167], [23.0, 11.12156862745098], [24.0, 14.545851528384276], [25.0, 14.696682464454984], [26.0, 15.122065727699539], [27.0, 16.706976744186044], [28.0, 14.460580912863078], [29.0, 13.520912547528514], [30.0, 17.47767857142857], [31.0, 17.695454545454556], [32.0, 14.310344827586208], [33.0, 12.153203342618388], [34.0, 16.748953974895407], [35.0, 16.11379310344829], [36.0, 13.242074927953889], [37.0, 15.276450511945384], [38.0, 19.5668016194332], [39.0, 16.470588235294123], [40.0, 13.816939890710382], [41.0, 17.639730639730647], [42.0, 14.114441416893724], [43.0, 14.937677053824364], [44.0, 16.713846153846156], [45.0, 15.99159663865546], [46.0, 15.407103825136621], [47.0, 17.349397590361452], [48.0, 17.44281524926686], [49.0, 16.575498575498568], [50.0, 19.110465116279073], [51.0, 17.06944444444443], [52.0, 19.334277620396602], [53.0, 18.781250000000004], [54.0, 19.210674157303373], [55.0, 17.54376657824933], [56.0, 18.754054054054045], [57.0, 18.561111111111114], [58.0, 20.159459459459452], [59.0, 20.200557103064064], [60.0, 20.574850299401213], [61.0, 26.154098360655734], [62.0, 21.043126684636142], [63.0, 20.672872340425524], [64.0, 22.00877192982455], [65.0, 24.369186046511622], [66.0, 20.600522193211493], [67.0, 24.05491329479769], [68.0, 22.599999999999998], [69.0, 23.874651810584954], [70.0, 22.70744680851063], [71.0, 23.30645161290322], [72.0, 24.09615384615385], [73.0, 24.7830985915493], [74.0, 26.95664739884394], [75.0, 25.545977011494262], [76.0, 24.78611111111113], [77.0, 28.28985507246376], [78.0, 26.024128686327057], [79.0, 27.61449275362321], [80.0, 28.05428571428572], [81.0, 30.259146341463413], [82.0, 29.55917159763314], [83.0, 28.450424929178464], [84.0, 30.11940298507462], [85.0, 35.229965156794414], [86.0, 33.37982195845696], [87.0, 31.06451612903226], [88.0, 38.611683848797234], [89.0, 37.026578073089716], [90.0, 32.8597014925373], [91.0, 29.682539682539677], [92.0, 30.301886792452837], [93.0, 30.9123287671233], [94.0, 30.767759562841533], [95.0, 33.174785100286506], [96.0, 32.90566037735849], [97.0, 43.19863013698632], [98.0, 37.685628742514965], [99.0, 34.68857142857147], [100.0, 34.19827586206896], [101.0, 34.50696378830081], [102.0, 34.34972677595626], [103.0, 33.510869565217405], [104.0, 34.62395543175489], [105.0, 34.39522546419098], [106.0, 34.303030303030326], [107.0, 40.15588235294118], [108.0, 35.1367292225201], [109.0, 37.36127167630055], [110.0, 37.366120218579255], [111.0, 35.07438016528929], [112.0, 36.467700258397954], [113.0, 37.80508474576272], [114.0, 37.95174262734586], [115.0, 37.79787234042557], [116.0, 37.70380434782611], [117.0, 38.99999999999993], [118.0, 38.74594594594595], [119.0, 38.15979381443295], [120.0, 38.58713136729221], [121.0, 37.86397984886656], [122.0, 38.32799999999997], [123.0, 42.29096045197741], [124.0, 45.57185628742512], [125.0, 40.38655462184871], [126.0, 41.98644986449867], [127.0, 42.032679738562116], [128.0, 48.75405405405402], [129.0, 44.619178082191766], [130.0, 41.383202099737524], [131.0, 43.04788732394361], [132.0, 43.75066312997346], [133.0, 45.400568181818194], [134.0, 43.60266666666669], [135.0, 41.80402010050249], [136.0, 41.6870026525199], [137.0, 46.791428571428554], [138.0, 52.93059936908515], [139.0, 49.038805970149284], [140.0, 50.663817663817674], [141.0, 47.22189349112424], [142.0, 49.1972972972973], [143.0, 46.03886010362696], [144.0, 47.626112759643924], [145.0, 51.00826446280989], [146.0, 48.873626373626344], [147.0, 51.465045592705145], [148.0, 52.122699386503065], [149.0, 55.842253521126764], [150.0, 54.42121212121215], [151.0, 54.293255131964806], [152.0, 54.57668711656444], [153.0, 52.967930029154566], [154.0, 46.19571865443424], [155.0, 65.68713450292394], [156.0, 55.579617834394924], [157.0, 64.25377643504527], [158.0, 54.47619047619047], [159.0, 59.685121107266426], [160.0, 71.58203124999996], [161.0, 72.42492012779554], [162.0, 58.251798561151084], [163.0, 75.87328767123283], [164.0, 73.77480916030537], [165.0, 77.07806691449818], [166.0, 66.10431654676266], [167.0, 81.44866920152093], [168.0, 66.11149825783971], [169.0, 78.6115107913669], [170.0, 61.54746835443038], [171.0, 68.47741935483869], [172.0, 68.89323843416372], [173.0, 73.20000000000005], [174.0, 68.7669902912621], [175.0, 63.21981424148603], [176.0, 65.45114942528733], [177.0, 63.280802292263616], [178.0, 61.987878787878834], [179.0, 65.6813880126183], [180.0, 70.47936507936502], [181.0, 64.14803625377645], [182.0, 68.10897435897436], [183.0, 74.62866449511404], [184.0, 68.02994011976055], [185.0, 67.88109756097553], [186.0, 67.83013698630135], [187.0, 58.22038567493111], [188.0, 64.52876712328764], [189.0, 59.47945205479453], [190.0, 62.41833810888251], [191.0, 65.97604790419153], [192.0, 73.82941176470594], [193.0, 67.23743016759776], [194.0, 60.3917525773196], [195.0, 84.41955835962146], [196.0, 69.59714285714287], [197.0, 77.11881188118807], [198.0, 74.12772585669774], [199.0, 72.24159021406723], [200.0, 74.42675159235662], [201.0, 71.46504559270512], [202.0, 69.88826815642454], [203.0, 66.46760563380279], [204.0, 61.89445910290239], [205.0, 62.31024930747929], [206.0, 58.87850467289718], [207.0, 84.99361022364221], [208.0, 83.30272108843535], [209.0, 75.125], [210.0, 97.17647058823532], [211.0, 65.51960784313724], [212.0, 88.48247978436667], [213.0, 71.77325581395354], [214.0, 81.41310541310543], [215.0, 72.93663911845735], [216.0, 65.3225806451612], [217.0, 83.61656441717795], [218.0, 77.81948424068767], [219.0, 76.05830903790087], [220.0, 75.8855421686747], [221.0, 72.5221518987342], [222.0, 92.57565789473685], [223.0, 80.3573667711599], [224.0, 80.31767955801108], [225.0, 67.89296636085622], [226.0, 99.7708333333333], [227.0, 76.0368421052632], [228.0, 72.89375], [229.0, 83.30617977528088], [230.0, 85.02424242424244], [231.0, 78.46200607902732], [232.0, 84.6139817629179], [233.0, 85.5192878338279], [234.0, 79.7711171662126], [235.0, 82.85633802816902], [236.0, 70.66475644699139], [237.0, 90.58878504672893], [238.0, 76.26837060702876], [239.0, 94.51820728291317], [240.0, 85.49295774647884], [241.0, 81.71698113207539], [242.0, 78.79508196721301], [243.0, 75.81962864721486], [244.0, 73.70879120879117], [245.0, 90.3768545994065], [246.0, 89.73156342182894], [247.0, 81.80440771349868], [248.0, 86.13370473537606], [249.0, 88.1065573770492], [250.0, 74.18840579710151], [251.0, 93.8588588588588], [252.0, 82.748502994012], [253.0, 99.22802197802207], [254.0, 84.56521739130434], [255.0, 72.80939947780675], [257.0, 85.66057441253258], [256.0, 89.08516483516486], [258.0, 82.7265415549598], [259.0, 80.54891304347824], [260.0, 89.34453781512607], [261.0, 84.92307692307682], [262.0, 84.54232804232811], [263.0, 86.99171270718226], [264.0, 83.80205655526996], [270.0, 82.04188481675392], [271.0, 89.35012594458442], [268.0, 87.64971751412429], [269.0, 86.86445012787729], [265.0, 87.95601173020525], [266.0, 88.65045592705165], [267.0, 99.96256684491982], [273.0, 91.36533333333334], [272.0, 77.3089005235603], [274.0, 86.16799999999992], [275.0, 93.37808219178088], [276.0, 90.74928774928763], [277.0, 92.3062330623306], [278.0, 86.6422764227641], [279.0, 86.83612040133785], [280.0, 107.84254143646403], [286.0, 93.51212938005399], [287.0, 96.63297872340424], [284.0, 95.39944903581272], [285.0, 89.7534246575343], [281.0, 104.13850415512454], [282.0, 88.01066666666674], [283.0, 93.21739130434781], [289.0, 96.55614973262027], [288.0, 90.76795580110492], [290.0, 89.54038997214487], [291.0, 102.3362573099415], [292.0, 96.5117493472586], [293.0, 94.26047904191611], [294.0, 107.48467966573814], [295.0, 95.61369863013707], [296.0, 99.60869565217384], [302.0, 98.0133333333334], [303.0, 92.95392953929536], [300.0, 92.83977900552486], [301.0, 104.57446808510652], [297.0, 92.60957178841302], [298.0, 91.70027247956402], [299.0, 96.17414248021109], [305.0, 100.51515151515152], [304.0, 100.89999999999989], [306.0, 96.26239067055386], [307.0, 99.80635838150292], [308.0, 114.03856749311292], [309.0, 102.59199999999997], [310.0, 99.42000000000002], [311.0, 106.7130919220056], [312.0, 101.71891891891893], [318.0, 102.82960893854747], [319.0, 107.39130434782604], [316.0, 104.34059945504083], [317.0, 99.11484593837534], [313.0, 102.12129380053909], [314.0, 101.84210526315792], [315.0, 110.1626666666666], [321.0, 101.53025936599424], [320.0, 95.87087912087911], [322.0, 127.38834951456305], [323.0, 100.85804416403784], [324.0, 139.95652173913047], [325.0, 113.39053254437864], [326.0, 130.38781163434916], [327.0, 101.01373626373618], [328.0, 104.91404011461326], [334.0, 123.75409836065572], [335.0, 115.094512195122], [332.0, 131.94328358208963], [333.0, 106.60923076923078], [329.0, 114.93230769230772], [330.0, 123.34226190476187], [331.0, 111.68452380952381], [337.0, 131.76947040498436], [336.0, 129.53993610223648], [338.0, 142.46496815286636], [339.0, 126.1720430107526], [340.0, 107.65714285714286], [341.0, 112.21448467966576], [342.0, 106.84839650145771], [343.0, 114.45212765957451], [344.0, 117.15317919075137], [350.0, 126.46920821114368], [351.0, 111.8820224719101], [348.0, 118.89265536723161], [349.0, 106.92622950819681], [345.0, 111.71929824561404], [346.0, 120.77971014492746], [347.0, 131.7154696132597], [353.0, 108.78920308483286], [352.0, 129.9005681818183], [354.0, 113.92263610315185], [355.0, 118.3208556149732], [356.0, 119.62130177514788], [357.0, 131.16860465116292], [358.0, 127.85674157303386], [359.0, 116.24473684210518], [360.0, 112.82384823848237], [366.0, 121.30529595015577], [367.0, 143.48000000000027], [364.0, 117.77044025157228], [365.0, 136.22461538461548], [361.0, 128.4188034188033], [362.0, 115.54569892473118], [363.0, 121.16901408450703], [369.0, 134.56906077348083], [368.0, 118.52664576802502], [370.0, 131.2378223495701], [371.0, 113.50558659217879], [372.0, 128.08201058201055], [373.0, 123.79002624671924], [374.0, 129.1452991452991], [375.0, 122.02240896358543], [376.0, 117.74999999999999], [382.0, 118.68749999999991], [383.0, 134.75287356321837], [380.0, 130.54061624649876], [381.0, 122.83522727272724], [377.0, 121.16310160427814], [378.0, 126.00867052023114], [379.0, 134.40896358543418], [385.0, 139.9269662921348], [384.0, 128.56388888888887], [386.0, 119.99378881987582], [387.0, 134.4888888888889], [388.0, 133.86526946107782], [389.0, 147.84821428571436], [390.0, 134.42982456140342], [391.0, 142.22848664688433], [392.0, 139.12244897959172], [398.0, 169.7190332326283], [399.0, 146.30924855491315], [396.0, 131.81227436823104], [397.0, 171.06737588652481], [393.0, 139.68882175226588], [394.0, 144.45833333333343], [395.0, 131.3668639053255], [401.0, 155.38364779874226], [400.0, 130.0321428571429], [402.0, 167.2034383954154], [403.0, 142.13218390804607], [404.0, 139.673590504451], [405.0, 138.60167130919208], [406.0, 128.3181818181818], [407.0, 133.05214723926395], [408.0, 157.27113702623907], [414.0, 144.41160220994473], [415.0, 133.17906336088149], [412.0, 142.66769230769236], [413.0, 156.13333333333327], [409.0, 142.742372881356], [410.0, 153.07250755287012], [411.0, 160.9728096676737], [417.0, 144.4126074498567], [416.0, 136.10298102981037], [418.0, 132.70855614973277], [419.0, 144.8173913043479], [420.0, 136.78996865203766], [421.0, 151.42946708463964], [422.0, 160.52478134110777], [423.0, 151.88440860215042], [424.0, 133.45844504021449], [430.0, 153.33442622950815], [431.0, 164.18367346938774], [428.0, 154.96996996997004], [429.0, 147.40579710144928], [425.0, 141.51092896174868], [426.0, 136.1081794195251], [427.0, 140.54117647058823], [433.0, 148.91553133514986], [432.0, 154.99717514124296], [434.0, 141.90168539325833], [435.0, 148.3764705882351], [436.0, 143.39509536784752], [437.0, 148.0864553314121], [438.0, 152.74928774928767], [439.0, 148.57714285714297], [440.0, 146.56684491978598], [446.0, 145.72876712328778], [447.0, 154.56545961002797], [444.0, 151.84741144414176], [445.0, 143.05994550408727], [441.0, 139.34431137724548], [442.0, 172.66865671641796], [443.0, 150.08888888888896], [449.0, 144.7147147147148], [448.0, 148.858757062147], [450.0, 161.2890855457226], [451.0, 162.53424657534268], [452.0, 154.79104477611935], [453.0, 165.26315789473702], [454.0, 151.91644204851724], [455.0, 143.7354651162791], [456.0, 150.49855072463774], [462.0, 158.575197889182], [463.0, 151.93913043478273], [460.0, 162.27090301003338], [461.0, 189.93678160919524], [457.0, 164.31830985915488], [458.0, 156.38202247190998], [459.0, 154.75308641975315], [465.0, 155.86363636363635], [464.0, 154.3016759776536], [466.0, 154.13279132791342], [467.0, 154.9576271186441], [468.0, 147.02881844380389], [469.0, 165.99428571428578], [470.0, 169.7674418604649], [471.0, 158.1463414634146], [472.0, 176.02586206896555], [478.0, 167.5735735735735], [479.0, 164.45821325648427], [476.0, 155.25787965616058], [477.0, 165.48148148148138], [473.0, 159.99681528662435], [474.0, 173.48746518105852], [475.0, 171.07082152974496], [481.0, 154.0248618784531], [480.0, 168.375], [482.0, 157.669540229885], [483.0, 161.09844559585477], [484.0, 151.48395721925138], [485.0, 148.02666666666667], [486.0, 158.38208955223885], [487.0, 177.73204419889504], [488.0, 176.4732142857143], [494.0, 169.86737400530507], [495.0, 161.98882681564234], [492.0, 169.77715877437336], [493.0, 165.60504201680675], [489.0, 162.53164556962037], [490.0, 158.2803468208092], [491.0, 165.08630952380955], [496.0, 151.68226600985216], [497.0, 165.2934782608697], [498.0, 153.25068119891014], [499.0, 176.35904255319144], [500.0, 166.77902803088747], [1.0, 175.0]], "isOverall": false, "label": "HTTP Request", "isController": false}, {"data": [[492.3633840240789, 164.32463810903866]], "isOverall": false, "label": "HTTP Request-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 500.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 132983.03333333333, "minX": 1.72959264E12, "maxY": 7171586.833333333, "series": [{"data": [[1.72959381E12, 7098601.333333333], [1.7295927E12, 6821968.4], [1.72959441E12, 7021175.0], [1.7295933E12, 6951715.566666666], [1.72959372E12, 7013058.766666667], [1.72959423E12, 6992821.766666667], [1.72959321E12, 6967574.8], [1.72959432E12, 6980040.4], [1.72959303E12, 6814137.866666666], [1.72959414E12, 6893180.866666666], [1.72959312E12, 6959271.833333333], [1.72959363E12, 7029366.866666666], [1.72959405E12, 7069103.433333334], [1.72959294E12, 7012895.366666666], [1.72959354E12, 6993418.866666666], [1.72959285E12, 7077032.2], [1.72959396E12, 7060333.066666666], [1.72959345E12, 7035740.3], [1.72959276E12, 6914639.133333334], [1.72959327E12, 7022861.8], [1.72959438E12, 7031680.866666666], [1.72959336E12, 7066949.466666667], [1.72959387E12, 6677273.633333334], [1.72959429E12, 7054618.266666667], [1.72959318E12, 6895108.866666666], [1.72959267E12, 6727387.8], [1.72959378E12, 6932103.833333333], [1.72959309E12, 6970475.6], [1.7295942E12, 7031729.633333334], [1.72959369E12, 6886916.8], [1.729593E12, 6982794.633333334], [1.72959351E12, 6921287.166666667], [1.7295936E12, 7003631.2], [1.72959411E12, 6992300.4], [1.72959342E12, 7057858.466666667], [1.72959291E12, 7121092.7], [1.72959402E12, 7042993.4], [1.72959333E12, 6974697.8], [1.72959444E12, 4054173.466666667], [1.72959393E12, 7051134.566666666], [1.72959282E12, 6917074.2], [1.72959324E12, 6971167.466666667], [1.72959375E12, 7155068.533333333], [1.72959273E12, 7031372.233333333], [1.72959384E12, 7140425.366666666], [1.72959435E12, 7064541.933333334], [1.72959366E12, 7171586.833333333], [1.72959264E12, 2563068.8], [1.72959315E12, 6611916.033333333], [1.72959426E12, 7045213.566666666], [1.72959357E12, 7081552.866666666], [1.72959417E12, 7015262.2], [1.72959306E12, 6837515.933333334], [1.72959348E12, 6900227.533333333], [1.72959399E12, 7055775.366666666], [1.72959297E12, 6885585.466666667], [1.72959408E12, 7063433.566666666], [1.72959279E12, 6851342.966666667], [1.7295939E12, 7010567.0], [1.72959288E12, 7139476.533333333], [1.72959339E12, 6940393.133333334]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.72959381E12, 368307.86666666664], [1.7295927E12, 353961.3], [1.72959441E12, 364286.63333333336], [1.7295933E12, 360684.86666666664], [1.72959372E12, 363863.13333333336], [1.72959423E12, 362834.63333333336], [1.72959321E12, 361503.63333333336], [1.72959432E12, 362157.0333333333], [1.72959303E12, 353541.8333333333], [1.72959414E12, 357655.8333333333], [1.72959312E12, 361084.1666666667], [1.72959363E12, 364710.13333333336], [1.72959405E12, 366787.3], [1.72959294E12, 363871.2], [1.72959354E12, 362842.7], [1.72959285E12, 367194.6666666667], [1.72959396E12, 366319.43333333335], [1.72959345E12, 365048.93333333335], [1.72959276E12, 358765.0], [1.72959327E12, 364383.43333333335], [1.72959438E12, 364855.3333333333], [1.72959336E12, 366662.26666666666], [1.72959387E12, 346443.1666666667], [1.72959429E12, 366029.0333333333], [1.72959318E12, 357748.6], [1.72959267E12, 349044.6666666667], [1.72959378E12, 359668.4666666667], [1.72959309E12, 361664.9666666667], [1.7295942E12, 364831.13333333336], [1.72959369E12, 357317.0333333333], [1.729593E12, 362302.23333333334], [1.72959351E12, 359111.86666666664], [1.7295936E12, 363387.2], [1.72959411E12, 362790.26666666666], [1.72959342E12, 366198.43333333335], [1.72959291E12, 369481.56666666665], [1.72959402E12, 365420.0], [1.72959333E12, 361882.76666666666], [1.72959444E12, 210346.4], [1.72959393E12, 365831.4], [1.72959282E12, 358894.06666666665], [1.72959324E12, 361701.26666666666], [1.72959375E12, 371236.06666666665], [1.72959273E12, 364823.06666666665], [1.72959384E12, 370485.86666666664], [1.72959435E12, 366549.3333333333], [1.72959366E12, 372079.0333333333], [1.72959264E12, 132983.03333333333], [1.72959315E12, 343051.13333333336], [1.72959426E12, 365536.9666666667], [1.72959357E12, 367428.6], [1.72959417E12, 363992.2], [1.72959306E12, 354763.93333333335], [1.72959348E12, 358014.8], [1.72959399E12, 366089.5333333333], [1.72959297E12, 357252.5], [1.72959408E12, 366480.76666666666], [1.72959279E12, 355473.8], [1.7295939E12, 363742.13333333336], [1.72959288E12, 370429.4], [1.72959339E12, 360091.9666666667]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 30000, "maxX": 1.72959444E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 10800000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 21.170149525340538, "minX": 1.72959264E12, "maxY": 176.3343405366019, "series": [{"data": [[1.72959381E12, 164.24959481361236], [1.7295927E12, 156.9185952437945], [1.72959441E12, 166.10024468827217], [1.7295933E12, 167.72646657571664], [1.72959372E12, 166.33754184494805], [1.72959423E12, 166.72506364010445], [1.72959321E12, 167.37719934396262], [1.72959432E12, 166.9849428116418], [1.72959303E12, 171.22937653299692], [1.72959414E12, 169.14627572596606], [1.72959312E12, 167.5112761798387], [1.72959363E12, 165.86749093161296], [1.72959405E12, 164.93684777708214], [1.72959294E12, 166.18190786557017], [1.72959354E12, 166.72784873445238], [1.72959285E12, 164.76502636203915], [1.72959396E12, 165.13101306937722], [1.72959345E12, 165.73221151721398], [1.72959276E12, 168.6383473861741], [1.72959327E12, 166.0502307871109], [1.72959438E12, 165.76274596506607], [1.72959336E12, 164.94978439741286], [1.72959387E12, 174.56708772338365], [1.72959429E12, 165.294971956233], [1.72959318E12, 169.07826557532601], [1.72959267E12, 80.44370233417926], [1.72959378E12, 168.16011393455787], [1.72959309E12, 167.2910816447151], [1.7295942E12, 165.81618281115115], [1.72959369E12, 169.25966520301287], [1.729593E12, 166.8882852594431], [1.72959351E12, 168.4414506491719], [1.7295936E12, 166.4734616409171], [1.72959411E12, 166.71693645217206], [1.72959342E12, 165.16211602215938], [1.72959291E12, 163.7603130765128], [1.72959402E12, 165.5444701986744], [1.72959333E12, 167.14998383914718], [1.72959444E12, 165.84715830648966], [1.72959393E12, 165.39332098520322], [1.72959282E12, 168.55268481265713], [1.72959324E12, 167.20573607796646], [1.72959375E12, 162.94318897894178], [1.72959273E12, 165.80133109273314], [1.72959384E12, 163.27057568367997], [1.72959435E12, 165.04938380281652], [1.72959366E12, 162.54537078188898], [1.72959264E12, 21.170149525340538], [1.72959315E12, 176.3343405366019], [1.72959426E12, 165.4800119167162], [1.72959357E12, 164.67900502755256], [1.72959417E12, 166.2019258471301], [1.72959306E12, 170.48566361217755], [1.72959348E12, 168.97093416249714], [1.72959399E12, 165.2302954850931], [1.72959297E12, 169.38329099633134], [1.72959408E12, 165.08620670680367], [1.72959279E12, 170.15214332720674], [1.7295939E12, 166.34282134303066], [1.72959288E12, 163.2844123603586], [1.72959339E12, 168.01384424108832]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 30000, "maxX": 1.72959444E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 10800000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 21.166934578872375, "minX": 1.72959264E12, "maxY": 176.3329531826841, "series": [{"data": [[1.72959381E12, 164.2481602347899], [1.7295927E12, 156.91711391424178], [1.72959441E12, 166.0989382079073], [1.7295933E12, 167.72515823138707], [1.72959372E12, 166.3362005897083], [1.72959423E12, 166.72358518880694], [1.72959321E12, 167.3756931350334], [1.72959432E12, 166.98345045717218], [1.72959303E12, 171.22777936227158], [1.72959414E12, 169.1445616013533], [1.72959312E12, 167.50998045238634], [1.72959363E12, 165.86613067327326], [1.72959405E12, 164.93557219674702], [1.72959294E12, 166.18065531613033], [1.72959354E12, 166.72627027267103], [1.72959285E12, 164.7635434973635], [1.72959396E12, 165.12958171388328], [1.72959345E12, 165.73078622884196], [1.72959276E12, 168.63700955593222], [1.72959327E12, 166.0488250334841], [1.72959438E12, 165.76112093743058], [1.72959336E12, 164.94814537774596], [1.72959387E12, 174.5653646894485], [1.72959429E12, 165.29351742680493], [1.72959318E12, 169.07675483099806], [1.72959267E12, 80.44232724751562], [1.72959378E12, 168.15858882634043], [1.72959309E12, 167.28944228217196], [1.7295942E12, 165.81440290092436], [1.72959369E12, 169.25796074093205], [1.729593E12, 166.88669331047316], [1.72959351E12, 168.4399231771434], [1.7295936E12, 166.47214082756173], [1.72959411E12, 166.71543558500238], [1.72959342E12, 165.16061810932868], [1.72959291E12, 163.75893763576804], [1.72959402E12, 165.54289183223048], [1.72959333E12, 167.14855722612847], [1.72959444E12, 165.8457777266448], [1.72959393E12, 165.39202002160607], [1.72959282E12, 168.55147108404134], [1.72959324E12, 167.20448716519283], [1.72959375E12, 162.9418526324916], [1.72959273E12, 165.80003758899892], [1.72959384E12, 163.2690733321708], [1.72959435E12, 165.0481404049278], [1.72959366E12, 162.54402662301806], [1.72959264E12, 21.166934578872375], [1.72959315E12, 176.3329531826841], [1.72959426E12, 165.47862163325155], [1.72959357E12, 164.6774901754142], [1.72959417E12, 166.20054074418658], [1.72959306E12, 170.48423111030198], [1.72959348E12, 168.96945833896388], [1.72959399E12, 165.2288632307276], [1.72959297E12, 169.38168783516807], [1.72959408E12, 165.08486402605985], [1.72959279E12, 170.15044137336352], [1.7295939E12, 166.34124678435447], [1.72959288E12, 163.28306221554377], [1.72959339E12, 168.01235452905993]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 30000, "maxX": 1.72959444E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 10800000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 1.909340042230085E-4, "minX": 1.72959264E12, "maxY": 0.0017894513360225562, "series": [{"data": [[1.72959381E12, 2.9567655175434917E-4], [1.7295927E12, 7.178750897343892E-4], [1.72959441E12, 4.428746996755893E-4], [1.7295933E12, 5.255742177890076E-4], [1.72959372E12, 2.4386458864477753E-4], [1.72959423E12, 3.2236907924721727E-4], [1.72959321E12, 4.685983331287871E-4], [1.72959432E12, 4.6775289282889956E-4], [1.72959303E12, 5.818264788089619E-4], [1.72959414E12, 4.849168311248946E-4], [1.72959312E12, 4.356325048869042E-4], [1.72959363E12, 4.313014244006005E-4], [1.72959405E12, 3.408878478980437E-4], [1.72959294E12, 4.212113150660648E-4], [1.72959354E12, 3.8905748046375255E-4], [1.72959285E12, 4.1739894551845116E-4], [1.72959396E12, 3.9637536747299466E-4], [1.72959345E12, 3.977548945949515E-4], [1.72959276E12, 4.047217537942686E-4], [1.72959327E12, 5.645152363769222E-4], [1.72959438E12, 3.7585673225735077E-4], [1.72959336E12, 4.2900514806177214E-4], [1.72959387E12, 5.006112113627051E-4], [1.72959429E12, 4.4076649293120653E-4], [1.72959318E12, 5.862589911835728E-4], [1.72959267E12, 7.279870580078593E-4], [1.72959378E12, 4.709893018144285E-4], [1.72959309E12, 4.683892984197479E-4], [1.7295942E12, 3.9799234970261437E-4], [1.72959369E12, 4.1764964838414447E-4], [1.729593E12, 4.1190287998040936E-4], [1.72959351E12, 1.909340042230085E-4], [1.7295936E12, 3.884745160717441E-4], [1.72959411E12, 4.002312447191703E-4], [1.72959342E12, 4.295485334772505E-4], [1.72959291E12, 5.458098180270079E-4], [1.72959402E12, 2.7593818984547353E-4], [1.72959333E12, 5.015436398693639E-4], [1.72959444E12, 3.0679552078539767E-4], [1.72959393E12, 3.3075345637361694E-4], [1.72959282E12, 5.057202580297149E-4], [1.72959324E12, 5.687013537322284E-4], [1.72959375E12, 3.6939657982225355E-4], [1.72959273E12, 5.970017246716509E-4], [1.72959384E12, 4.1369099460024204E-4], [1.72959435E12, 3.8512323943661986E-4], [1.72959366E12, 3.5771969951544974E-4], [1.72959264E12, 0.0017894513360225562], [1.72959315E12, 5.643473557974881E-4], [1.72959426E12, 4.7446181685772986E-4], [1.72959357E12, 3.951788184153286E-4], [1.72959417E12, 4.432329410721682E-4], [1.72959306E12, 5.229768753268595E-4], [1.72959348E12, 3.1544319769276135E-4], [1.72959399E12, 3.415375801511601E-4], [1.72959297E12, 4.6288456110640764E-4], [1.72959408E12, 3.7418971418509017E-4], [1.72959279E12, 5.1058615290353E-4], [1.7295939E12, 3.659185664862964E-4], [1.72959288E12, 5.444132314191735E-4], [1.72959339E12, 4.1443116522362763E-4]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 30000, "maxX": 1.72959444E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 10800000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 0.0, "minX": 1.72959264E12, "maxY": 1560.0, "series": [{"data": [[1.72959381E12, 984.0], [1.7295927E12, 1092.0], [1.72959441E12, 1011.0], [1.7295933E12, 1101.0], [1.72959372E12, 989.0], [1.72959423E12, 1047.0], [1.72959321E12, 1045.0], [1.72959432E12, 1179.0], [1.72959303E12, 1282.0], [1.72959414E12, 1560.0], [1.72959312E12, 1213.0], [1.72959363E12, 1109.0], [1.72959405E12, 1152.0], [1.72959294E12, 1022.0], [1.72959354E12, 1042.0], [1.72959285E12, 1168.0], [1.72959396E12, 922.0], [1.72959345E12, 962.0], [1.72959276E12, 1281.0], [1.72959327E12, 940.0], [1.72959438E12, 993.0], [1.72959336E12, 1063.0], [1.72959387E12, 1144.0], [1.72959429E12, 975.0], [1.72959318E12, 1067.0], [1.72959267E12, 907.0], [1.72959378E12, 1274.0], [1.72959309E12, 1092.0], [1.7295942E12, 1060.0], [1.72959369E12, 1042.0], [1.729593E12, 966.0], [1.72959351E12, 981.0], [1.7295936E12, 1139.0], [1.72959411E12, 986.0], [1.72959342E12, 1219.0], [1.72959291E12, 1054.0], [1.72959402E12, 865.0], [1.72959333E12, 992.0], [1.72959444E12, 927.0], [1.72959393E12, 1033.0], [1.72959282E12, 958.0], [1.72959324E12, 1060.0], [1.72959375E12, 1311.0], [1.72959273E12, 1055.0], [1.72959384E12, 1051.0], [1.72959435E12, 1298.0], [1.72959366E12, 1048.0], [1.72959264E12, 195.0], [1.72959315E12, 1281.0], [1.72959426E12, 904.0], [1.72959357E12, 922.0], [1.72959417E12, 1217.0], [1.72959306E12, 1262.0], [1.72959348E12, 1079.0], [1.72959399E12, 1056.0], [1.72959297E12, 1153.0], [1.72959408E12, 970.0], [1.72959279E12, 1229.0], [1.7295939E12, 1030.0], [1.72959288E12, 1056.0], [1.72959339E12, 1070.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.72959381E12, 88.0], [1.7295927E12, 48.0], [1.72959441E12, 90.0], [1.7295933E12, 89.0], [1.72959372E12, 86.0], [1.72959423E12, 89.0], [1.72959321E12, 90.0], [1.72959432E12, 84.0], [1.72959303E12, 81.0], [1.72959414E12, 75.0], [1.72959312E12, 88.0], [1.72959363E12, 88.0], [1.72959405E12, 89.0], [1.72959294E12, 91.0], [1.72959354E12, 88.0], [1.72959285E12, 88.0], [1.72959396E12, 84.0], [1.72959345E12, 89.0], [1.72959276E12, 83.0], [1.72959327E12, 90.0], [1.72959438E12, 91.0], [1.72959336E12, 86.0], [1.72959387E12, 89.0], [1.72959429E12, 89.0], [1.72959318E12, 88.0], [1.72959267E12, 0.0], [1.72959378E12, 89.0], [1.72959309E12, 89.0], [1.7295942E12, 85.0], [1.72959369E12, 89.0], [1.729593E12, 88.0], [1.72959351E12, 89.0], [1.7295936E12, 87.0], [1.72959411E12, 88.0], [1.72959342E12, 87.0], [1.72959291E12, 87.0], [1.72959402E12, 87.0], [1.72959333E12, 89.0], [1.72959444E12, 88.0], [1.72959393E12, 88.0], [1.72959282E12, 88.0], [1.72959324E12, 86.0], [1.72959375E12, 88.0], [1.72959273E12, 83.0], [1.72959384E12, 85.0], [1.72959435E12, 81.0], [1.72959366E12, 85.0], [1.72959264E12, 0.0], [1.72959315E12, 87.0], [1.72959426E12, 89.0], [1.72959357E12, 88.0], [1.72959417E12, 87.0], [1.72959306E12, 87.0], [1.72959348E12, 86.0], [1.72959399E12, 87.0], [1.72959297E12, 84.0], [1.72959408E12, 88.0], [1.72959279E12, 88.0], [1.7295939E12, 88.0], [1.72959288E12, 85.0], [1.72959339E12, 91.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.72959381E12, 282.0], [1.7295927E12, 283.0], [1.72959441E12, 278.0], [1.7295933E12, 279.0], [1.72959372E12, 278.0], [1.72959423E12, 276.0], [1.72959321E12, 276.0], [1.72959432E12, 284.0], [1.72959303E12, 298.0], [1.72959414E12, 277.0], [1.72959312E12, 281.0], [1.72959363E12, 294.0], [1.72959405E12, 276.0], [1.72959294E12, 281.0], [1.72959354E12, 279.0], [1.72959285E12, 276.0], [1.72959396E12, 276.0], [1.72959345E12, 275.0], [1.72959276E12, 286.0], [1.72959327E12, 281.0], [1.72959438E12, 281.0], [1.72959336E12, 279.0], [1.72959387E12, 291.0], [1.72959429E12, 277.0], [1.72959318E12, 278.0], [1.72959267E12, 235.0], [1.72959378E12, 278.0], [1.72959309E12, 278.0], [1.7295942E12, 278.0], [1.72959369E12, 289.0], [1.729593E12, 284.0], [1.72959351E12, 286.0], [1.7295936E12, 279.0], [1.72959411E12, 281.0], [1.72959342E12, 287.0], [1.72959291E12, 278.0], [1.72959402E12, 278.0], [1.72959333E12, 280.0], [1.72959444E12, 278.0], [1.72959393E12, 276.0], [1.72959282E12, 286.0], [1.72959324E12, 280.0], [1.72959375E12, 276.0], [1.72959273E12, 294.0], [1.72959384E12, 277.90000000000146], [1.72959435E12, 278.0], [1.72959366E12, 277.0], [1.72959264E12, 47.0], [1.72959315E12, 280.0], [1.72959426E12, 274.0], [1.72959357E12, 274.0], [1.72959417E12, 280.0], [1.72959306E12, 285.0], [1.72959348E12, 279.0], [1.72959399E12, 282.0], [1.72959297E12, 280.0], [1.72959408E12, 275.0], [1.72959279E12, 289.0], [1.7295939E12, 277.0], [1.72959288E12, 275.0], [1.72959339E12, 282.0]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.72959381E12, 463.9900000000016], [1.7295927E12, 462.0], [1.72959441E12, 451.0], [1.7295933E12, 456.0], [1.72959372E12, 455.0], [1.72959423E12, 451.0], [1.72959321E12, 452.0], [1.72959432E12, 463.0], [1.72959303E12, 531.0], [1.72959414E12, 449.0], [1.72959312E12, 455.0], [1.72959363E12, 485.0], [1.72959405E12, 447.0], [1.72959294E12, 459.0], [1.72959354E12, 455.0], [1.72959285E12, 448.0], [1.72959396E12, 452.0], [1.72959345E12, 446.0], [1.72959276E12, 472.0], [1.72959327E12, 460.0], [1.72959438E12, 458.9900000000016], [1.72959336E12, 455.0], [1.72959387E12, 472.0], [1.72959429E12, 448.0], [1.72959318E12, 453.0], [1.72959267E12, 429.9900000000016], [1.72959378E12, 453.0], [1.72959309E12, 454.0], [1.7295942E12, 454.0], [1.72959369E12, 486.0], [1.729593E12, 467.9900000000016], [1.72959351E12, 485.9900000000016], [1.7295936E12, 451.0], [1.72959411E12, 459.0], [1.72959342E12, 476.9900000000016], [1.72959291E12, 454.0], [1.72959402E12, 450.9900000000016], [1.72959333E12, 454.0], [1.72959444E12, 449.0], [1.72959393E12, 445.0], [1.72959282E12, 480.0], [1.72959324E12, 464.9900000000016], [1.72959375E12, 451.0], [1.72959273E12, 486.9900000000016], [1.72959384E12, 453.0], [1.72959435E12, 452.0], [1.72959366E12, 452.0], [1.72959264E12, 79.0], [1.72959315E12, 453.0], [1.72959426E12, 448.0], [1.72959357E12, 444.0], [1.72959417E12, 459.0], [1.72959306E12, 466.0], [1.72959348E12, 453.0], [1.72959399E12, 459.0], [1.72959297E12, 451.0], [1.72959408E12, 448.0], [1.72959279E12, 480.0], [1.7295939E12, 453.0], [1.72959288E12, 449.0], [1.72959339E12, 457.0]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.72959381E12, 112.0], [1.7295927E12, 115.0], [1.72959441E12, 114.0], [1.7295933E12, 113.0], [1.72959372E12, 113.0], [1.72959423E12, 113.0], [1.72959321E12, 112.0], [1.72959432E12, 115.0], [1.72959303E12, 128.0], [1.72959414E12, 111.0], [1.72959312E12, 117.0], [1.72959363E12, 116.0], [1.72959405E12, 113.0], [1.72959294E12, 116.0], [1.72959354E12, 112.0], [1.72959285E12, 112.0], [1.72959396E12, 113.5], [1.72959345E12, 112.0], [1.72959276E12, 116.0], [1.72959327E12, 113.0], [1.72959438E12, 114.0], [1.72959336E12, 113.0], [1.72959387E12, 120.0], [1.72959429E12, 113.0], [1.72959318E12, 113.0], [1.72959267E12, 61.0], [1.72959378E12, 113.0], [1.72959309E12, 114.0], [1.7295942E12, 113.0], [1.72959369E12, 119.0], [1.729593E12, 117.0], [1.72959351E12, 117.0], [1.7295936E12, 113.0], [1.72959411E12, 114.0], [1.72959342E12, 116.0], [1.72959291E12, 111.0], [1.72959402E12, 113.0], [1.72959333E12, 114.0], [1.72959444E12, 115.0], [1.72959393E12, 112.0], [1.72959282E12, 120.0], [1.72959324E12, 114.0], [1.72959375E12, 111.0], [1.72959273E12, 118.0], [1.72959384E12, 112.0], [1.72959435E12, 113.0], [1.72959366E12, 112.0], [1.72959264E12, 27.0], [1.72959315E12, 115.0], [1.72959426E12, 112.0], [1.72959357E12, 111.0], [1.72959417E12, 112.0], [1.72959306E12, 125.0], [1.72959348E12, 115.0], [1.72959399E12, 113.0], [1.72959297E12, 116.0], [1.72959408E12, 112.0], [1.72959279E12, 117.0], [1.7295939E12, 113.0], [1.72959288E12, 111.0], [1.72959339E12, 113.0]], "isOverall": false, "label": "Median", "isController": false}, {"data": [[1.72959381E12, 350.0], [1.7295927E12, 354.0], [1.72959441E12, 348.0], [1.7295933E12, 353.0], [1.72959372E12, 350.0], [1.72959423E12, 346.9500000000007], [1.72959321E12, 348.0], [1.72959432E12, 356.0], [1.72959303E12, 369.0], [1.72959414E12, 347.0], [1.72959312E12, 352.0], [1.72959363E12, 373.0], [1.72959405E12, 347.0], [1.72959294E12, 352.0], [1.72959354E12, 349.0], [1.72959285E12, 345.0], [1.72959396E12, 347.0], [1.72959345E12, 346.9500000000007], [1.72959276E12, 359.0], [1.72959327E12, 353.0], [1.72959438E12, 349.0], [1.72959336E12, 348.0], [1.72959387E12, 364.0], [1.72959429E12, 351.0], [1.72959318E12, 351.0], [1.72959267E12, 299.0], [1.72959378E12, 352.0], [1.72959309E12, 353.0], [1.7295942E12, 350.0], [1.72959369E12, 361.9500000000007], [1.729593E12, 351.0], [1.72959351E12, 360.0], [1.7295936E12, 351.0], [1.72959411E12, 352.9500000000007], [1.72959342E12, 360.0], [1.72959291E12, 351.0], [1.72959402E12, 349.0], [1.72959333E12, 353.0], [1.72959444E12, 345.0], [1.72959393E12, 346.0], [1.72959282E12, 358.0], [1.72959324E12, 356.9500000000007], [1.72959375E12, 347.0], [1.72959273E12, 368.0], [1.72959384E12, 349.0], [1.72959435E12, 352.0], [1.72959366E12, 351.0], [1.72959264E12, 54.0], [1.72959315E12, 352.9500000000007], [1.72959426E12, 341.0], [1.72959357E12, 342.0], [1.72959417E12, 353.0], [1.72959306E12, 354.0], [1.72959348E12, 351.0], [1.72959399E12, 354.0], [1.72959297E12, 348.0], [1.72959408E12, 343.0], [1.72959279E12, 367.0], [1.7295939E12, 347.0], [1.72959288E12, 342.9500000000007], [1.72959339E12, 357.9500000000007]], "isOverall": false, "label": "95th percentile", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 30000, "maxX": 1.72959444E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 10800000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 5.0, "minX": 714.0, "maxY": 184.0, "series": [{"data": [[714.0, 5.0], [823.0, 184.0], [2045.0, 14.0], [2169.0, 5.0], [2297.0, 8.0], [2344.0, 81.0], [2376.0, 140.0], [2339.0, 144.0], [2391.0, 146.0], [2496.0, 14.5], [2462.0, 87.0], [2499.0, 139.0], [2476.0, 140.0], [2439.0, 137.0], [2466.0, 143.0], [2513.0, 133.0], [2543.0, 131.0], [2540.0, 147.0], [2678.0, 35.0], [2679.0, 125.0], [2573.0, 133.0], [2670.0, 132.0], [2574.0, 132.0], [2659.0, 127.0], [2632.0, 136.0], [2566.0, 133.0], [2608.0, 130.0], [2687.0, 132.0], [2652.0, 132.0], [2635.0, 129.0], [2569.0, 134.0], [2706.0, 78.0], [2808.0, 113.0], [2757.0, 64.0], [2701.0, 121.0], [2702.0, 128.0], [2703.0, 128.0], [2770.0, 114.0], [2760.0, 124.0], [2759.0, 123.0], [2758.0, 123.0], [2761.0, 125.0], [2769.0, 123.0], [2753.0, 120.0], [2756.0, 124.0], [2810.0, 122.0], [2812.0, 125.0], [2815.0, 120.0], [2813.0, 131.0], [2794.0, 117.0], [2795.0, 125.0], [2806.0, 134.0], [2804.0, 122.0], [2802.0, 126.0], [2801.0, 121.0], [2800.0, 121.0], [2798.0, 125.0], [2797.0, 122.0], [2793.0, 123.0], [2786.0, 120.0], [2792.0, 126.0], [2788.0, 123.0], [2787.0, 121.0], [2784.0, 126.0], [2717.0, 125.0], [2709.0, 124.0], [2708.0, 125.0], [2785.0, 126.0], [2696.0, 93.0], [2748.0, 122.0], [2749.0, 126.0], [2750.0, 123.0], [2739.0, 124.0], [2740.0, 132.0], [2747.0, 129.0], [2743.0, 133.0], [2730.0, 124.0], [2728.0, 129.0], [2737.0, 124.0], [2699.0, 125.0], [2698.0, 127.0], [2775.0, 123.0], [2777.0, 122.0], [2773.0, 123.0], [2917.0, 108.0], [2897.0, 73.0], [2916.0, 97.0], [2915.0, 120.0], [2912.0, 93.0], [2847.0, 129.0], [2913.0, 121.0], [2914.0, 101.0], [2846.0, 118.0], [2825.0, 90.0], [2826.0, 121.0], [2831.0, 119.0], [2833.0, 121.0], [2836.0, 121.0], [2838.0, 118.0], [2844.0, 111.0], [2839.0, 119.0], [2857.0, 37.0], [2850.0, 79.0], [2848.0, 122.0], [2855.0, 120.0], [2854.0, 120.0], [2851.0, 122.0], [2930.0, 108.0], [2931.0, 118.0], [2933.0, 118.0], [2932.0, 116.0], [2918.0, 117.0], [2919.0, 117.0], [2921.0, 117.0], [2922.0, 119.0], [2924.0, 117.0], [2925.0, 120.0], [2926.0, 119.0], [2920.0, 117.0], [2929.0, 117.0], [2928.0, 116.0], [2927.0, 118.0], [2906.0, 109.0], [2900.0, 118.0], [2899.0, 119.0], [2901.0, 120.0], [2905.0, 121.0], [2907.0, 117.0], [2908.0, 123.0], [2909.0, 117.0], [2911.0, 117.0], [2910.0, 118.0], [2824.0, 80.5], [2894.0, 25.5], [2896.0, 118.0], [2895.0, 120.0], [2892.0, 117.0], [2893.0, 119.0], [2888.0, 121.0], [2889.0, 117.0], [2890.0, 119.0], [2942.0, 116.0], [2943.0, 118.0], [2881.0, 118.0], [2883.0, 118.0], [2886.0, 125.0], [2884.0, 123.0], [2887.0, 119.0], [2941.0, 117.0], [2937.0, 117.0], [2940.0, 116.0], [2938.0, 118.0], [2939.0, 117.0], [2935.0, 118.0], [2936.0, 114.0], [2934.0, 115.0], [2866.0, 118.0], [2865.0, 122.0], [2858.0, 119.0], [2861.0, 117.0], [2859.0, 121.0], [2864.0, 120.0], [2868.0, 120.0], [2867.0, 118.0], [2870.0, 120.0], [2872.0, 118.0], [2876.0, 123.0], [2873.0, 120.0], [2875.0, 123.0], [2818.0, 90.0], [2817.0, 122.0], [2879.0, 117.0], [2819.0, 125.0], [2821.0, 124.0], [2878.0, 116.0], [2962.0, 113.0], [3000.0, 114.0], [3008.0, 114.0], [3011.0, 113.0], [3009.0, 113.0], [3010.0, 113.0], [3069.0, 111.0], [3067.0, 111.0], [3068.0, 111.0], [3071.0, 111.0], [3070.0, 111.0], [3013.0, 114.0], [3014.0, 113.0], [3012.0, 114.0], [3015.0, 113.0], [3029.0, 112.0], [3016.0, 113.0], [3017.0, 114.0], [3022.0, 112.0], [3023.0, 113.0], [3025.0, 113.0], [3026.0, 112.0], [3027.0, 113.0], [3028.0, 112.0], [3024.0, 113.0], [3020.0, 113.0], [3021.0, 113.0], [3019.0, 113.0], [3018.0, 114.0], [3032.0, 112.0], [3039.0, 112.0], [3034.0, 112.0], [3037.0, 112.0], [3035.0, 113.0], [3036.0, 112.0], [3033.0, 113.0], [3038.0, 113.0], [3030.0, 113.0], [3031.0, 113.0], [2977.0, 114.0], [2976.0, 115.0], [3043.0, 112.0], [3060.0, 111.0], [3062.0, 111.0], [3061.0, 111.0], [3065.0, 112.0], [3063.0, 112.0], [3064.0, 111.0], [3056.0, 112.0], [3057.0, 111.0], [3059.0, 112.0], [3058.0, 111.0], [3055.0, 111.0], [3054.0, 111.0], [3053.0, 112.0], [3052.0, 112.0], [3044.0, 112.0], [3045.0, 111.0], [3047.0, 112.0], [3048.0, 112.0], [3049.0, 111.0], [3050.0, 112.0], [3051.0, 112.0], [3046.0, 112.0], [2974.0, 114.0], [2972.0, 115.0], [2973.0, 115.0], [2970.0, 116.0], [2971.0, 114.0], [2975.0, 115.0], [3040.0, 113.0], [3042.0, 112.0], [3041.0, 113.0], [2967.0, 115.0], [2968.0, 115.0], [2966.0, 115.0], [2965.0, 115.0], [2963.0, 117.0], [2964.0, 117.0], [2969.0, 115.0], [3066.0, 111.0], [2978.0, 110.0], [2960.0, 111.0], [2961.0, 116.0], [2959.0, 116.0], [2958.0, 115.0], [3004.0, 114.0], [2952.0, 118.0], [2950.0, 117.0], [2951.0, 115.0], [2956.0, 116.0], [2957.0, 118.0], [2953.0, 116.0], [2954.0, 116.0], [2955.0, 116.0], [2948.0, 117.0], [2947.0, 116.0], [2946.0, 117.0], [2945.0, 115.0], [2944.0, 116.0], [3005.0, 115.0], [3007.0, 114.0], [3006.0, 114.0], [2949.0, 116.0], [3003.0, 114.0], [3002.0, 114.0], [3001.0, 113.0], [2983.0, 113.0], [2982.0, 115.5], [2981.0, 115.0], [2980.0, 114.0], [2979.0, 115.0], [2988.0, 115.0], [2987.0, 115.0], [2985.0, 115.0], [2986.0, 115.0], [2984.0, 114.0], [2992.0, 114.0], [2991.0, 115.0], [2990.0, 115.0], [2994.0, 114.0], [2995.0, 114.0], [2993.0, 114.0], [2989.0, 115.0], [2998.0, 113.0], [2997.0, 114.0], [2999.0, 114.0], [2996.0, 114.0], [3080.0, 110.0], [3133.0, 105.0], [3128.0, 108.0], [3132.0, 108.0], [3135.0, 108.0], [3127.0, 108.0], [3111.0, 111.0], [3104.0, 109.0], [3108.0, 109.0], [3110.0, 110.0], [3109.0, 111.0], [3106.0, 110.0], [3105.0, 109.0], [3113.0, 109.0], [3112.0, 109.0], [3114.0, 109.0], [3117.0, 110.0], [3116.0, 109.0], [3115.0, 110.0], [3125.0, 108.0], [3123.0, 109.0], [3122.0, 108.0], [3126.0, 108.0], [3118.0, 109.0], [3087.0, 111.0], [3098.0, 111.0], [3094.0, 110.0], [3095.0, 111.0], [3096.0, 110.0], [3097.0, 110.0], [3101.0, 110.0], [3099.0, 110.0], [3100.0, 109.0], [3136.0, 109.0], [3165.0, 108.0], [3142.0, 108.0], [3139.0, 110.0], [3138.0, 109.0], [3103.0, 109.0], [3102.0, 109.0], [3072.0, 110.0], [3092.0, 110.0], [3091.0, 111.0], [3088.0, 110.0], [3090.0, 111.0], [3089.0, 110.0], [3093.0, 110.0], [3075.0, 111.0], [3073.0, 112.0], [3074.0, 110.0], [3077.0, 111.0], [3076.0, 110.0], [3079.0, 111.0], [3078.0, 110.0], [3086.0, 110.0], [3085.0, 110.0], [3084.0, 110.0], [3081.0, 111.0], [3082.0, 110.0], [3083.0, 110.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 3165.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 5.0, "minX": 714.0, "maxY": 184.0, "series": [{"data": [[714.0, 5.0], [823.0, 184.0], [2045.0, 14.0], [2169.0, 5.0], [2297.0, 8.0], [2344.0, 81.0], [2376.0, 140.0], [2339.0, 144.0], [2391.0, 146.0], [2496.0, 14.5], [2462.0, 87.0], [2499.0, 139.0], [2476.0, 140.0], [2439.0, 137.0], [2466.0, 143.0], [2513.0, 133.0], [2543.0, 131.0], [2540.0, 147.0], [2678.0, 35.0], [2679.0, 125.0], [2573.0, 133.0], [2670.0, 132.0], [2574.0, 132.0], [2659.0, 127.0], [2632.0, 136.0], [2566.0, 133.0], [2608.0, 130.0], [2687.0, 132.0], [2652.0, 132.0], [2635.0, 129.0], [2569.0, 134.0], [2706.0, 78.0], [2808.0, 113.0], [2757.0, 64.0], [2701.0, 121.0], [2702.0, 128.0], [2703.0, 128.0], [2770.0, 114.0], [2760.0, 124.0], [2759.0, 123.0], [2758.0, 123.0], [2761.0, 125.0], [2769.0, 123.0], [2753.0, 120.0], [2756.0, 124.0], [2810.0, 122.0], [2812.0, 125.0], [2815.0, 120.0], [2813.0, 131.0], [2794.0, 117.0], [2795.0, 125.0], [2806.0, 134.0], [2804.0, 122.0], [2802.0, 126.0], [2801.0, 121.0], [2800.0, 121.0], [2798.0, 125.0], [2797.0, 122.0], [2793.0, 123.0], [2786.0, 120.0], [2792.0, 126.0], [2788.0, 123.0], [2787.0, 121.0], [2784.0, 126.0], [2717.0, 125.0], [2709.0, 124.0], [2708.0, 125.0], [2785.0, 126.0], [2696.0, 93.0], [2748.0, 122.0], [2749.0, 126.0], [2750.0, 123.0], [2739.0, 124.0], [2740.0, 132.0], [2747.0, 129.0], [2743.0, 133.0], [2730.0, 124.0], [2728.0, 129.0], [2737.0, 124.0], [2699.0, 125.0], [2698.0, 127.0], [2775.0, 123.0], [2777.0, 122.0], [2773.0, 123.0], [2917.0, 108.0], [2897.0, 73.0], [2916.0, 97.0], [2915.0, 120.0], [2912.0, 93.0], [2847.0, 129.0], [2913.0, 121.0], [2914.0, 101.0], [2846.0, 118.0], [2825.0, 90.0], [2826.0, 121.0], [2831.0, 119.0], [2833.0, 121.0], [2836.0, 121.0], [2838.0, 118.0], [2844.0, 111.0], [2839.0, 119.0], [2857.0, 37.0], [2850.0, 79.0], [2848.0, 122.0], [2855.0, 120.0], [2854.0, 120.0], [2851.0, 122.0], [2930.0, 108.0], [2931.0, 118.0], [2933.0, 118.0], [2932.0, 116.0], [2918.0, 117.0], [2919.0, 117.0], [2921.0, 117.0], [2922.0, 119.0], [2924.0, 117.0], [2925.0, 120.0], [2926.0, 119.0], [2920.0, 117.0], [2929.0, 117.0], [2928.0, 116.0], [2927.0, 118.0], [2906.0, 109.0], [2900.0, 118.0], [2899.0, 119.0], [2901.0, 120.0], [2905.0, 121.0], [2907.0, 117.0], [2908.0, 123.0], [2909.0, 117.0], [2911.0, 117.0], [2910.0, 118.0], [2824.0, 80.5], [2894.0, 25.5], [2896.0, 118.0], [2895.0, 120.0], [2892.0, 117.0], [2893.0, 119.0], [2888.0, 121.0], [2889.0, 117.0], [2890.0, 119.0], [2942.0, 116.0], [2943.0, 118.0], [2881.0, 118.0], [2883.0, 118.0], [2886.0, 125.0], [2884.0, 123.0], [2887.0, 119.0], [2941.0, 117.0], [2937.0, 117.0], [2940.0, 116.0], [2938.0, 118.0], [2939.0, 117.0], [2935.0, 118.0], [2936.0, 114.0], [2934.0, 115.0], [2866.0, 118.0], [2865.0, 122.0], [2858.0, 119.0], [2861.0, 117.0], [2859.0, 121.0], [2864.0, 120.0], [2868.0, 120.0], [2867.0, 118.0], [2870.0, 120.0], [2872.0, 118.0], [2876.0, 123.0], [2873.0, 120.0], [2875.0, 123.0], [2818.0, 90.0], [2817.0, 122.0], [2879.0, 117.0], [2819.0, 125.0], [2821.0, 124.0], [2878.0, 116.0], [2962.0, 113.0], [3000.0, 114.0], [3008.0, 114.0], [3011.0, 113.0], [3009.0, 113.0], [3010.0, 113.0], [3069.0, 111.0], [3067.0, 111.0], [3068.0, 111.0], [3071.0, 111.0], [3070.0, 111.0], [3013.0, 114.0], [3014.0, 113.0], [3012.0, 114.0], [3015.0, 113.0], [3029.0, 112.0], [3016.0, 113.0], [3017.0, 114.0], [3022.0, 112.0], [3023.0, 113.0], [3025.0, 113.0], [3026.0, 112.0], [3027.0, 113.0], [3028.0, 112.0], [3024.0, 113.0], [3020.0, 113.0], [3021.0, 113.0], [3019.0, 113.0], [3018.0, 114.0], [3032.0, 112.0], [3039.0, 112.0], [3034.0, 112.0], [3037.0, 112.0], [3035.0, 113.0], [3036.0, 112.0], [3033.0, 113.0], [3038.0, 113.0], [3030.0, 113.0], [3031.0, 113.0], [2977.0, 114.0], [2976.0, 115.0], [3043.0, 112.0], [3060.0, 111.0], [3062.0, 111.0], [3061.0, 111.0], [3065.0, 112.0], [3063.0, 112.0], [3064.0, 111.0], [3056.0, 112.0], [3057.0, 111.0], [3059.0, 112.0], [3058.0, 111.0], [3055.0, 111.0], [3054.0, 111.0], [3053.0, 112.0], [3052.0, 112.0], [3044.0, 112.0], [3045.0, 111.0], [3047.0, 112.0], [3048.0, 112.0], [3049.0, 111.0], [3050.0, 112.0], [3051.0, 111.5], [3046.0, 112.0], [2974.0, 114.0], [2972.0, 115.0], [2973.0, 115.0], [2970.0, 116.0], [2971.0, 114.0], [2975.0, 115.0], [3040.0, 113.0], [3042.0, 112.0], [3041.0, 113.0], [2967.0, 115.0], [2968.0, 115.0], [2966.0, 115.0], [2965.0, 115.0], [2963.0, 117.0], [2964.0, 117.0], [2969.0, 115.0], [3066.0, 111.0], [2978.0, 110.0], [2960.0, 111.0], [2961.0, 116.0], [2959.0, 116.0], [2958.0, 115.0], [3004.0, 114.0], [2952.0, 118.0], [2950.0, 117.0], [2951.0, 115.0], [2956.0, 116.0], [2957.0, 118.0], [2953.0, 116.0], [2954.0, 116.0], [2955.0, 116.0], [2948.0, 117.0], [2947.0, 116.0], [2946.0, 117.0], [2945.0, 115.0], [2944.0, 116.0], [3005.0, 115.0], [3007.0, 114.0], [3006.0, 114.0], [2949.0, 116.0], [3003.0, 114.0], [3002.0, 114.0], [3001.0, 113.0], [2983.0, 113.0], [2982.0, 115.5], [2981.0, 115.0], [2980.0, 114.0], [2979.0, 115.0], [2988.0, 115.0], [2987.0, 115.0], [2985.0, 115.0], [2986.0, 115.0], [2984.0, 114.0], [2992.0, 114.0], [2991.0, 115.0], [2990.0, 115.0], [2994.0, 114.0], [2995.0, 114.0], [2993.0, 114.0], [2989.0, 115.0], [2998.0, 113.0], [2997.0, 114.0], [2999.0, 114.0], [2996.0, 114.0], [3080.0, 110.0], [3133.0, 105.0], [3128.0, 108.0], [3132.0, 108.0], [3135.0, 108.0], [3127.0, 108.0], [3111.0, 111.0], [3104.0, 109.0], [3108.0, 109.0], [3110.0, 110.0], [3109.0, 111.0], [3106.0, 110.0], [3105.0, 109.0], [3113.0, 109.0], [3112.0, 109.0], [3114.0, 109.0], [3117.0, 110.0], [3116.0, 109.0], [3115.0, 110.0], [3125.0, 108.0], [3123.0, 109.0], [3122.0, 108.0], [3126.0, 108.0], [3118.0, 109.0], [3087.0, 111.0], [3098.0, 111.0], [3094.0, 110.0], [3095.0, 111.0], [3096.0, 110.0], [3097.0, 110.0], [3101.0, 110.0], [3099.0, 110.0], [3100.0, 109.0], [3136.0, 109.0], [3165.0, 108.0], [3142.0, 108.0], [3139.0, 110.0], [3138.0, 109.0], [3103.0, 109.0], [3102.0, 109.0], [3072.0, 110.0], [3092.0, 110.0], [3091.0, 111.0], [3088.0, 110.0], [3090.0, 111.0], [3089.0, 110.0], [3093.0, 110.0], [3075.0, 111.0], [3073.0, 112.0], [3074.0, 110.0], [3077.0, 111.0], [3076.0, 110.0], [3079.0, 111.0], [3078.0, 110.0], [3086.0, 110.0], [3085.0, 110.0], [3084.0, 110.0], [3081.0, 111.0], [3082.0, 110.0], [3083.0, 110.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 3165.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 1200.2666666666667, "minX": 1.72959264E12, "maxY": 3072.366666666667, "series": [{"data": [[1.72959381E12, 3046.8], [1.7295927E12, 2929.733333333333], [1.72959441E12, 3011.4666666666667], [1.7295933E12, 2979.5666666666666], [1.72959372E12, 3010.4333333333334], [1.72959423E12, 3003.366666666667], [1.72959321E12, 2990.2], [1.72959432E12, 2993.366666666667], [1.72959303E12, 2929.5333333333333], [1.72959414E12, 2967.9], [1.72959312E12, 2985.5333333333333], [1.72959363E12, 3014.3], [1.72959405E12, 3029.766666666667], [1.72959294E12, 3004.9666666666667], [1.72959354E12, 3000.0333333333333], [1.72959285E12, 3032.766666666667], [1.72959396E12, 3027.0], [1.72959345E12, 3023.5], [1.72959276E12, 2970.6], [1.72959327E12, 3010.5666666666666], [1.72959438E12, 3013.1666666666665], [1.72959336E12, 3028.4666666666667], [1.72959387E12, 2853.866666666667], [1.72959429E12, 3025.233333333333], [1.72959318E12, 2955.8333333333335], [1.72959267E12, 2880.3333333333335], [1.72959378E12, 2969.9], [1.72959309E12, 2989.266666666667], [1.7295942E12, 3007.8333333333335], [1.72959369E12, 2953.4], [1.729593E12, 2988.0666666666666], [1.72959351E12, 2967.1666666666665], [1.7295936E12, 3005.866666666667], [1.72959411E12, 2985.9666666666667], [1.72959342E12, 3020.7], [1.72959291E12, 3052.8333333333335], [1.72959402E12, 3022.9], [1.72959333E12, 2993.866666666667], [1.72959444E12, 1637.9], [1.72959393E12, 3025.2], [1.72959282E12, 2975.1], [1.72959324E12, 2988.866666666667], [1.72959375E12, 3067.5666666666666], [1.72959273E12, 3012.366666666667], [1.72959384E12, 3060.5], [1.72959435E12, 3029.4333333333334], [1.72959366E12, 3072.366666666667], [1.72959264E12, 1200.2666666666667], [1.72959315E12, 2833.133333333333], [1.72959426E12, 3020.9333333333334], [1.72959357E12, 3033.9666666666667], [1.72959417E12, 3012.0333333333333], [1.72959306E12, 2932.6], [1.72959348E12, 2958.0], [1.72959399E12, 3024.0333333333333], [1.72959297E12, 2952.766666666667], [1.72959408E12, 3028.3333333333335], [1.72959279E12, 2924.5666666666666], [1.7295939E12, 3013.6], [1.72959288E12, 3064.1666666666665], [1.72959339E12, 2976.233333333333]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 30000, "maxX": 1.72959444E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 10800000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 1099.0333333333333, "minX": 1.72959264E12, "maxY": 3075.0333333333333, "series": [{"data": [[1.72959381E12, 3043.866666666667], [1.7295927E12, 2925.3], [1.72959441E12, 3010.633333333333], [1.7295933E12, 2980.866666666667], [1.72959372E12, 3007.133333333333], [1.72959423E12, 2998.633333333333], [1.72959321E12, 2987.633333333333], [1.72959432E12, 2993.0333333333333], [1.72959303E12, 2921.8333333333335], [1.72959414E12, 2955.8333333333335], [1.72959312E12, 2984.1666666666665], [1.72959363E12, 3014.133333333333], [1.72959405E12, 3031.3], [1.72959294E12, 3007.2], [1.72959354E12, 2998.7], [1.72959285E12, 3034.6666666666665], [1.72959396E12, 3027.4333333333334], [1.72959345E12, 3016.9333333333334], [1.72959276E12, 2965.0], [1.72959327E12, 3011.4333333333334], [1.72959438E12, 3015.3333333333335], [1.72959336E12, 3030.266666666667], [1.72959387E12, 2863.1666666666665], [1.72959429E12, 3025.0333333333333], [1.72959318E12, 2956.6], [1.72959267E12, 2884.6666666666665], [1.72959378E12, 2972.4666666666667], [1.72959309E12, 2988.9666666666667], [1.7295942E12, 3015.133333333333], [1.72959369E12, 2953.0333333333333], [1.729593E12, 2994.233333333333], [1.72959351E12, 2967.866666666667], [1.7295936E12, 3003.2], [1.72959411E12, 2998.266666666667], [1.72959342E12, 3026.4333333333334], [1.72959291E12, 3053.5666666666666], [1.72959402E12, 3020.0], [1.72959333E12, 2990.766666666667], [1.72959444E12, 1738.4], [1.72959393E12, 3023.4], [1.72959282E12, 2966.0666666666666], [1.72959324E12, 2989.266666666667], [1.72959375E12, 3068.0666666666666], [1.72959273E12, 3015.0666666666666], [1.72959384E12, 3061.866666666667], [1.72959435E12, 3029.3333333333335], [1.72959366E12, 3075.0333333333333], [1.72959264E12, 1099.0333333333333], [1.72959315E12, 2835.133333333333], [1.72959426E12, 3020.9666666666667], [1.72959357E12, 3036.6], [1.72959417E12, 3008.2], [1.72959306E12, 2931.9333333333334], [1.72959348E12, 2958.8], [1.72959399E12, 3025.5333333333333], [1.72959297E12, 2952.5], [1.72959408E12, 3028.766666666667], [1.72959279E12, 2937.8], [1.7295939E12, 3006.133333333333], [1.72959288E12, 3061.4], [1.72959339E12, 2975.9666666666667]], "isOverall": false, "label": "200", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 30000, "maxX": 1.72959444E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 10800000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 1099.0333333333333, "minX": 1.72959264E12, "maxY": 3075.0333333333333, "series": [{"data": [[1.72959381E12, 3043.866666666667], [1.7295927E12, 2925.3], [1.72959441E12, 3010.633333333333], [1.7295933E12, 2980.866666666667], [1.72959372E12, 3007.133333333333], [1.72959423E12, 2998.633333333333], [1.72959321E12, 2987.633333333333], [1.72959432E12, 2993.0333333333333], [1.72959303E12, 2921.8333333333335], [1.72959414E12, 2955.8333333333335], [1.72959312E12, 2984.1666666666665], [1.72959363E12, 3014.133333333333], [1.72959405E12, 3031.3], [1.72959294E12, 3007.2], [1.72959354E12, 2998.7], [1.72959285E12, 3034.6666666666665], [1.72959396E12, 3027.4333333333334], [1.72959345E12, 3016.9333333333334], [1.72959276E12, 2965.0], [1.72959327E12, 3011.4333333333334], [1.72959438E12, 3015.3333333333335], [1.72959336E12, 3030.266666666667], [1.72959387E12, 2863.1666666666665], [1.72959429E12, 3025.0333333333333], [1.72959318E12, 2956.6], [1.72959267E12, 2884.6666666666665], [1.72959378E12, 2972.4666666666667], [1.72959309E12, 2988.9666666666667], [1.7295942E12, 3015.133333333333], [1.72959369E12, 2953.0333333333333], [1.729593E12, 2994.233333333333], [1.72959351E12, 2967.866666666667], [1.7295936E12, 3003.2], [1.72959411E12, 2998.266666666667], [1.72959342E12, 3026.4333333333334], [1.72959291E12, 3053.5666666666666], [1.72959402E12, 3020.0], [1.72959333E12, 2990.766666666667], [1.72959444E12, 1738.4], [1.72959393E12, 3023.4], [1.72959282E12, 2966.0666666666666], [1.72959324E12, 2989.266666666667], [1.72959375E12, 3068.0666666666666], [1.72959273E12, 3015.0666666666666], [1.72959384E12, 3061.866666666667], [1.72959435E12, 3029.3333333333335], [1.72959366E12, 3075.0333333333333], [1.72959264E12, 1099.0333333333333], [1.72959315E12, 2835.133333333333], [1.72959426E12, 3020.9666666666667], [1.72959357E12, 3036.6], [1.72959417E12, 3008.2], [1.72959306E12, 2931.9333333333334], [1.72959348E12, 2958.8], [1.72959399E12, 3025.5333333333333], [1.72959297E12, 2952.5], [1.72959408E12, 3028.766666666667], [1.72959279E12, 2937.8], [1.7295939E12, 3006.133333333333], [1.72959288E12, 3061.4], [1.72959339E12, 2975.9666666666667]], "isOverall": false, "label": "HTTP Request-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 30000, "maxX": 1.72959444E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 10800000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 1099.0333333333333, "minX": 1.72959264E12, "maxY": 3075.0333333333333, "series": [{"data": [[1.72959381E12, 3043.866666666667], [1.7295927E12, 2925.3], [1.72959441E12, 3010.633333333333], [1.7295933E12, 2980.866666666667], [1.72959372E12, 3007.133333333333], [1.72959423E12, 2998.633333333333], [1.72959321E12, 2987.633333333333], [1.72959432E12, 2993.0333333333333], [1.72959303E12, 2921.8333333333335], [1.72959414E12, 2955.8333333333335], [1.72959312E12, 2984.1666666666665], [1.72959363E12, 3014.133333333333], [1.72959405E12, 3031.3], [1.72959294E12, 3007.2], [1.72959354E12, 2998.7], [1.72959285E12, 3034.6666666666665], [1.72959396E12, 3027.4333333333334], [1.72959345E12, 3016.9333333333334], [1.72959276E12, 2965.0], [1.72959327E12, 3011.4333333333334], [1.72959438E12, 3015.3333333333335], [1.72959336E12, 3030.266666666667], [1.72959387E12, 2863.1666666666665], [1.72959429E12, 3025.0333333333333], [1.72959318E12, 2956.6], [1.72959267E12, 2884.6666666666665], [1.72959378E12, 2972.4666666666667], [1.72959309E12, 2988.9666666666667], [1.7295942E12, 3015.133333333333], [1.72959369E12, 2953.0333333333333], [1.729593E12, 2994.233333333333], [1.72959351E12, 2967.866666666667], [1.7295936E12, 3003.2], [1.72959411E12, 2998.266666666667], [1.72959342E12, 3026.4333333333334], [1.72959291E12, 3053.5666666666666], [1.72959402E12, 3020.0], [1.72959333E12, 2990.766666666667], [1.72959444E12, 1738.4], [1.72959393E12, 3023.4], [1.72959282E12, 2966.0666666666666], [1.72959324E12, 2989.266666666667], [1.72959375E12, 3068.0666666666666], [1.72959273E12, 3015.0666666666666], [1.72959384E12, 3061.866666666667], [1.72959435E12, 3029.3333333333335], [1.72959366E12, 3075.0333333333333], [1.72959264E12, 1099.0333333333333], [1.72959315E12, 2835.133333333333], [1.72959426E12, 3020.9666666666667], [1.72959357E12, 3036.6], [1.72959417E12, 3008.2], [1.72959306E12, 2931.9333333333334], [1.72959348E12, 2958.8], [1.72959399E12, 3025.5333333333333], [1.72959297E12, 2952.5], [1.72959408E12, 3028.766666666667], [1.72959279E12, 2937.8], [1.7295939E12, 3006.133333333333], [1.72959288E12, 3061.4], [1.72959339E12, 2975.9666666666667]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 30000, "maxX": 1.72959444E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 10800000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

