/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 30.0, "minX": 0.0, "maxY": 1137.0, "series": [{"data": [[0.0, 30.0], [0.1, 96.0], [0.2, 97.0], [0.3, 98.0], [0.4, 98.0], [0.5, 99.0], [0.6, 99.0], [0.7, 99.0], [0.8, 100.0], [0.9, 100.0], [1.0, 100.0], [1.1, 100.0], [1.2, 100.0], [1.3, 101.0], [1.4, 101.0], [1.5, 101.0], [1.6, 101.0], [1.7, 101.0], [1.8, 101.0], [1.9, 101.0], [2.0, 101.0], [2.1, 102.0], [2.2, 102.0], [2.3, 102.0], [2.4, 102.0], [2.5, 102.0], [2.6, 102.0], [2.7, 102.0], [2.8, 102.0], [2.9, 102.0], [3.0, 102.0], [3.1, 102.0], [3.2, 103.0], [3.3, 103.0], [3.4, 103.0], [3.5, 103.0], [3.6, 103.0], [3.7, 103.0], [3.8, 103.0], [3.9, 103.0], [4.0, 103.0], [4.1, 103.0], [4.2, 103.0], [4.3, 103.0], [4.4, 103.0], [4.5, 103.0], [4.6, 104.0], [4.7, 104.0], [4.8, 104.0], [4.9, 104.0], [5.0, 104.0], [5.1, 104.0], [5.2, 104.0], [5.3, 104.0], [5.4, 104.0], [5.5, 104.0], [5.6, 104.0], [5.7, 104.0], [5.8, 104.0], [5.9, 104.0], [6.0, 104.0], [6.1, 104.0], [6.2, 104.0], [6.3, 105.0], [6.4, 105.0], [6.5, 105.0], [6.6, 105.0], [6.7, 105.0], [6.8, 105.0], [6.9, 105.0], [7.0, 105.0], [7.1, 105.0], [7.2, 105.0], [7.3, 105.0], [7.4, 105.0], [7.5, 105.0], [7.6, 105.0], [7.7, 105.0], [7.8, 105.0], [7.9, 105.0], [8.0, 105.0], [8.1, 105.0], [8.2, 105.0], [8.3, 106.0], [8.4, 106.0], [8.5, 106.0], [8.6, 106.0], [8.7, 106.0], [8.8, 106.0], [8.9, 106.0], [9.0, 106.0], [9.1, 106.0], [9.2, 106.0], [9.3, 106.0], [9.4, 106.0], [9.5, 106.0], [9.6, 106.0], [9.7, 106.0], [9.8, 106.0], [9.9, 106.0], [10.0, 106.0], [10.1, 106.0], [10.2, 106.0], [10.3, 106.0], [10.4, 106.0], [10.5, 107.0], [10.6, 107.0], [10.7, 107.0], [10.8, 107.0], [10.9, 107.0], [11.0, 107.0], [11.1, 107.0], [11.2, 107.0], [11.3, 107.0], [11.4, 107.0], [11.5, 107.0], [11.6, 107.0], [11.7, 107.0], [11.8, 107.0], [11.9, 107.0], [12.0, 107.0], [12.1, 107.0], [12.2, 107.0], [12.3, 107.0], [12.4, 107.0], [12.5, 107.0], [12.6, 107.0], [12.7, 107.0], [12.8, 107.0], [12.9, 107.0], [13.0, 108.0], [13.1, 108.0], [13.2, 108.0], [13.3, 108.0], [13.4, 108.0], [13.5, 108.0], [13.6, 108.0], [13.7, 108.0], [13.8, 108.0], [13.9, 108.0], [14.0, 108.0], [14.1, 108.0], [14.2, 108.0], [14.3, 108.0], [14.4, 108.0], [14.5, 108.0], [14.6, 108.0], [14.7, 108.0], [14.8, 108.0], [14.9, 108.0], [15.0, 108.0], [15.1, 108.0], [15.2, 108.0], [15.3, 108.0], [15.4, 108.0], [15.5, 109.0], [15.6, 109.0], [15.7, 109.0], [15.8, 109.0], [15.9, 109.0], [16.0, 109.0], [16.1, 109.0], [16.2, 109.0], [16.3, 109.0], [16.4, 109.0], [16.5, 109.0], [16.6, 109.0], [16.7, 109.0], [16.8, 109.0], [16.9, 109.0], [17.0, 109.0], [17.1, 109.0], [17.2, 109.0], [17.3, 109.0], [17.4, 109.0], [17.5, 109.0], [17.6, 109.0], [17.7, 109.0], [17.8, 109.0], [17.9, 109.0], [18.0, 109.0], [18.1, 110.0], [18.2, 110.0], [18.3, 110.0], [18.4, 110.0], [18.5, 110.0], [18.6, 110.0], [18.7, 110.0], [18.8, 110.0], [18.9, 110.0], [19.0, 110.0], [19.1, 110.0], [19.2, 110.0], [19.3, 110.0], [19.4, 110.0], [19.5, 110.0], [19.6, 110.0], [19.7, 110.0], [19.8, 110.0], [19.9, 110.0], [20.0, 110.0], [20.1, 110.0], [20.2, 110.0], [20.3, 110.0], [20.4, 110.0], [20.5, 110.0], [20.6, 110.0], [20.7, 111.0], [20.8, 111.0], [20.9, 111.0], [21.0, 111.0], [21.1, 111.0], [21.2, 111.0], [21.3, 111.0], [21.4, 111.0], [21.5, 111.0], [21.6, 111.0], [21.7, 111.0], [21.8, 111.0], [21.9, 111.0], [22.0, 111.0], [22.1, 111.0], [22.2, 111.0], [22.3, 111.0], [22.4, 111.0], [22.5, 111.0], [22.6, 111.0], [22.7, 111.0], [22.8, 111.0], [22.9, 111.0], [23.0, 111.0], [23.1, 111.0], [23.2, 112.0], [23.3, 112.0], [23.4, 112.0], [23.5, 112.0], [23.6, 112.0], [23.7, 112.0], [23.8, 112.0], [23.9, 112.0], [24.0, 112.0], [24.1, 112.0], [24.2, 112.0], [24.3, 112.0], [24.4, 112.0], [24.5, 112.0], [24.6, 112.0], [24.7, 112.0], [24.8, 112.0], [24.9, 112.0], [25.0, 112.0], [25.1, 112.0], [25.2, 112.0], [25.3, 112.0], [25.4, 112.0], [25.5, 112.0], [25.6, 113.0], [25.7, 113.0], [25.8, 113.0], [25.9, 113.0], [26.0, 113.0], [26.1, 113.0], [26.2, 113.0], [26.3, 113.0], [26.4, 113.0], [26.5, 113.0], [26.6, 113.0], [26.7, 113.0], [26.8, 113.0], [26.9, 113.0], [27.0, 113.0], [27.1, 113.0], [27.2, 113.0], [27.3, 113.0], [27.4, 113.0], [27.5, 113.0], [27.6, 113.0], [27.7, 113.0], [27.8, 114.0], [27.9, 114.0], [28.0, 114.0], [28.1, 114.0], [28.2, 114.0], [28.3, 114.0], [28.4, 114.0], [28.5, 114.0], [28.6, 114.0], [28.7, 114.0], [28.8, 114.0], [28.9, 114.0], [29.0, 114.0], [29.1, 114.0], [29.2, 114.0], [29.3, 114.0], [29.4, 114.0], [29.5, 114.0], [29.6, 114.0], [29.7, 114.0], [29.8, 115.0], [29.9, 115.0], [30.0, 115.0], [30.1, 115.0], [30.2, 115.0], [30.3, 115.0], [30.4, 115.0], [30.5, 115.0], [30.6, 115.0], [30.7, 115.0], [30.8, 115.0], [30.9, 115.0], [31.0, 115.0], [31.1, 115.0], [31.2, 115.0], [31.3, 115.0], [31.4, 115.0], [31.5, 115.0], [31.6, 116.0], [31.7, 116.0], [31.8, 116.0], [31.9, 116.0], [32.0, 116.0], [32.1, 116.0], [32.2, 116.0], [32.3, 116.0], [32.4, 116.0], [32.5, 116.0], [32.6, 116.0], [32.7, 116.0], [32.8, 116.0], [32.9, 116.0], [33.0, 116.0], [33.1, 116.0], [33.2, 116.0], [33.3, 117.0], [33.4, 117.0], [33.5, 117.0], [33.6, 117.0], [33.7, 117.0], [33.8, 117.0], [33.9, 117.0], [34.0, 117.0], [34.1, 117.0], [34.2, 117.0], [34.3, 117.0], [34.4, 117.0], [34.5, 117.0], [34.6, 117.0], [34.7, 118.0], [34.8, 118.0], [34.9, 118.0], [35.0, 118.0], [35.1, 118.0], [35.2, 118.0], [35.3, 118.0], [35.4, 118.0], [35.5, 118.0], [35.6, 118.0], [35.7, 118.0], [35.8, 118.0], [35.9, 118.0], [36.0, 118.0], [36.1, 119.0], [36.2, 119.0], [36.3, 119.0], [36.4, 119.0], [36.5, 119.0], [36.6, 119.0], [36.7, 119.0], [36.8, 119.0], [36.9, 119.0], [37.0, 119.0], [37.1, 119.0], [37.2, 119.0], [37.3, 120.0], [37.4, 120.0], [37.5, 120.0], [37.6, 120.0], [37.7, 120.0], [37.8, 120.0], [37.9, 120.0], [38.0, 120.0], [38.1, 120.0], [38.2, 120.0], [38.3, 120.0], [38.4, 121.0], [38.5, 121.0], [38.6, 121.0], [38.7, 121.0], [38.8, 121.0], [38.9, 121.0], [39.0, 121.0], [39.1, 121.0], [39.2, 121.0], [39.3, 122.0], [39.4, 122.0], [39.5, 122.0], [39.6, 122.0], [39.7, 122.0], [39.8, 122.0], [39.9, 122.0], [40.0, 122.0], [40.1, 122.0], [40.2, 122.0], [40.3, 123.0], [40.4, 123.0], [40.5, 123.0], [40.6, 123.0], [40.7, 123.0], [40.8, 123.0], [40.9, 123.0], [41.0, 124.0], [41.1, 124.0], [41.2, 124.0], [41.3, 124.0], [41.4, 124.0], [41.5, 124.0], [41.6, 124.0], [41.7, 124.0], [41.8, 125.0], [41.9, 125.0], [42.0, 125.0], [42.1, 125.0], [42.2, 125.0], [42.3, 125.0], [42.4, 126.0], [42.5, 126.0], [42.6, 126.0], [42.7, 126.0], [42.8, 126.0], [42.9, 126.0], [43.0, 127.0], [43.1, 127.0], [43.2, 127.0], [43.3, 127.0], [43.4, 127.0], [43.5, 127.0], [43.6, 128.0], [43.7, 128.0], [43.8, 128.0], [43.9, 128.0], [44.0, 128.0], [44.1, 128.0], [44.2, 129.0], [44.3, 129.0], [44.4, 129.0], [44.5, 129.0], [44.6, 129.0], [44.7, 129.0], [44.8, 130.0], [44.9, 130.0], [45.0, 130.0], [45.1, 130.0], [45.2, 130.0], [45.3, 131.0], [45.4, 131.0], [45.5, 131.0], [45.6, 131.0], [45.7, 131.0], [45.8, 132.0], [45.9, 132.0], [46.0, 132.0], [46.1, 132.0], [46.2, 132.0], [46.3, 132.0], [46.4, 133.0], [46.5, 133.0], [46.6, 133.0], [46.7, 133.0], [46.8, 134.0], [46.9, 134.0], [47.0, 134.0], [47.1, 134.0], [47.2, 134.0], [47.3, 135.0], [47.4, 135.0], [47.5, 135.0], [47.6, 135.0], [47.7, 135.0], [47.8, 136.0], [47.9, 136.0], [48.0, 136.0], [48.1, 136.0], [48.2, 137.0], [48.3, 137.0], [48.4, 137.0], [48.5, 137.0], [48.6, 138.0], [48.7, 138.0], [48.8, 138.0], [48.9, 139.0], [49.0, 139.0], [49.1, 139.0], [49.2, 140.0], [49.3, 140.0], [49.4, 141.0], [49.5, 141.0], [49.6, 142.0], [49.7, 142.0], [49.8, 143.0], [49.9, 144.0], [50.0, 144.0], [50.1, 145.0], [50.2, 146.0], [50.3, 147.0], [50.4, 149.0], [50.5, 151.0], [50.6, 153.0], [50.7, 158.0], [50.8, 166.0], [50.9, 181.0], [51.0, 184.0], [51.1, 185.0], [51.2, 186.0], [51.3, 187.0], [51.4, 188.0], [51.5, 188.0], [51.6, 189.0], [51.7, 189.0], [51.8, 189.0], [51.9, 190.0], [52.0, 190.0], [52.1, 190.0], [52.2, 191.0], [52.3, 191.0], [52.4, 191.0], [52.5, 192.0], [52.6, 192.0], [52.7, 192.0], [52.8, 192.0], [52.9, 192.0], [53.0, 193.0], [53.1, 193.0], [53.2, 193.0], [53.3, 193.0], [53.4, 193.0], [53.5, 194.0], [53.6, 194.0], [53.7, 194.0], [53.8, 194.0], [53.9, 194.0], [54.0, 194.0], [54.1, 195.0], [54.2, 195.0], [54.3, 195.0], [54.4, 195.0], [54.5, 195.0], [54.6, 195.0], [54.7, 195.0], [54.8, 196.0], [54.9, 196.0], [55.0, 196.0], [55.1, 196.0], [55.2, 196.0], [55.3, 196.0], [55.4, 196.0], [55.5, 197.0], [55.6, 197.0], [55.7, 197.0], [55.8, 197.0], [55.9, 197.0], [56.0, 197.0], [56.1, 197.0], [56.2, 197.0], [56.3, 198.0], [56.4, 198.0], [56.5, 198.0], [56.6, 198.0], [56.7, 198.0], [56.8, 198.0], [56.9, 198.0], [57.0, 198.0], [57.1, 198.0], [57.2, 199.0], [57.3, 199.0], [57.4, 199.0], [57.5, 199.0], [57.6, 199.0], [57.7, 199.0], [57.8, 199.0], [57.9, 199.0], [58.0, 199.0], [58.1, 200.0], [58.2, 200.0], [58.3, 200.0], [58.4, 200.0], [58.5, 200.0], [58.6, 200.0], [58.7, 200.0], [58.8, 200.0], [58.9, 200.0], [59.0, 200.0], [59.1, 201.0], [59.2, 201.0], [59.3, 201.0], [59.4, 201.0], [59.5, 201.0], [59.6, 201.0], [59.7, 201.0], [59.8, 201.0], [59.9, 201.0], [60.0, 201.0], [60.1, 202.0], [60.2, 202.0], [60.3, 202.0], [60.4, 202.0], [60.5, 202.0], [60.6, 202.0], [60.7, 202.0], [60.8, 202.0], [60.9, 202.0], [61.0, 202.0], [61.1, 203.0], [61.2, 203.0], [61.3, 203.0], [61.4, 203.0], [61.5, 203.0], [61.6, 203.0], [61.7, 203.0], [61.8, 203.0], [61.9, 203.0], [62.0, 203.0], [62.1, 204.0], [62.2, 204.0], [62.3, 204.0], [62.4, 204.0], [62.5, 204.0], [62.6, 204.0], [62.7, 204.0], [62.8, 204.0], [62.9, 204.0], [63.0, 204.0], [63.1, 205.0], [63.2, 205.0], [63.3, 205.0], [63.4, 205.0], [63.5, 205.0], [63.6, 205.0], [63.7, 205.0], [63.8, 205.0], [63.9, 205.0], [64.0, 205.0], [64.1, 206.0], [64.2, 206.0], [64.3, 206.0], [64.4, 206.0], [64.5, 206.0], [64.6, 206.0], [64.7, 206.0], [64.8, 206.0], [64.9, 206.0], [65.0, 206.0], [65.1, 207.0], [65.2, 207.0], [65.3, 207.0], [65.4, 207.0], [65.5, 207.0], [65.6, 207.0], [65.7, 207.0], [65.8, 207.0], [65.9, 207.0], [66.0, 207.0], [66.1, 208.0], [66.2, 208.0], [66.3, 208.0], [66.4, 208.0], [66.5, 208.0], [66.6, 208.0], [66.7, 208.0], [66.8, 208.0], [66.9, 208.0], [67.0, 208.0], [67.1, 209.0], [67.2, 209.0], [67.3, 209.0], [67.4, 209.0], [67.5, 209.0], [67.6, 209.0], [67.7, 209.0], [67.8, 209.0], [67.9, 209.0], [68.0, 210.0], [68.1, 210.0], [68.2, 210.0], [68.3, 210.0], [68.4, 210.0], [68.5, 210.0], [68.6, 210.0], [68.7, 210.0], [68.8, 210.0], [68.9, 211.0], [69.0, 211.0], [69.1, 211.0], [69.2, 211.0], [69.3, 211.0], [69.4, 211.0], [69.5, 211.0], [69.6, 211.0], [69.7, 211.0], [69.8, 212.0], [69.9, 212.0], [70.0, 212.0], [70.1, 212.0], [70.2, 212.0], [70.3, 212.0], [70.4, 212.0], [70.5, 212.0], [70.6, 212.0], [70.7, 213.0], [70.8, 213.0], [70.9, 213.0], [71.0, 213.0], [71.1, 213.0], [71.2, 213.0], [71.3, 213.0], [71.4, 213.0], [71.5, 214.0], [71.6, 214.0], [71.7, 214.0], [71.8, 214.0], [71.9, 214.0], [72.0, 214.0], [72.1, 214.0], [72.2, 214.0], [72.3, 215.0], [72.4, 215.0], [72.5, 215.0], [72.6, 215.0], [72.7, 215.0], [72.8, 215.0], [72.9, 215.0], [73.0, 215.0], [73.1, 216.0], [73.2, 216.0], [73.3, 216.0], [73.4, 216.0], [73.5, 216.0], [73.6, 216.0], [73.7, 216.0], [73.8, 216.0], [73.9, 217.0], [74.0, 217.0], [74.1, 217.0], [74.2, 217.0], [74.3, 217.0], [74.4, 217.0], [74.5, 217.0], [74.6, 218.0], [74.7, 218.0], [74.8, 218.0], [74.9, 218.0], [75.0, 218.0], [75.1, 218.0], [75.2, 218.0], [75.3, 219.0], [75.4, 219.0], [75.5, 219.0], [75.6, 219.0], [75.7, 219.0], [75.8, 219.0], [75.9, 219.0], [76.0, 220.0], [76.1, 220.0], [76.2, 220.0], [76.3, 220.0], [76.4, 220.0], [76.5, 220.0], [76.6, 220.0], [76.7, 221.0], [76.8, 221.0], [76.9, 221.0], [77.0, 221.0], [77.1, 221.0], [77.2, 221.0], [77.3, 221.0], [77.4, 222.0], [77.5, 222.0], [77.6, 222.0], [77.7, 222.0], [77.8, 222.0], [77.9, 222.0], [78.0, 223.0], [78.1, 223.0], [78.2, 223.0], [78.3, 223.0], [78.4, 223.0], [78.5, 223.0], [78.6, 224.0], [78.7, 224.0], [78.8, 224.0], [78.9, 224.0], [79.0, 224.0], [79.1, 224.0], [79.2, 225.0], [79.3, 225.0], [79.4, 225.0], [79.5, 225.0], [79.6, 225.0], [79.7, 225.0], [79.8, 226.0], [79.9, 226.0], [80.0, 226.0], [80.1, 226.0], [80.2, 226.0], [80.3, 226.0], [80.4, 227.0], [80.5, 227.0], [80.6, 227.0], [80.7, 227.0], [80.8, 227.0], [80.9, 228.0], [81.0, 228.0], [81.1, 228.0], [81.2, 228.0], [81.3, 228.0], [81.4, 229.0], [81.5, 229.0], [81.6, 229.0], [81.7, 229.0], [81.8, 229.0], [81.9, 230.0], [82.0, 230.0], [82.1, 230.0], [82.2, 230.0], [82.3, 231.0], [82.4, 231.0], [82.5, 231.0], [82.6, 231.0], [82.7, 231.0], [82.8, 232.0], [82.9, 232.0], [83.0, 232.0], [83.1, 232.0], [83.2, 233.0], [83.3, 233.0], [83.4, 233.0], [83.5, 234.0], [83.6, 234.0], [83.7, 234.0], [83.8, 234.0], [83.9, 235.0], [84.0, 235.0], [84.1, 235.0], [84.2, 236.0], [84.3, 236.0], [84.4, 236.0], [84.5, 237.0], [84.6, 237.0], [84.7, 238.0], [84.8, 238.0], [84.9, 238.0], [85.0, 239.0], [85.1, 239.0], [85.2, 240.0], [85.3, 240.0], [85.4, 241.0], [85.5, 241.0], [85.6, 242.0], [85.7, 243.0], [85.8, 244.0], [85.9, 244.0], [86.0, 245.0], [86.1, 246.0], [86.2, 247.0], [86.3, 248.0], [86.4, 249.0], [86.5, 251.0], [86.6, 252.0], [86.7, 254.0], [86.8, 256.0], [86.9, 258.0], [87.0, 261.0], [87.1, 265.0], [87.2, 270.0], [87.3, 275.0], [87.4, 279.0], [87.5, 281.0], [87.6, 283.0], [87.7, 284.0], [87.8, 286.0], [87.9, 287.0], [88.0, 288.0], [88.1, 288.0], [88.2, 289.0], [88.3, 290.0], [88.4, 291.0], [88.5, 292.0], [88.6, 292.0], [88.7, 293.0], [88.8, 294.0], [88.9, 294.0], [89.0, 295.0], [89.1, 295.0], [89.2, 296.0], [89.3, 297.0], [89.4, 297.0], [89.5, 298.0], [89.6, 298.0], [89.7, 299.0], [89.8, 299.0], [89.9, 300.0], [90.0, 300.0], [90.1, 301.0], [90.2, 301.0], [90.3, 302.0], [90.4, 302.0], [90.5, 303.0], [90.6, 303.0], [90.7, 304.0], [90.8, 304.0], [90.9, 304.0], [91.0, 305.0], [91.1, 305.0], [91.2, 306.0], [91.3, 306.0], [91.4, 307.0], [91.5, 307.0], [91.6, 308.0], [91.7, 308.0], [91.8, 308.0], [91.9, 309.0], [92.0, 309.0], [92.1, 310.0], [92.2, 310.0], [92.3, 311.0], [92.4, 311.0], [92.5, 312.0], [92.6, 312.0], [92.7, 312.0], [92.8, 313.0], [92.9, 313.0], [93.0, 314.0], [93.1, 314.0], [93.2, 315.0], [93.3, 315.0], [93.4, 316.0], [93.5, 316.0], [93.6, 317.0], [93.7, 317.0], [93.8, 318.0], [93.9, 318.0], [94.0, 319.0], [94.1, 319.0], [94.2, 320.0], [94.3, 320.0], [94.4, 321.0], [94.5, 321.0], [94.6, 322.0], [94.7, 323.0], [94.8, 323.0], [94.9, 324.0], [95.0, 325.0], [95.1, 325.0], [95.2, 326.0], [95.3, 327.0], [95.4, 327.0], [95.5, 328.0], [95.6, 329.0], [95.7, 330.0], [95.8, 331.0], [95.9, 332.0], [96.0, 333.0], [96.1, 334.0], [96.2, 335.0], [96.3, 336.0], [96.4, 338.0], [96.5, 339.0], [96.6, 341.0], [96.7, 343.0], [96.8, 346.0], [96.9, 349.0], [97.0, 352.0], [97.1, 356.0], [97.2, 360.0], [97.3, 364.0], [97.4, 370.0], [97.5, 377.0], [97.6, 383.0], [97.7, 388.0], [97.8, 391.0], [97.9, 394.0], [98.0, 397.0], [98.1, 400.0], [98.2, 402.0], [98.3, 404.0], [98.4, 407.0], [98.5, 409.0], [98.6, 412.0], [98.7, 414.0], [98.8, 417.0], [98.9, 420.0], [99.0, 424.0], [99.1, 428.0], [99.2, 434.0], [99.3, 444.0], [99.4, 459.0], [99.5, 477.0], [99.6, 494.0], [99.7, 507.0], [99.8, 524.0], [99.9, 579.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 2.0, "minX": 0.0, "maxY": 834432.0, "series": [{"data": [[0.0, 834432.0], [500.0, 2985.0], [1000.0, 2.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 500, "maxX": 1000.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 2923.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 834496.0, "series": [{"data": [[0.0, 834496.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 2923.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 1.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 494.6566267608609, "minX": 1.73253818E12, "maxY": 500.0, "series": [{"data": [[1.73253836E12, 500.0], [1.73253823E12, 500.0], [1.73253832E12, 500.0], [1.73253819E12, 500.0], [1.73253828E12, 500.0], [1.73253845E12, 500.0], [1.73253824E12, 500.0], [1.73253841E12, 500.0], [1.73253822E12, 500.0], [1.73253839E12, 500.0], [1.73253848E12, 494.6566267608609], [1.73253818E12, 500.0], [1.73253835E12, 500.0], [1.73253844E12, 500.0], [1.73253831E12, 500.0], [1.7325384E12, 500.0], [1.73253827E12, 500.0], [1.73253821E12, 500.0], [1.73253838E12, 500.0], [1.73253834E12, 500.0], [1.7325383E12, 500.0], [1.73253847E12, 500.0], [1.73253826E12, 500.0], [1.73253843E12, 500.0], [1.7325382E12, 500.0], [1.73253837E12, 500.0], [1.73253833E12, 500.0], [1.73253829E12, 500.0], [1.73253846E12, 500.0], [1.73253825E12, 500.0], [1.73253842E12, 500.0]], "isOverall": false, "label": "Thread Group", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 10000, "maxX": 1.73253848E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 10800000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 112.0, "minX": 1.0, "maxY": 522.0, "series": [{"data": [[2.0, 203.0], [3.0, 203.0], [4.0, 205.0], [6.0, 197.0], [7.0, 198.0], [8.0, 346.0], [9.0, 199.0], [10.0, 204.0], [11.0, 218.0], [12.0, 202.0], [13.0, 340.0], [14.0, 342.0], [15.0, 341.0], [16.0, 212.0], [17.0, 342.0], [18.0, 343.0], [19.0, 206.0], [20.0, 342.0], [21.0, 208.0], [22.0, 218.0], [23.0, 210.0], [24.0, 340.0], [26.0, 280.5], [28.0, 217.5], [29.0, 217.0], [30.0, 215.0], [31.0, 223.0], [33.0, 340.0], [34.0, 222.0], [37.0, 339.0], [36.0, 281.5], [39.0, 220.0], [38.0, 224.0], [41.0, 221.0], [40.0, 219.0], [43.0, 218.0], [42.0, 222.0], [45.0, 224.0], [44.0, 219.0], [47.0, 219.0], [46.0, 228.0], [49.0, 219.0], [48.0, 223.0], [50.0, 339.0], [53.0, 219.0], [52.0, 279.5], [55.0, 226.0], [54.0, 339.0], [57.0, 336.0], [56.0, 225.0], [59.0, 221.0], [58.0, 343.0], [62.0, 263.0], [67.0, 225.0], [66.0, 224.0], [65.0, 290.3333333333333], [71.0, 220.0], [70.0, 222.0], [69.0, 343.0], [68.0, 225.0], [75.0, 342.0], [74.0, 260.0], [79.0, 219.0], [78.0, 221.0], [77.0, 223.0], [76.0, 339.0], [83.0, 423.0], [82.0, 522.0], [81.0, 220.0], [80.0, 221.0], [87.0, 220.0], [86.0, 335.0], [85.0, 216.0], [84.0, 338.0], [91.0, 339.0], [90.0, 334.0], [89.0, 220.0], [95.0, 216.0], [94.0, 220.0], [93.0, 216.0], [92.0, 221.0], [99.0, 235.0], [97.0, 218.0], [96.0, 337.0], [103.0, 335.0], [102.0, 248.0], [101.0, 292.5], [106.0, 252.0], [105.0, 254.0], [104.0, 246.0], [111.0, 247.0], [110.0, 246.0], [109.0, 246.0], [108.0, 247.5], [115.0, 247.0], [114.0, 250.0], [113.0, 250.0], [112.0, 247.0], [119.0, 343.0], [118.0, 245.0], [117.0, 251.0], [116.0, 339.0], [122.0, 246.0], [121.0, 294.5], [127.0, 424.0], [125.0, 341.0], [124.0, 255.0], [135.0, 253.0], [134.0, 252.0], [132.0, 254.0], [131.0, 294.0], [129.0, 340.0], [128.0, 250.0], [143.0, 254.0], [142.0, 248.0], [141.0, 251.0], [140.0, 336.0], [139.0, 248.0], [138.0, 251.0], [137.0, 254.0], [136.0, 252.0], [151.0, 254.0], [150.0, 254.0], [149.0, 250.0], [148.0, 251.0], [147.0, 251.5], [145.0, 247.0], [144.0, 251.0], [159.0, 347.0], [158.0, 253.0], [157.0, 254.0], [156.0, 429.0], [155.0, 254.0], [154.0, 339.0], [153.0, 248.0], [152.0, 344.0], [167.0, 251.0], [166.0, 249.0], [165.0, 248.0], [164.0, 251.0], [163.0, 339.0], [162.0, 336.0], [161.0, 335.0], [160.0, 253.0], [175.0, 253.0], [174.0, 254.0], [173.0, 112.0], [172.0, 260.0], [171.0, 251.0], [170.0, 252.0], [169.0, 251.0], [168.0, 261.0], [183.0, 115.0], [182.0, 338.0], [180.0, 253.0], [179.0, 341.0], [178.0, 255.0], [177.0, 112.0], [191.0, 185.5], [189.0, 252.0], [188.0, 177.0], [186.0, 118.0], [185.0, 115.0], [184.0, 341.0], [198.0, 122.0], [197.0, 249.0], [196.0, 120.0], [195.0, 182.0], [194.0, 428.0], [193.0, 117.0], [207.0, 117.0], [206.0, 129.5], [205.0, 229.0], [202.0, 112.0], [201.0, 184.5], [200.0, 252.0], [214.0, 123.0], [213.0, 122.0], [212.0, 250.0], [211.0, 121.0], [210.0, 115.0], [209.0, 121.5], [222.0, 135.0], [221.0, 150.25], [217.0, 160.66666666666666], [231.0, 382.5], [229.0, 118.0], [228.0, 182.0], [226.0, 124.0], [225.0, 127.0], [224.0, 185.0], [237.0, 121.0], [236.0, 124.0], [234.0, 180.0], [232.0, 128.0], [247.0, 121.0], [246.0, 232.5], [242.0, 243.0], [241.0, 125.0], [240.0, 194.0], [255.0, 120.0], [254.0, 125.0], [253.0, 132.0], [252.0, 245.0], [251.0, 118.0], [249.0, 178.5], [269.0, 129.0], [271.0, 185.0], [268.0, 128.0], [258.0, 182.5], [257.0, 127.0], [256.0, 240.0], [267.0, 241.0], [266.0, 245.0], [265.0, 130.0], [263.0, 135.0], [262.0, 202.33333333333334], [261.0, 128.0], [275.0, 326.0], [286.0, 237.0], [287.0, 184.5], [284.0, 122.0], [283.0, 329.0], [282.0, 160.33333333333334], [279.0, 242.5], [278.0, 249.0], [276.0, 238.0], [274.0, 127.5], [272.0, 131.0], [302.0, 182.0], [300.0, 245.0], [299.0, 334.0], [298.0, 129.0], [297.0, 241.0], [295.0, 152.25], [292.0, 121.0], [290.0, 207.33333333333334], [318.0, 239.0], [319.0, 123.0], [317.0, 238.0], [316.0, 128.0], [315.0, 124.0], [314.0, 183.5], [312.0, 123.0], [311.0, 227.5], [306.0, 222.0], [304.0, 236.0], [309.0, 334.0], [308.0, 124.0], [323.0, 117.0], [334.0, 114.0], [335.0, 120.0], [333.0, 137.5], [331.0, 188.66666666666666], [328.0, 239.0], [327.0, 329.0], [326.0, 121.0], [325.0, 194.5], [322.0, 240.0], [321.0, 224.5], [350.0, 133.0], [351.0, 113.0], [348.0, 235.0], [339.0, 168.66666666666666], [336.0, 235.0], [347.0, 189.5], [345.0, 146.0], [344.0, 117.0], [343.0, 177.5], [342.0, 151.0], [341.0, 150.0], [366.0, 146.5], [367.0, 147.0], [364.0, 139.0], [355.0, 149.0], [354.0, 232.0], [353.0, 281.5], [363.0, 230.0], [362.0, 228.0], [361.0, 280.0], [359.0, 235.0], [358.0, 143.0], [357.0, 140.0], [356.0, 321.0], [371.0, 146.0], [383.0, 174.0], [380.0, 144.5], [370.0, 137.0], [369.0, 411.0], [368.0, 150.0], [378.0, 229.0], [377.0, 230.0], [376.0, 146.0], [375.0, 232.0], [374.0, 226.0], [373.0, 231.0], [372.0, 227.0], [387.0, 235.0], [399.0, 370.5], [397.0, 187.0], [386.0, 147.0], [385.0, 191.0], [395.0, 318.0], [394.0, 141.0], [393.0, 189.5], [391.0, 235.0], [390.0, 143.0], [389.0, 140.0], [388.0, 145.0], [414.0, 231.0], [415.0, 142.0], [413.0, 169.33333333333334], [410.0, 188.5], [408.0, 140.0], [406.0, 233.0], [405.0, 229.0], [404.0, 232.75], [400.0, 147.0], [430.0, 142.0], [431.0, 148.0], [428.0, 137.0], [417.0, 310.0], [416.0, 227.0], [427.0, 187.0], [425.0, 230.0], [424.0, 224.0], [423.0, 267.0], [421.0, 228.0], [420.0, 141.0], [446.0, 181.0], [447.0, 222.0], [445.0, 268.0], [444.0, 134.0], [443.0, 184.0], [442.0, 146.0], [441.0, 134.0], [440.0, 228.0], [439.0, 142.0], [435.0, 143.0], [434.0, 147.0], [433.0, 135.0], [432.0, 186.0], [438.0, 257.6666666666667], [462.0, 229.25], [463.0, 222.0], [461.0, 223.0], [460.0, 227.0], [459.0, 226.5], [458.0, 313.0], [457.0, 144.0], [456.0, 173.8], [455.0, 406.0], [448.0, 145.0], [451.0, 183.0], [449.0, 228.5], [454.0, 164.33333333333334], [452.0, 320.0], [478.0, 230.0], [479.0, 224.66666666666669], [477.0, 220.0], [476.0, 179.0], [474.0, 225.0], [473.0, 183.5], [472.0, 178.0], [470.0, 229.0], [467.0, 144.0], [466.0, 229.0], [465.0, 244.6], [464.0, 231.0], [469.0, 224.8], [494.0, 138.5], [495.0, 319.0], [492.0, 217.0], [483.0, 185.0909090909091], [482.0, 229.0], [491.0, 161.0], [490.0, 228.66666666666666], [489.0, 182.25], [488.0, 205.66666666666663], [487.0, 262.3333333333333], [486.0, 133.0], [484.0, 257.0], [500.0, 179.1039104903537], [499.0, 189.41666666666669], [498.0, 244.8], [497.0, 228.5], [496.0, 193.33333333333334], [1.0, 346.0]], "isOverall": false, "label": "HTTP Request", "isController": false}, {"data": [[499.849165113283, 179.1307505561741]], "isOverall": false, "label": "HTTP Request-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 500.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 42265.3, "minX": 1.73253818E12, "maxY": 6649873.9, "series": [{"data": [[1.73253836E12, 6574415.4], [1.73253823E12, 6595244.3], [1.73253832E12, 6361005.6], [1.73253819E12, 5959780.7], [1.73253828E12, 6445388.8], [1.73253845E12, 6573385.9], [1.73253824E12, 6369314.0], [1.73253841E12, 6575341.1], [1.73253822E12, 6579099.6], [1.73253839E12, 6430548.7], [1.73253848E12, 5513230.9], [1.73253818E12, 814651.4], [1.73253835E12, 6421639.7], [1.73253844E12, 6381639.4], [1.73253831E12, 6645718.1], [1.7325384E12, 6602091.8], [1.73253827E12, 6649873.9], [1.73253821E12, 6626117.6], [1.73253838E12, 6589315.2], [1.73253834E12, 6620811.2], [1.7325383E12, 6568347.2], [1.73253847E12, 6523662.6], [1.73253826E12, 6603312.9], [1.73253843E12, 6591848.7], [1.7325382E12, 6391427.5], [1.73253837E12, 6633211.0], [1.73253833E12, 6566208.8], [1.73253829E12, 6404780.4], [1.73253846E12, 6568775.5], [1.73253825E12, 6568292.4], [1.73253842E12, 6545874.5]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.73253836E12, 341086.9], [1.73253823E12, 342188.0], [1.73253832E12, 330027.5], [1.73253819E12, 309227.6], [1.73253828E12, 334407.7], [1.73253845E12, 341074.8], [1.73253824E12, 330487.3], [1.73253841E12, 341147.4], [1.73253822E12, 341365.2], [1.73253839E12, 333645.4], [1.73253848E12, 286031.9], [1.73253818E12, 42265.3], [1.73253835E12, 333161.4], [1.73253844E12, 331116.5], [1.73253831E12, 344813.7], [1.7325384E12, 342538.9], [1.73253827E12, 345031.5], [1.73253821E12, 343761.0], [1.73253838E12, 341885.5], [1.73253834E12, 343531.1], [1.7325383E12, 340784.4], [1.73253847E12, 338497.5], [1.73253826E12, 342611.5], [1.73253843E12, 342018.6], [1.7325382E12, 331612.6], [1.73253837E12, 344160.3], [1.73253833E12, 340699.7], [1.73253829E12, 332326.5], [1.73253846E12, 340832.8], [1.73253825E12, 340784.4], [1.73253842E12, 339647.0]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 10000, "maxX": 1.73253848E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 10800000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 175.29342451341466, "minX": 1.73253818E12, "maxY": 201.6819352991701, "series": [{"data": [[1.73253836E12, 177.51026996346073], [1.73253823E12, 177.13557284299898], [1.73253832E12, 183.45279560036553], [1.73253819E12, 195.3390201909529], [1.73253828E12, 180.4763541628967], [1.73253845E12, 177.2961189158498], [1.73253824E12, 182.80833302822847], [1.73253841E12, 177.20071646449662], [1.73253822E12, 176.75726641145604], [1.73253839E12, 181.6869514760277], [1.73253848E12, 182.7876390710262], [1.73253818E12, 201.6819352991701], [1.73253835E12, 181.35781215950982], [1.73253844E12, 182.62817467567947], [1.73253831E12, 175.61290662174932], [1.7325384E12, 176.43212405948557], [1.73253827E12, 175.29342451341466], [1.73253821E12, 176.01696585709232], [1.73253838E12, 176.69102813661294], [1.73253834E12, 176.07752456764567], [1.7325383E12, 177.31575770487012], [1.73253847E12, 178.44057193923126], [1.73253826E12, 176.67610806992724], [1.73253843E12, 176.9357178235334], [1.7325382E12, 183.11953586805845], [1.73253837E12, 175.67928840136557], [1.73253833E12, 177.6378875590432], [1.73253829E12, 182.28516293464492], [1.73253846E12, 177.5451221243956], [1.73253825E12, 177.51572929981572], [1.73253842E12, 178.39152119700637]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 10000, "maxX": 1.73253848E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 10800000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 175.2921269507272, "minX": 1.73253818E12, "maxY": 201.6699112510738, "series": [{"data": [[1.73253836E12, 177.50881549540625], [1.73253823E12, 177.13412305516198], [1.73253832E12, 183.4515490375797], [1.73253819E12, 195.3369854437311], [1.73253828E12, 180.47526866157827], [1.73253845E12, 177.29487725273069], [1.73253824E12, 182.80708819975942], [1.73253841E12, 177.1987656948284], [1.73253822E12, 176.75556500779837], [1.73253839E12, 181.68539203597422], [1.73253848E12, 182.78598925504383], [1.73253818E12, 201.6699112510738], [1.73253835E12, 181.35643204765003], [1.73253844E12, 182.62689566965102], [1.73253831E12, 175.61136259957274], [1.7325384E12, 176.43039316118586], [1.73253827E12, 175.2921269507272], [1.73253821E12, 176.01534670890445], [1.73253838E12, 176.68947089010783], [1.73253834E12, 176.07586911345177], [1.7325383E12, 177.31447947734725], [1.73253847E12, 178.43946380696983], [1.73253826E12, 176.67437753840744], [1.73253843E12, 176.93458572136177], [1.7325382E12, 183.1180033569299], [1.73253837E12, 175.6780930281626], [1.73253833E12, 177.63682210462858], [1.73253829E12, 182.2839978154005], [1.73253846E12, 177.54380857710936], [1.73253825E12, 177.51438005964982], [1.73253842E12, 178.3902030637683]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 10000, "maxX": 1.73253848E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 10800000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 0.0, "minX": 1.73253818E12, "maxY": 2.714285714285714, "series": [{"data": [[1.73253836E12, 0.002376813650714821], [1.73253823E12, 0.0], [1.73253832E12, 0.0], [1.73253819E12, 0.0], [1.73253828E12, 0.0], [1.73253845E12, 0.0], [1.73253824E12, 0.0025994947460916125], [1.73253841E12, 0.0], [1.73253822E12, 0.0], [1.73253839E12, 0.0], [1.73253848E12, 0.0], [1.73253818E12, 2.714285714285714], [1.73253835E12, 0.0], [1.73253844E12, 0.0], [1.73253831E12, 0.0], [1.7325384E12, 0.0], [1.73253827E12, 0.0], [1.73253821E12, 0.0], [1.73253838E12, 0.0], [1.73253834E12, 0.0], [1.7325383E12, 0.0022013918477488984], [1.73253847E12, 0.0], [1.73253826E12, 0.0], [1.73253843E12, 0.0], [1.7325382E12, 0.0], [1.73253837E12, 0.0], [1.73253833E12, 0.0], [1.73253829E12, 0.0], [1.73253846E12, 0.0], [1.73253825E12, 0.0], [1.73253842E12, 0.001710010687566797]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 10000, "maxX": 1.73253848E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 10800000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 30.0, "minX": 1.73253818E12, "maxY": 1137.0, "series": [{"data": [[1.73253836E12, 702.0], [1.73253823E12, 827.0], [1.73253832E12, 798.0], [1.73253819E12, 1137.0], [1.73253828E12, 733.0], [1.73253845E12, 784.0], [1.73253824E12, 791.0], [1.73253841E12, 722.0], [1.73253822E12, 724.0], [1.73253839E12, 1003.0], [1.73253848E12, 701.0], [1.73253818E12, 819.0], [1.73253835E12, 896.0], [1.73253844E12, 997.0], [1.73253831E12, 738.0], [1.7325384E12, 711.0], [1.73253827E12, 628.0], [1.73253821E12, 800.0], [1.73253838E12, 691.0], [1.73253834E12, 645.0], [1.7325383E12, 796.0], [1.73253847E12, 717.0], [1.73253826E12, 719.0], [1.73253843E12, 713.0], [1.7325382E12, 870.0], [1.73253837E12, 701.0], [1.73253833E12, 869.0], [1.73253829E12, 890.0], [1.73253846E12, 783.0], [1.73253825E12, 723.0], [1.73253842E12, 807.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.73253836E12, 95.0], [1.73253823E12, 92.0], [1.73253832E12, 95.0], [1.73253819E12, 96.0], [1.73253828E12, 95.0], [1.73253845E12, 93.0], [1.73253824E12, 96.0], [1.73253841E12, 90.0], [1.73253822E12, 92.0], [1.73253839E12, 95.0], [1.73253848E12, 96.0], [1.73253818E12, 30.0], [1.73253835E12, 94.0], [1.73253844E12, 94.0], [1.73253831E12, 93.0], [1.7325384E12, 94.0], [1.73253827E12, 92.0], [1.73253821E12, 93.0], [1.73253838E12, 95.0], [1.73253834E12, 94.0], [1.7325383E12, 93.0], [1.73253847E12, 94.0], [1.73253826E12, 93.0], [1.73253843E12, 95.0], [1.7325382E12, 92.0], [1.73253837E12, 91.0], [1.73253833E12, 78.0], [1.73253829E12, 94.0], [1.73253846E12, 94.0], [1.73253825E12, 73.0], [1.73253842E12, 92.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.73253836E12, 298.0], [1.73253823E12, 297.0], [1.73253832E12, 302.0], [1.73253819E12, 340.0], [1.73253828E12, 302.0], [1.73253845E12, 298.0], [1.73253824E12, 315.0], [1.73253841E12, 299.0], [1.73253822E12, 294.0], [1.73253839E12, 304.0], [1.73253848E12, 302.0], [1.73253818E12, 354.5999999999999], [1.73253835E12, 310.90000000000146], [1.73253844E12, 313.0], [1.73253831E12, 291.0], [1.7325384E12, 296.0], [1.73253827E12, 298.0], [1.73253821E12, 297.0], [1.73253838E12, 296.0], [1.73253834E12, 295.0], [1.7325383E12, 301.0], [1.73253847E12, 302.0], [1.73253826E12, 296.0], [1.73253843E12, 296.0], [1.7325382E12, 304.0], [1.73253837E12, 293.0], [1.73253833E12, 295.0], [1.73253829E12, 296.0], [1.73253846E12, 298.0], [1.73253825E12, 298.0], [1.73253842E12, 296.0]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.73253836E12, 415.0], [1.73253823E12, 410.0], [1.73253832E12, 432.0], [1.73253819E12, 504.0], [1.73253828E12, 433.0], [1.73253845E12, 416.0], [1.73253824E12, 454.0], [1.73253841E12, 416.0], [1.73253822E12, 409.0], [1.73253839E12, 428.0], [1.73253848E12, 424.0], [1.73253818E12, 527.06], [1.73253835E12, 455.0], [1.73253844E12, 460.0], [1.73253831E12, 407.0], [1.7325384E12, 415.0], [1.73253827E12, 412.0], [1.73253821E12, 417.0], [1.73253838E12, 411.0], [1.73253834E12, 416.0], [1.7325383E12, 417.9900000000016], [1.73253847E12, 423.0], [1.73253826E12, 415.0], [1.73253843E12, 410.0], [1.7325382E12, 429.0], [1.73253837E12, 406.0], [1.73253833E12, 416.0], [1.73253829E12, 462.0], [1.73253846E12, 415.0], [1.73253825E12, 420.0], [1.73253842E12, 415.9900000000016]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.73253836E12, 185.5], [1.73253823E12, 142.0], [1.73253832E12, 145.0], [1.73253819E12, 145.0], [1.73253828E12, 144.0], [1.73253845E12, 138.0], [1.73253824E12, 143.0], [1.73253841E12, 141.0], [1.73253822E12, 188.0], [1.73253839E12, 145.0], [1.73253848E12, 181.5], [1.73253818E12, 152.0], [1.73253835E12, 142.0], [1.73253844E12, 139.0], [1.73253831E12, 183.0], [1.7325384E12, 142.5], [1.73253827E12, 137.0], [1.73253821E12, 139.0], [1.73253838E12, 166.0], [1.73253834E12, 142.0], [1.7325383E12, 139.0], [1.73253847E12, 142.0], [1.73253826E12, 138.0], [1.73253843E12, 185.0], [1.7325382E12, 135.0], [1.73253837E12, 187.0], [1.73253833E12, 189.0], [1.73253829E12, 184.5], [1.73253846E12, 185.0], [1.73253825E12, 141.0], [1.73253842E12, 157.0]], "isOverall": false, "label": "Median", "isController": false}, {"data": [[1.73253836E12, 318.0], [1.73253823E12, 317.0], [1.73253832E12, 330.0], [1.73253819E12, 378.0], [1.73253828E12, 333.0], [1.73253845E12, 321.0], [1.73253824E12, 346.0], [1.73253841E12, 319.0], [1.73253822E12, 314.0], [1.73253839E12, 327.0], [1.73253848E12, 327.0], [1.73253818E12, 395.2999999999997], [1.73253835E12, 347.0], [1.73253844E12, 350.0], [1.73253831E12, 313.0], [1.7325384E12, 317.0], [1.73253827E12, 316.0], [1.73253821E12, 319.0], [1.73253838E12, 317.0], [1.73253834E12, 317.0], [1.7325383E12, 321.0], [1.73253847E12, 324.0], [1.73253826E12, 319.0], [1.73253843E12, 316.0], [1.7325382E12, 328.0], [1.73253837E12, 314.0], [1.73253833E12, 321.0], [1.73253829E12, 321.0], [1.73253846E12, 320.0], [1.73253825E12, 322.0], [1.73253842E12, 322.0]], "isOverall": false, "label": "95th percentile", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 10000, "maxX": 1.73253848E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 10800000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 125.0, "minX": 982.0, "maxY": 198.0, "series": [{"data": [[982.0, 160.0], [1676.0, 198.0], [2283.0, 155.0], [2402.0, 152.0], [2329.0, 164.0], [2324.0, 179.0], [2511.0, 146.0], [2528.0, 142.0], [2482.0, 142.0], [2471.0, 159.0], [2518.0, 179.5], [2519.0, 153.0], [2679.0, 144.0], [2633.0, 137.0], [2616.0, 140.0], [2614.0, 137.0], [2615.0, 148.0], [2610.0, 134.0], [2608.0, 138.5], [2570.0, 142.0], [2589.0, 139.0], [2582.0, 139.0], [2656.0, 143.0], [2657.0, 161.0], [2659.0, 143.0], [2665.0, 134.0], [2629.0, 147.0], [2625.0, 145.0], [2624.0, 142.5], [2646.0, 130.0], [2653.0, 144.0], [2645.0, 138.0], [2644.0, 138.0], [2684.0, 132.0], [2682.0, 151.5], [2681.0, 140.0], [2603.0, 145.0], [2604.0, 145.0], [2636.0, 143.0], [2640.0, 135.0], [2637.0, 142.0], [2802.0, 191.0], [2815.0, 133.0], [2756.0, 140.0], [2754.0, 191.0], [2763.0, 137.0], [2762.0, 144.0], [2759.0, 181.0], [2813.0, 136.0], [2808.0, 189.0], [2778.0, 138.0], [2780.0, 189.0], [2779.0, 193.0], [2781.0, 187.0], [2782.0, 194.0], [2772.0, 190.0], [2771.0, 191.0], [2769.0, 141.0], [2768.0, 195.0], [2766.0, 153.0], [2767.0, 141.0], [2798.0, 133.0], [2795.0, 185.0], [2794.0, 136.0], [2700.0, 137.0], [2695.0, 139.0], [2698.0, 133.0], [2711.0, 141.0], [2705.0, 135.0], [2708.0, 141.0], [2786.0, 192.0], [2719.0, 134.0], [2713.0, 139.0], [2712.0, 142.0], [2787.0, 192.0], [2789.0, 186.0], [2790.0, 140.0], [2791.0, 144.0], [2793.0, 138.0], [2792.0, 142.5], [2703.0, 141.0], [2750.0, 139.0], [2749.0, 148.0], [2744.0, 142.0], [2746.0, 131.0], [2735.0, 143.0], [2741.0, 144.0], [2743.0, 140.0], [2747.0, 141.0], [2751.0, 143.0], [2804.0, 191.0], [2807.0, 148.0], [2803.0, 139.0], [2800.0, 139.0], [2801.0, 190.0], [2799.0, 153.0], [2814.0, 141.0], [2765.0, 183.0], [2810.0, 183.0], [2809.0, 144.0], [2812.0, 190.0], [2820.0, 142.0], [2821.0, 186.0], [2824.0, 194.0], [2823.0, 142.0], [2825.0, 136.0], [2827.0, 139.0], [2828.0, 189.0], [2826.0, 188.0], [2865.0, 137.0], [2869.0, 184.0], [2868.0, 184.0], [2866.0, 188.0], [2867.0, 185.0], [2819.0, 139.0], [2818.0, 187.0], [2817.0, 133.0], [2871.0, 139.0], [2870.0, 139.0], [2872.0, 186.0], [2879.0, 145.0], [2816.0, 188.0], [2875.0, 180.0], [2874.0, 134.0], [2873.0, 139.0], [2857.0, 187.0], [2858.0, 142.0], [2856.0, 190.0], [2852.0, 142.0], [2860.0, 184.5], [2861.0, 143.0], [2864.0, 135.0], [2863.0, 184.0], [2859.0, 187.0], [2848.0, 182.0], [2849.0, 182.0], [2850.0, 183.0], [2882.0, 130.0], [2829.0, 140.0], [2883.0, 130.0], [2884.0, 135.0], [2885.0, 194.0], [2886.0, 138.0], [2887.0, 188.0], [2889.0, 139.0], [2888.0, 191.0], [2890.0, 138.0], [2898.0, 139.0], [2896.0, 188.0], [2897.0, 189.0], [2895.0, 136.0], [2906.0, 129.0], [2903.0, 133.0], [2901.0, 181.0], [2905.0, 186.0], [2836.0, 139.0], [2835.0, 142.0], [2834.0, 147.0], [2833.0, 137.0], [2832.0, 184.0], [2831.0, 188.0], [2880.0, 189.0], [2916.0, 188.0], [2920.0, 188.0], [2912.0, 133.0], [2935.0, 125.0], [2926.0, 185.0], [2942.0, 190.0], [2843.0, 143.0], [2844.0, 186.0], [2845.0, 185.5], [2842.0, 188.0], [2841.0, 187.0], [2837.0, 188.0], [2840.0, 137.5], [2838.0, 180.0], [2846.0, 142.0], [2851.0, 136.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 2942.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 125.0, "minX": 982.0, "maxY": 198.0, "series": [{"data": [[982.0, 160.0], [1676.0, 198.0], [2283.0, 155.0], [2402.0, 152.0], [2329.0, 164.0], [2324.0, 179.0], [2511.0, 146.0], [2528.0, 142.0], [2482.0, 142.0], [2471.0, 159.0], [2518.0, 179.5], [2519.0, 153.0], [2679.0, 144.0], [2633.0, 137.0], [2616.0, 140.0], [2614.0, 137.0], [2615.0, 148.0], [2610.0, 134.0], [2608.0, 138.5], [2570.0, 142.0], [2589.0, 139.0], [2582.0, 139.0], [2656.0, 143.0], [2657.0, 161.0], [2659.0, 143.0], [2665.0, 134.0], [2629.0, 147.0], [2625.0, 145.0], [2624.0, 142.5], [2646.0, 130.0], [2653.0, 144.0], [2645.0, 138.0], [2644.0, 138.0], [2684.0, 132.0], [2682.0, 151.5], [2681.0, 140.0], [2603.0, 145.0], [2604.0, 145.0], [2636.0, 143.0], [2640.0, 135.0], [2637.0, 142.0], [2802.0, 191.0], [2815.0, 133.0], [2756.0, 140.0], [2754.0, 191.0], [2763.0, 137.0], [2762.0, 144.0], [2759.0, 181.0], [2813.0, 136.0], [2808.0, 189.0], [2778.0, 138.0], [2780.0, 189.0], [2779.0, 193.0], [2781.0, 187.0], [2782.0, 194.0], [2772.0, 190.0], [2771.0, 191.0], [2769.0, 141.0], [2768.0, 195.0], [2766.0, 153.0], [2767.0, 141.0], [2798.0, 133.0], [2795.0, 185.0], [2794.0, 136.0], [2700.0, 137.0], [2695.0, 139.0], [2698.0, 133.0], [2711.0, 141.0], [2705.0, 135.0], [2708.0, 141.0], [2786.0, 192.0], [2719.0, 134.0], [2713.0, 139.0], [2712.0, 142.0], [2787.0, 192.0], [2789.0, 186.0], [2790.0, 140.0], [2791.0, 144.0], [2793.0, 138.0], [2792.0, 142.5], [2703.0, 141.0], [2750.0, 139.0], [2749.0, 148.0], [2744.0, 142.0], [2746.0, 131.0], [2735.0, 143.0], [2741.0, 144.0], [2743.0, 140.0], [2747.0, 141.0], [2751.0, 143.0], [2804.0, 191.0], [2807.0, 148.0], [2803.0, 139.0], [2800.0, 139.0], [2801.0, 190.0], [2799.0, 153.0], [2814.0, 141.0], [2765.0, 183.0], [2810.0, 183.0], [2809.0, 144.0], [2812.0, 190.0], [2820.0, 142.0], [2821.0, 186.0], [2824.0, 194.0], [2823.0, 142.0], [2825.0, 136.0], [2827.0, 139.0], [2828.0, 189.0], [2826.0, 188.0], [2865.0, 137.0], [2869.0, 184.0], [2868.0, 184.0], [2866.0, 188.0], [2867.0, 185.0], [2819.0, 139.0], [2818.0, 187.0], [2817.0, 133.0], [2871.0, 139.0], [2870.0, 139.0], [2872.0, 186.0], [2879.0, 145.0], [2816.0, 188.0], [2875.0, 180.0], [2874.0, 134.0], [2873.0, 139.0], [2857.0, 187.0], [2858.0, 142.0], [2856.0, 190.0], [2852.0, 142.0], [2860.0, 184.5], [2861.0, 143.0], [2864.0, 135.0], [2863.0, 184.0], [2859.0, 187.0], [2848.0, 182.0], [2849.0, 182.0], [2850.0, 183.0], [2882.0, 130.0], [2829.0, 140.0], [2883.0, 130.0], [2884.0, 135.0], [2885.0, 194.0], [2886.0, 138.0], [2887.0, 188.0], [2889.0, 139.0], [2888.0, 191.0], [2890.0, 138.0], [2898.0, 139.0], [2896.0, 188.0], [2897.0, 189.0], [2895.0, 136.0], [2906.0, 129.0], [2903.0, 133.0], [2901.0, 181.0], [2905.0, 186.0], [2836.0, 139.0], [2835.0, 142.0], [2834.0, 147.0], [2833.0, 137.0], [2832.0, 184.0], [2831.0, 188.0], [2880.0, 189.0], [2916.0, 188.0], [2920.0, 188.0], [2912.0, 133.0], [2935.0, 125.0], [2926.0, 185.0], [2942.0, 190.0], [2843.0, 143.0], [2844.0, 186.0], [2845.0, 185.5], [2842.0, 188.0], [2841.0, 187.0], [2837.0, 188.0], [2840.0, 137.5], [2838.0, 180.0], [2846.0, 142.0], [2851.0, 136.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 2942.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 602.1, "minX": 1.73253818E12, "maxY": 2842.7, "series": [{"data": [[1.73253836E12, 2821.0], [1.73253823E12, 2833.7], [1.73253832E12, 2749.3], [1.73253819E12, 2566.1], [1.73253828E12, 2759.6], [1.73253845E12, 2821.3], [1.73253824E12, 2731.3], [1.73253841E12, 2817.8], [1.73253822E12, 2822.5], [1.73253839E12, 2767.7], [1.73253848E12, 2102.4], [1.73253818E12, 602.1], [1.73253835E12, 2754.6], [1.73253844E12, 2739.4], [1.73253831E12, 2822.9], [1.7325384E12, 2833.3], [1.73253827E12, 2842.7], [1.73253821E12, 2839.5], [1.73253838E12, 2818.3], [1.73253834E12, 2839.7], [1.7325383E12, 2820.8], [1.73253847E12, 2778.7], [1.73253826E12, 2832.2], [1.73253843E12, 2830.1], [1.7325382E12, 2760.2], [1.73253837E12, 2838.2], [1.73253833E12, 2819.0], [1.73253829E12, 2757.5], [1.73253846E12, 2811.3], [1.73253825E12, 2810.5], [1.73253842E12, 2798.2]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 10000, "maxX": 1.73253848E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 10800000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 349.3, "minX": 1.73253818E12, "maxY": 2851.5, "series": [{"data": [[1.73253836E12, 2818.9], [1.73253823E12, 2828.0], [1.73253832E12, 2727.5], [1.73253819E12, 2555.6], [1.73253828E12, 2763.7], [1.73253845E12, 2818.8], [1.73253824E12, 2731.3], [1.73253841E12, 2819.4], [1.73253822E12, 2821.2], [1.73253839E12, 2757.4], [1.73253848E12, 2363.9], [1.73253818E12, 349.3], [1.73253835E12, 2753.4], [1.73253844E12, 2736.5], [1.73253831E12, 2849.7], [1.7325384E12, 2830.9], [1.73253827E12, 2851.5], [1.73253821E12, 2841.0], [1.73253838E12, 2825.5], [1.73253834E12, 2839.1], [1.7325383E12, 2816.4], [1.73253847E12, 2797.5], [1.73253826E12, 2831.5], [1.73253843E12, 2826.6], [1.7325382E12, 2740.6], [1.73253837E12, 2844.3], [1.73253833E12, 2815.7], [1.73253829E12, 2746.5], [1.73253846E12, 2816.8], [1.73253825E12, 2816.4], [1.73253842E12, 2807.0]], "isOverall": false, "label": "200", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 10000, "maxX": 1.73253848E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 10800000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 349.3, "minX": 1.73253818E12, "maxY": 2851.5, "series": [{"data": [[1.73253836E12, 2818.9], [1.73253823E12, 2828.0], [1.73253832E12, 2727.5], [1.73253819E12, 2555.6], [1.73253828E12, 2763.7], [1.73253845E12, 2818.8], [1.73253824E12, 2731.3], [1.73253841E12, 2819.4], [1.73253822E12, 2821.2], [1.73253839E12, 2757.4], [1.73253848E12, 2363.9], [1.73253818E12, 349.3], [1.73253835E12, 2753.4], [1.73253844E12, 2736.5], [1.73253831E12, 2849.7], [1.7325384E12, 2830.9], [1.73253827E12, 2851.5], [1.73253821E12, 2841.0], [1.73253838E12, 2825.5], [1.73253834E12, 2839.1], [1.7325383E12, 2816.4], [1.73253847E12, 2797.5], [1.73253826E12, 2831.5], [1.73253843E12, 2826.6], [1.7325382E12, 2740.6], [1.73253837E12, 2844.3], [1.73253833E12, 2815.7], [1.73253829E12, 2746.5], [1.73253846E12, 2816.8], [1.73253825E12, 2816.4], [1.73253842E12, 2807.0]], "isOverall": false, "label": "HTTP Request-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 10000, "maxX": 1.73253848E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 10800000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 349.3, "minX": 1.73253818E12, "maxY": 2851.5, "series": [{"data": [[1.73253836E12, 2818.9], [1.73253823E12, 2828.0], [1.73253832E12, 2727.5], [1.73253819E12, 2555.6], [1.73253828E12, 2763.7], [1.73253845E12, 2818.8], [1.73253824E12, 2731.3], [1.73253841E12, 2819.4], [1.73253822E12, 2821.2], [1.73253839E12, 2757.4], [1.73253848E12, 2363.9], [1.73253818E12, 349.3], [1.73253835E12, 2753.4], [1.73253844E12, 2736.5], [1.73253831E12, 2849.7], [1.7325384E12, 2830.9], [1.73253827E12, 2851.5], [1.73253821E12, 2841.0], [1.73253838E12, 2825.5], [1.73253834E12, 2839.1], [1.7325383E12, 2816.4], [1.73253847E12, 2797.5], [1.73253826E12, 2831.5], [1.73253843E12, 2826.6], [1.7325382E12, 2740.6], [1.73253837E12, 2844.3], [1.73253833E12, 2815.7], [1.73253829E12, 2746.5], [1.73253846E12, 2816.8], [1.73253825E12, 2816.4], [1.73253842E12, 2807.0]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 10000, "maxX": 1.73253848E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 10800000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

