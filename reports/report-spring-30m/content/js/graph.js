/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 3.0, "minX": 0.0, "maxY": 1487.0, "series": [{"data": [[0.0, 3.0], [0.1, 10.0], [0.2, 19.0], [0.3, 29.0], [0.4, 37.0], [0.5, 45.0], [0.6, 53.0], [0.7, 61.0], [0.8, 71.0], [0.9, 84.0], [1.0, 90.0], [1.1, 98.0], [1.2, 106.0], [1.3, 115.0], [1.4, 122.0], [1.5, 129.0], [1.6, 140.0], [1.7, 155.0], [1.8, 173.0], [1.9, 180.0], [2.0, 183.0], [2.1, 184.0], [2.2, 185.0], [2.3, 186.0], [2.4, 187.0], [2.5, 187.0], [2.6, 187.0], [2.7, 188.0], [2.8, 188.0], [2.9, 189.0], [3.0, 189.0], [3.1, 189.0], [3.2, 190.0], [3.3, 190.0], [3.4, 190.0], [3.5, 190.0], [3.6, 191.0], [3.7, 191.0], [3.8, 191.0], [3.9, 192.0], [4.0, 192.0], [4.1, 192.0], [4.2, 193.0], [4.3, 193.0], [4.4, 194.0], [4.5, 194.0], [4.6, 195.0], [4.7, 195.0], [4.8, 196.0], [4.9, 197.0], [5.0, 199.0], [5.1, 201.0], [5.2, 206.0], [5.3, 215.0], [5.4, 223.0], [5.5, 232.0], [5.6, 237.0], [5.7, 242.0], [5.8, 251.0], [5.9, 257.0], [6.0, 266.0], [6.1, 273.0], [6.2, 282.0], [6.3, 290.0], [6.4, 292.0], [6.5, 293.0], [6.6, 294.0], [6.7, 294.0], [6.8, 295.0], [6.9, 295.0], [7.0, 295.0], [7.1, 295.0], [7.2, 295.0], [7.3, 296.0], [7.4, 296.0], [7.5, 296.0], [7.6, 296.0], [7.7, 296.0], [7.8, 296.0], [7.9, 296.0], [8.0, 297.0], [8.1, 297.0], [8.2, 297.0], [8.3, 297.0], [8.4, 297.0], [8.5, 297.0], [8.6, 297.0], [8.7, 297.0], [8.8, 297.0], [8.9, 297.0], [9.0, 297.0], [9.1, 298.0], [9.2, 298.0], [9.3, 298.0], [9.4, 298.0], [9.5, 298.0], [9.6, 298.0], [9.7, 298.0], [9.8, 298.0], [9.9, 298.0], [10.0, 298.0], [10.1, 298.0], [10.2, 298.0], [10.3, 298.0], [10.4, 298.0], [10.5, 298.0], [10.6, 298.0], [10.7, 299.0], [10.8, 299.0], [10.9, 299.0], [11.0, 299.0], [11.1, 299.0], [11.2, 299.0], [11.3, 299.0], [11.4, 299.0], [11.5, 299.0], [11.6, 299.0], [11.7, 299.0], [11.8, 299.0], [11.9, 299.0], [12.0, 299.0], [12.1, 299.0], [12.2, 299.0], [12.3, 299.0], [12.4, 299.0], [12.5, 299.0], [12.6, 299.0], [12.7, 299.0], [12.8, 299.0], [12.9, 299.0], [13.0, 299.0], [13.1, 300.0], [13.2, 300.0], [13.3, 300.0], [13.4, 300.0], [13.5, 300.0], [13.6, 300.0], [13.7, 300.0], [13.8, 300.0], [13.9, 300.0], [14.0, 300.0], [14.1, 300.0], [14.2, 300.0], [14.3, 300.0], [14.4, 300.0], [14.5, 300.0], [14.6, 300.0], [14.7, 300.0], [14.8, 300.0], [14.9, 300.0], [15.0, 300.0], [15.1, 300.0], [15.2, 300.0], [15.3, 300.0], [15.4, 300.0], [15.5, 300.0], [15.6, 300.0], [15.7, 300.0], [15.8, 300.0], [15.9, 300.0], [16.0, 300.0], [16.1, 300.0], [16.2, 300.0], [16.3, 300.0], [16.4, 301.0], [16.5, 301.0], [16.6, 301.0], [16.7, 301.0], [16.8, 301.0], [16.9, 301.0], [17.0, 301.0], [17.1, 301.0], [17.2, 301.0], [17.3, 301.0], [17.4, 301.0], [17.5, 301.0], [17.6, 301.0], [17.7, 301.0], [17.8, 301.0], [17.9, 301.0], [18.0, 301.0], [18.1, 301.0], [18.2, 301.0], [18.3, 301.0], [18.4, 301.0], [18.5, 301.0], [18.6, 301.0], [18.7, 301.0], [18.8, 301.0], [18.9, 301.0], [19.0, 301.0], [19.1, 301.0], [19.2, 301.0], [19.3, 301.0], [19.4, 301.0], [19.5, 301.0], [19.6, 301.0], [19.7, 301.0], [19.8, 301.0], [19.9, 301.0], [20.0, 301.0], [20.1, 301.0], [20.2, 301.0], [20.3, 301.0], [20.4, 301.0], [20.5, 301.0], [20.6, 302.0], [20.7, 302.0], [20.8, 302.0], [20.9, 302.0], [21.0, 302.0], [21.1, 302.0], [21.2, 302.0], [21.3, 302.0], [21.4, 302.0], [21.5, 302.0], [21.6, 302.0], [21.7, 302.0], [21.8, 302.0], [21.9, 302.0], [22.0, 302.0], [22.1, 302.0], [22.2, 302.0], [22.3, 302.0], [22.4, 302.0], [22.5, 302.0], [22.6, 302.0], [22.7, 302.0], [22.8, 302.0], [22.9, 302.0], [23.0, 302.0], [23.1, 302.0], [23.2, 302.0], [23.3, 302.0], [23.4, 302.0], [23.5, 302.0], [23.6, 302.0], [23.7, 302.0], [23.8, 302.0], [23.9, 302.0], [24.0, 302.0], [24.1, 302.0], [24.2, 302.0], [24.3, 302.0], [24.4, 302.0], [24.5, 302.0], [24.6, 302.0], [24.7, 302.0], [24.8, 302.0], [24.9, 302.0], [25.0, 302.0], [25.1, 302.0], [25.2, 302.0], [25.3, 302.0], [25.4, 302.0], [25.5, 302.0], [25.6, 302.0], [25.7, 302.0], [25.8, 302.0], [25.9, 303.0], [26.0, 303.0], [26.1, 303.0], [26.2, 303.0], [26.3, 303.0], [26.4, 303.0], [26.5, 303.0], [26.6, 303.0], [26.7, 303.0], [26.8, 303.0], [26.9, 303.0], [27.0, 303.0], [27.1, 303.0], [27.2, 303.0], [27.3, 303.0], [27.4, 303.0], [27.5, 303.0], [27.6, 303.0], [27.7, 303.0], [27.8, 303.0], [27.9, 303.0], [28.0, 303.0], [28.1, 303.0], [28.2, 303.0], [28.3, 303.0], [28.4, 303.0], [28.5, 303.0], [28.6, 303.0], [28.7, 303.0], [28.8, 303.0], [28.9, 303.0], [29.0, 303.0], [29.1, 303.0], [29.2, 303.0], [29.3, 303.0], [29.4, 303.0], [29.5, 303.0], [29.6, 303.0], [29.7, 303.0], [29.8, 303.0], [29.9, 303.0], [30.0, 303.0], [30.1, 303.0], [30.2, 303.0], [30.3, 303.0], [30.4, 303.0], [30.5, 303.0], [30.6, 303.0], [30.7, 303.0], [30.8, 303.0], [30.9, 303.0], [31.0, 303.0], [31.1, 303.0], [31.2, 303.0], [31.3, 303.0], [31.4, 303.0], [31.5, 303.0], [31.6, 303.0], [31.7, 303.0], [31.8, 303.0], [31.9, 303.0], [32.0, 303.0], [32.1, 304.0], [32.2, 304.0], [32.3, 304.0], [32.4, 304.0], [32.5, 304.0], [32.6, 304.0], [32.7, 304.0], [32.8, 304.0], [32.9, 304.0], [33.0, 304.0], [33.1, 304.0], [33.2, 304.0], [33.3, 304.0], [33.4, 304.0], [33.5, 304.0], [33.6, 304.0], [33.7, 304.0], [33.8, 304.0], [33.9, 304.0], [34.0, 304.0], [34.1, 304.0], [34.2, 304.0], [34.3, 304.0], [34.4, 304.0], [34.5, 304.0], [34.6, 304.0], [34.7, 304.0], [34.8, 304.0], [34.9, 304.0], [35.0, 304.0], [35.1, 304.0], [35.2, 304.0], [35.3, 304.0], [35.4, 304.0], [35.5, 304.0], [35.6, 304.0], [35.7, 304.0], [35.8, 304.0], [35.9, 304.0], [36.0, 304.0], [36.1, 304.0], [36.2, 304.0], [36.3, 304.0], [36.4, 304.0], [36.5, 304.0], [36.6, 304.0], [36.7, 304.0], [36.8, 304.0], [36.9, 304.0], [37.0, 304.0], [37.1, 304.0], [37.2, 304.0], [37.3, 304.0], [37.4, 304.0], [37.5, 304.0], [37.6, 304.0], [37.7, 304.0], [37.8, 304.0], [37.9, 304.0], [38.0, 304.0], [38.1, 304.0], [38.2, 304.0], [38.3, 304.0], [38.4, 304.0], [38.5, 304.0], [38.6, 304.0], [38.7, 304.0], [38.8, 304.0], [38.9, 304.0], [39.0, 304.0], [39.1, 305.0], [39.2, 305.0], [39.3, 305.0], [39.4, 305.0], [39.5, 305.0], [39.6, 305.0], [39.7, 305.0], [39.8, 305.0], [39.9, 305.0], [40.0, 305.0], [40.1, 305.0], [40.2, 305.0], [40.3, 305.0], [40.4, 305.0], [40.5, 305.0], [40.6, 305.0], [40.7, 305.0], [40.8, 305.0], [40.9, 305.0], [41.0, 305.0], [41.1, 305.0], [41.2, 305.0], [41.3, 305.0], [41.4, 305.0], [41.5, 305.0], [41.6, 305.0], [41.7, 305.0], [41.8, 305.0], [41.9, 305.0], [42.0, 305.0], [42.1, 305.0], [42.2, 305.0], [42.3, 305.0], [42.4, 305.0], [42.5, 305.0], [42.6, 305.0], [42.7, 305.0], [42.8, 305.0], [42.9, 305.0], [43.0, 305.0], [43.1, 305.0], [43.2, 305.0], [43.3, 305.0], [43.4, 305.0], [43.5, 305.0], [43.6, 305.0], [43.7, 305.0], [43.8, 305.0], [43.9, 305.0], [44.0, 305.0], [44.1, 305.0], [44.2, 305.0], [44.3, 305.0], [44.4, 305.0], [44.5, 305.0], [44.6, 305.0], [44.7, 305.0], [44.8, 305.0], [44.9, 305.0], [45.0, 305.0], [45.1, 305.0], [45.2, 305.0], [45.3, 305.0], [45.4, 305.0], [45.5, 305.0], [45.6, 305.0], [45.7, 305.0], [45.8, 305.0], [45.9, 305.0], [46.0, 305.0], [46.1, 305.0], [46.2, 305.0], [46.3, 305.0], [46.4, 305.0], [46.5, 305.0], [46.6, 306.0], [46.7, 306.0], [46.8, 306.0], [46.9, 306.0], [47.0, 306.0], [47.1, 306.0], [47.2, 306.0], [47.3, 306.0], [47.4, 306.0], [47.5, 306.0], [47.6, 306.0], [47.7, 306.0], [47.8, 306.0], [47.9, 306.0], [48.0, 306.0], [48.1, 306.0], [48.2, 306.0], [48.3, 306.0], [48.4, 306.0], [48.5, 306.0], [48.6, 306.0], [48.7, 306.0], [48.8, 306.0], [48.9, 306.0], [49.0, 306.0], [49.1, 306.0], [49.2, 306.0], [49.3, 306.0], [49.4, 306.0], [49.5, 306.0], [49.6, 306.0], [49.7, 306.0], [49.8, 306.0], [49.9, 306.0], [50.0, 306.0], [50.1, 306.0], [50.2, 306.0], [50.3, 306.0], [50.4, 306.0], [50.5, 306.0], [50.6, 306.0], [50.7, 306.0], [50.8, 306.0], [50.9, 306.0], [51.0, 306.0], [51.1, 306.0], [51.2, 306.0], [51.3, 306.0], [51.4, 306.0], [51.5, 306.0], [51.6, 306.0], [51.7, 306.0], [51.8, 306.0], [51.9, 306.0], [52.0, 306.0], [52.1, 306.0], [52.2, 306.0], [52.3, 306.0], [52.4, 306.0], [52.5, 306.0], [52.6, 306.0], [52.7, 306.0], [52.8, 306.0], [52.9, 306.0], [53.0, 306.0], [53.1, 306.0], [53.2, 306.0], [53.3, 306.0], [53.4, 306.0], [53.5, 306.0], [53.6, 306.0], [53.7, 306.0], [53.8, 306.0], [53.9, 306.0], [54.0, 306.0], [54.1, 307.0], [54.2, 307.0], [54.3, 307.0], [54.4, 307.0], [54.5, 307.0], [54.6, 307.0], [54.7, 307.0], [54.8, 307.0], [54.9, 307.0], [55.0, 307.0], [55.1, 307.0], [55.2, 307.0], [55.3, 307.0], [55.4, 307.0], [55.5, 307.0], [55.6, 307.0], [55.7, 307.0], [55.8, 307.0], [55.9, 307.0], [56.0, 307.0], [56.1, 307.0], [56.2, 307.0], [56.3, 307.0], [56.4, 307.0], [56.5, 307.0], [56.6, 307.0], [56.7, 307.0], [56.8, 307.0], [56.9, 307.0], [57.0, 307.0], [57.1, 307.0], [57.2, 307.0], [57.3, 307.0], [57.4, 307.0], [57.5, 307.0], [57.6, 307.0], [57.7, 307.0], [57.8, 307.0], [57.9, 307.0], [58.0, 307.0], [58.1, 307.0], [58.2, 307.0], [58.3, 307.0], [58.4, 307.0], [58.5, 307.0], [58.6, 307.0], [58.7, 307.0], [58.8, 307.0], [58.9, 307.0], [59.0, 307.0], [59.1, 307.0], [59.2, 307.0], [59.3, 307.0], [59.4, 307.0], [59.5, 307.0], [59.6, 307.0], [59.7, 307.0], [59.8, 307.0], [59.9, 307.0], [60.0, 307.0], [60.1, 307.0], [60.2, 307.0], [60.3, 307.0], [60.4, 307.0], [60.5, 307.0], [60.6, 307.0], [60.7, 307.0], [60.8, 307.0], [60.9, 307.0], [61.0, 307.0], [61.1, 307.0], [61.2, 307.0], [61.3, 307.0], [61.4, 308.0], [61.5, 308.0], [61.6, 308.0], [61.7, 308.0], [61.8, 308.0], [61.9, 308.0], [62.0, 308.0], [62.1, 308.0], [62.2, 308.0], [62.3, 308.0], [62.4, 308.0], [62.5, 308.0], [62.6, 308.0], [62.7, 308.0], [62.8, 308.0], [62.9, 308.0], [63.0, 308.0], [63.1, 308.0], [63.2, 308.0], [63.3, 308.0], [63.4, 308.0], [63.5, 308.0], [63.6, 308.0], [63.7, 308.0], [63.8, 308.0], [63.9, 308.0], [64.0, 308.0], [64.1, 308.0], [64.2, 308.0], [64.3, 308.0], [64.4, 308.0], [64.5, 308.0], [64.6, 308.0], [64.7, 308.0], [64.8, 308.0], [64.9, 308.0], [65.0, 308.0], [65.1, 308.0], [65.2, 308.0], [65.3, 308.0], [65.4, 308.0], [65.5, 308.0], [65.6, 308.0], [65.7, 308.0], [65.8, 308.0], [65.9, 308.0], [66.0, 308.0], [66.1, 308.0], [66.2, 308.0], [66.3, 308.0], [66.4, 308.0], [66.5, 308.0], [66.6, 308.0], [66.7, 308.0], [66.8, 308.0], [66.9, 308.0], [67.0, 308.0], [67.1, 308.0], [67.2, 308.0], [67.3, 308.0], [67.4, 308.0], [67.5, 308.0], [67.6, 308.0], [67.7, 308.0], [67.8, 308.0], [67.9, 308.0], [68.0, 309.0], [68.1, 309.0], [68.2, 309.0], [68.3, 309.0], [68.4, 309.0], [68.5, 309.0], [68.6, 309.0], [68.7, 309.0], [68.8, 309.0], [68.9, 309.0], [69.0, 309.0], [69.1, 309.0], [69.2, 309.0], [69.3, 309.0], [69.4, 309.0], [69.5, 309.0], [69.6, 309.0], [69.7, 309.0], [69.8, 309.0], [69.9, 309.0], [70.0, 309.0], [70.1, 309.0], [70.2, 309.0], [70.3, 309.0], [70.4, 309.0], [70.5, 309.0], [70.6, 309.0], [70.7, 309.0], [70.8, 309.0], [70.9, 309.0], [71.0, 309.0], [71.1, 309.0], [71.2, 309.0], [71.3, 309.0], [71.4, 309.0], [71.5, 309.0], [71.6, 309.0], [71.7, 309.0], [71.8, 309.0], [71.9, 309.0], [72.0, 309.0], [72.1, 309.0], [72.2, 309.0], [72.3, 309.0], [72.4, 309.0], [72.5, 309.0], [72.6, 309.0], [72.7, 309.0], [72.8, 309.0], [72.9, 309.0], [73.0, 309.0], [73.1, 309.0], [73.2, 309.0], [73.3, 309.0], [73.4, 309.0], [73.5, 309.0], [73.6, 309.0], [73.7, 309.0], [73.8, 310.0], [73.9, 310.0], [74.0, 310.0], [74.1, 310.0], [74.2, 310.0], [74.3, 310.0], [74.4, 310.0], [74.5, 310.0], [74.6, 310.0], [74.7, 310.0], [74.8, 310.0], [74.9, 310.0], [75.0, 310.0], [75.1, 310.0], [75.2, 310.0], [75.3, 310.0], [75.4, 310.0], [75.5, 310.0], [75.6, 310.0], [75.7, 310.0], [75.8, 310.0], [75.9, 310.0], [76.0, 310.0], [76.1, 310.0], [76.2, 310.0], [76.3, 310.0], [76.4, 310.0], [76.5, 310.0], [76.6, 310.0], [76.7, 310.0], [76.8, 310.0], [76.9, 310.0], [77.0, 310.0], [77.1, 310.0], [77.2, 310.0], [77.3, 310.0], [77.4, 310.0], [77.5, 310.0], [77.6, 310.0], [77.7, 310.0], [77.8, 310.0], [77.9, 310.0], [78.0, 310.0], [78.1, 310.0], [78.2, 310.0], [78.3, 310.0], [78.4, 310.0], [78.5, 310.0], [78.6, 310.0], [78.7, 311.0], [78.8, 311.0], [78.9, 311.0], [79.0, 311.0], [79.1, 311.0], [79.2, 311.0], [79.3, 311.0], [79.4, 311.0], [79.5, 311.0], [79.6, 311.0], [79.7, 311.0], [79.8, 311.0], [79.9, 311.0], [80.0, 311.0], [80.1, 311.0], [80.2, 311.0], [80.3, 311.0], [80.4, 311.0], [80.5, 311.0], [80.6, 311.0], [80.7, 311.0], [80.8, 311.0], [80.9, 311.0], [81.0, 311.0], [81.1, 311.0], [81.2, 311.0], [81.3, 311.0], [81.4, 311.0], [81.5, 311.0], [81.6, 311.0], [81.7, 311.0], [81.8, 311.0], [81.9, 311.0], [82.0, 311.0], [82.1, 311.0], [82.2, 311.0], [82.3, 311.0], [82.4, 311.0], [82.5, 311.0], [82.6, 312.0], [82.7, 312.0], [82.8, 312.0], [82.9, 312.0], [83.0, 312.0], [83.1, 312.0], [83.2, 312.0], [83.3, 312.0], [83.4, 312.0], [83.5, 312.0], [83.6, 312.0], [83.7, 312.0], [83.8, 312.0], [83.9, 312.0], [84.0, 312.0], [84.1, 312.0], [84.2, 312.0], [84.3, 312.0], [84.4, 312.0], [84.5, 312.0], [84.6, 312.0], [84.7, 312.0], [84.8, 312.0], [84.9, 312.0], [85.0, 312.0], [85.1, 312.0], [85.2, 312.0], [85.3, 312.0], [85.4, 312.0], [85.5, 312.0], [85.6, 312.0], [85.7, 313.0], [85.8, 313.0], [85.9, 313.0], [86.0, 313.0], [86.1, 313.0], [86.2, 313.0], [86.3, 313.0], [86.4, 313.0], [86.5, 313.0], [86.6, 313.0], [86.7, 313.0], [86.8, 313.0], [86.9, 313.0], [87.0, 313.0], [87.1, 313.0], [87.2, 313.0], [87.3, 313.0], [87.4, 313.0], [87.5, 313.0], [87.6, 313.0], [87.7, 313.0], [87.8, 313.0], [87.9, 313.0], [88.0, 313.0], [88.1, 314.0], [88.2, 314.0], [88.3, 314.0], [88.4, 314.0], [88.5, 314.0], [88.6, 314.0], [88.7, 314.0], [88.8, 314.0], [88.9, 314.0], [89.0, 314.0], [89.1, 314.0], [89.2, 314.0], [89.3, 314.0], [89.4, 314.0], [89.5, 314.0], [89.6, 314.0], [89.7, 314.0], [89.8, 314.0], [89.9, 314.0], [90.0, 315.0], [90.1, 315.0], [90.2, 315.0], [90.3, 315.0], [90.4, 315.0], [90.5, 315.0], [90.6, 315.0], [90.7, 315.0], [90.8, 315.0], [90.9, 315.0], [91.0, 315.0], [91.1, 315.0], [91.2, 315.0], [91.3, 315.0], [91.4, 316.0], [91.5, 316.0], [91.6, 316.0], [91.7, 316.0], [91.8, 316.0], [91.9, 316.0], [92.0, 316.0], [92.1, 316.0], [92.2, 316.0], [92.3, 316.0], [92.4, 316.0], [92.5, 317.0], [92.6, 317.0], [92.7, 317.0], [92.8, 317.0], [92.9, 317.0], [93.0, 317.0], [93.1, 317.0], [93.2, 317.0], [93.3, 317.0], [93.4, 318.0], [93.5, 318.0], [93.6, 318.0], [93.7, 318.0], [93.8, 318.0], [93.9, 318.0], [94.0, 319.0], [94.1, 319.0], [94.2, 319.0], [94.3, 319.0], [94.4, 319.0], [94.5, 320.0], [94.6, 320.0], [94.7, 320.0], [94.8, 321.0], [94.9, 321.0], [95.0, 321.0], [95.1, 322.0], [95.2, 322.0], [95.3, 322.0], [95.4, 323.0], [95.5, 324.0], [95.6, 324.0], [95.7, 325.0], [95.8, 326.0], [95.9, 327.0], [96.0, 328.0], [96.1, 329.0], [96.2, 331.0], [96.3, 332.0], [96.4, 335.0], [96.5, 338.0], [96.6, 344.0], [96.7, 355.0], [96.8, 375.0], [96.9, 408.0], [97.0, 413.0], [97.1, 415.0], [97.2, 416.0], [97.3, 417.0], [97.4, 418.0], [97.5, 419.0], [97.6, 419.0], [97.7, 420.0], [97.8, 420.0], [97.9, 421.0], [98.0, 422.0], [98.1, 422.0], [98.2, 423.0], [98.3, 423.0], [98.4, 424.0], [98.5, 424.0], [98.6, 425.0], [98.7, 426.0], [98.8, 426.0], [98.9, 427.0], [99.0, 428.0], [99.1, 429.0], [99.2, 430.0], [99.3, 431.0], [99.4, 433.0], [99.5, 435.0], [99.6, 439.0], [99.7, 448.0], [99.8, 485.0], [99.9, 544.0], [100.0, 1487.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 43.0, "minX": 0.0, "maxY": 2923882.0, "series": [{"data": [[0.0, 2923882.0], [500.0, 5418.0], [1000.0, 43.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 500, "maxX": 1000.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 5432.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 2923911.0, "series": [{"data": [[0.0, 2923911.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 5432.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 1.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 67.61468377185813, "minX": 1.72959069E12, "maxY": 500.0, "series": [{"data": [[1.72959219E12, 500.0], [1.72959168E12, 500.0], [1.72959159E12, 500.0], [1.72959108E12, 500.0], [1.72959099E12, 500.0], [1.7295921E12, 500.0], [1.7295915E12, 500.0], [1.7295909E12, 500.0], [1.72959201E12, 500.0], [1.72959141E12, 500.0], [1.72959243E12, 500.0], [1.72959081E12, 500.0], [1.72959192E12, 500.0], [1.72959183E12, 500.0], [1.72959132E12, 500.0], [1.72959123E12, 500.0], [1.72959234E12, 500.0], [1.72959072E12, 254.26593462072557], [1.72959174E12, 500.0], [1.72959114E12, 500.0], [1.72959225E12, 500.0], [1.72959165E12, 500.0], [1.72959105E12, 500.0], [1.72959216E12, 500.0], [1.72959207E12, 500.0], [1.72959156E12, 500.0], [1.72959147E12, 500.0], [1.72959096E12, 500.0], [1.72959087E12, 500.0], [1.72959198E12, 500.0], [1.72959138E12, 500.0], [1.72959249E12, 494.8242700352042], [1.72959078E12, 500.0], [1.72959189E12, 500.0], [1.72959129E12, 500.0], [1.7295924E12, 500.0], [1.72959231E12, 500.0], [1.72959069E12, 67.61468377185813], [1.7295918E12, 500.0], [1.72959171E12, 500.0], [1.7295912E12, 500.0], [1.72959111E12, 500.0], [1.72959222E12, 500.0], [1.72959162E12, 500.0], [1.72959102E12, 500.0], [1.72959213E12, 500.0], [1.72959153E12, 500.0], [1.72959093E12, 500.0], [1.72959204E12, 500.0], [1.72959195E12, 500.0], [1.72959144E12, 500.0], [1.72959135E12, 500.0], [1.72959246E12, 500.0], [1.72959084E12, 500.0], [1.72959075E12, 471.7585625824803], [1.72959186E12, 500.0], [1.72959126E12, 500.0], [1.72959237E12, 500.0], [1.72959177E12, 500.0], [1.72959117E12, 500.0], [1.72959228E12, 500.0]], "isOverall": false, "label": "Thread Group", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 30000, "maxX": 1.72959249E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 10800000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 4.605263157894736, "minX": 1.0, "maxY": 307.0230965343026, "series": [{"data": [[2.0, 13.134615384615385], [3.0, 4.605263157894736], [4.0, 11.389473684210527], [5.0, 7.298387096774192], [6.0, 7.2142857142857135], [7.0, 7.626666666666669], [8.0, 7.409356725146203], [9.0, 7.7897727272727275], [10.0, 8.047619047619044], [11.0, 8.729729729729728], [12.0, 9.650000000000002], [13.0, 10.140540540540545], [14.0, 10.085858585858576], [15.0, 10.484999999999996], [16.0, 10.057894736842103], [17.0, 13.11330049261084], [18.0, 12.94708994708995], [19.0, 13.61256544502618], [20.0, 13.383084577114424], [21.0, 14.59162303664921], [22.0, 16.042553191489368], [23.0, 15.497461928934007], [24.0, 15.914999999999994], [25.0, 16.917948717948715], [26.0, 17.311224489795915], [27.0, 16.937823834196884], [28.0, 20.14646464646464], [29.0, 19.323076923076925], [30.0, 19.532663316582905], [31.0, 21.099999999999998], [32.0, 22.2192513368984], [33.0, 22.099476439790585], [34.0, 22.560606060606087], [35.0, 22.751269035532996], [36.0, 23.50785340314136], [37.0, 24.16243654822333], [38.0, 28.650602409638555], [39.0, 27.964497041420106], [40.0, 29.29411764705882], [41.0, 25.935323383084583], [42.0, 27.750000000000004], [43.0, 28.057291666666664], [44.0, 30.198895027624317], [45.0, 32.21428571428573], [46.0, 33.10471204188482], [47.0, 30.428571428571438], [48.0, 30.56122448979592], [49.0, 29.63316582914572], [50.0, 34.457894736842114], [51.0, 32.28078817733989], [52.0, 31.096938775510214], [53.0, 34.49261083743843], [54.0, 34.27918781725889], [55.0, 33.95098039215688], [56.0, 35.73232323232324], [57.0, 35.98477157360407], [58.0, 37.77319587628865], [59.0, 36.87000000000002], [60.0, 37.41871921182269], [61.0, 39.07772020725391], [62.0, 39.65816326530612], [63.0, 40.08854166666668], [64.0, 40.769633507853406], [65.0, 42.87755102040815], [66.0, 39.804020100502534], [67.0, 42.094059405940605], [68.0, 41.93401015228428], [69.0, 44.91414141414144], [70.0, 43.852791878172596], [71.0, 44.611940298507456], [72.0, 44.054726368159194], [73.0, 45.53061224489794], [74.0, 43.37019230769229], [75.0, 48.107142857142854], [76.0, 46.70588235294115], [77.0, 47.93434343434342], [78.0, 49.16230366492146], [79.0, 52.01036269430053], [80.0, 49.46733668341708], [81.0, 50.78974358974358], [82.0, 50.17821782178218], [83.0, 51.44949494949495], [84.0, 51.339901477832534], [85.0, 51.852216748768484], [86.0, 52.914999999999985], [87.0, 53.19211822660101], [88.0, 54.2060301507538], [89.0, 55.25757575757578], [90.0, 55.17499999999998], [91.0, 56.128205128205124], [92.0, 56.82901554404147], [93.0, 56.4422110552764], [94.0, 60.91542288557216], [95.0, 58.242574257425716], [96.0, 58.58499999999998], [97.0, 58.980198019801996], [98.0, 58.84653465346535], [99.0, 61.069306930693074], [100.0, 61.24120603015073], [101.0, 61.069651741293534], [102.0, 61.06310679611651], [103.0, 62.85572139303482], [104.0, 62.95477386934671], [105.0, 65.62499999999996], [106.0, 66.74999999999999], [107.0, 66.87], [108.0, 66.07216494845359], [109.0, 66.96019900497518], [110.0, 67.60696517412934], [111.0, 68.3265306122449], [112.0, 69.62814070351762], [113.0, 69.8274111675127], [114.0, 73.2146596858639], [115.0, 70.57070707070707], [116.0, 71.63999999999997], [117.0, 73.1683673469388], [118.0, 74.58461538461539], [119.0, 75.02617801047118], [120.0, 74.64705882352936], [121.0, 88.72727272727265], [122.0, 81.73446327683615], [123.0, 80.7552083333333], [124.0, 80.32432432432435], [125.0, 79.59375000000003], [126.0, 82.94179894179896], [127.0, 78.38421052631581], [128.0, 80.69791666666669], [129.0, 87.26063829787239], [130.0, 81.37765957446807], [131.0, 86.80423280423284], [132.0, 83.39378238341965], [133.0, 86.66850828729285], [134.0, 88.88359788359786], [135.0, 84.12953367875646], [136.0, 86.21164021164019], [137.0, 88.13333333333334], [138.0, 87.72020725388604], [139.0, 88.7068062827225], [140.0, 85.43589743589753], [141.0, 89.31632653061227], [142.0, 89.1894736842105], [143.0, 91.47619047619051], [144.0, 90.5806451612903], [145.0, 93.95939086294416], [146.0, 90.17499999999998], [147.0, 90.85567010309283], [148.0, 92.69696969696962], [149.0, 89.34358974358976], [150.0, 91.04784688995217], [151.0, 90.68527918781727], [152.0, 95.12060301507536], [153.0, 93.08080808080808], [154.0, 93.84615384615384], [155.0, 97.63350785340313], [156.0, 96.09523809523812], [157.0, 104.21134020618554], [158.0, 94.39512195121948], [159.0, 95.42926829268289], [160.0, 98.76439790575914], [161.0, 99.75897435897433], [162.0, 100.04591836734699], [163.0, 101.39698492462311], [164.0, 99.28921568627447], [165.0, 100.89340101522838], [166.0, 98.24120603015075], [167.0, 103.785], [168.0, 99.18811881188117], [169.0, 105.61194029850748], [170.0, 101.2376237623763], [171.0, 104.59278350515469], [172.0, 105.21319796954313], [173.0, 107.40201005025125], [174.0, 106.2425742574257], [175.0, 105.70833333333329], [176.0, 112.67368421052637], [177.0, 109.24242424242425], [178.0, 107.13636363636364], [179.0, 112.24257425742574], [180.0, 108.15841584158413], [181.0, 108.93434343434345], [182.0, 107.36057692307695], [183.0, 106.51207729468588], [184.0, 109.6059113300493], [185.0, 112.12437810945275], [186.0, 110.75252525252517], [187.0, 114.11999999999996], [188.0, 117.8418367346939], [189.0, 116.6855670103093], [190.0, 118.17368421052633], [191.0, 117.89552238805965], [192.0, 116.38000000000004], [193.0, 115.44059405940597], [194.0, 118.82000000000005], [195.0, 120.00000000000003], [196.0, 119.0456852791878], [197.0, 121.32], [198.0, 118.91959798994978], [199.0, 121.0788177339901], [200.0, 123.10204081632655], [201.0, 120.0656565656565], [202.0, 122.28712871287124], [203.0, 122.45833333333334], [204.0, 129.53061224489804], [205.0, 126.60000000000004], [206.0, 127.61658031088085], [207.0, 127.60999999999999], [208.0, 124.74129353233828], [209.0, 127.743842364532], [210.0, 125.69849246231158], [211.0, 129.16080402010047], [212.0, 126.64179104477608], [213.0, 128.26020408163262], [214.0, 134.04500000000004], [215.0, 130.72680412371133], [216.0, 133.59390862944156], [217.0, 129.34134615384608], [218.0, 128.72307692307692], [219.0, 139.7812499999999], [220.0, 135.22751322751327], [221.0, 141.3403141361257], [222.0, 139.08080808080814], [223.0, 135.35820895522383], [224.0, 135.62032085561495], [225.0, 140.4148936170213], [226.0, 145.78865979381442], [227.0, 145.09183673469394], [228.0, 138.16831683168303], [229.0, 139.12755102040816], [230.0, 142.51010101010098], [231.0, 140.8031088082902], [232.0, 145.25757575757575], [233.0, 136.79487179487182], [234.0, 148.05000000000004], [235.0, 144.40816326530614], [236.0, 146.13930348258708], [237.0, 143.502564102564], [238.0, 135.91620111731842], [239.0, 159.5969387755102], [240.0, 156.02777777777766], [241.0, 160.17741935483878], [242.0, 151.8549999999999], [243.0, 150.6108108108107], [244.0, 152.46428571428572], [245.0, 153.64071856287418], [246.0, 196.4408602150537], [247.0, 133.63841807909606], [248.0, 200.5792349726775], [249.0, 163.084745762712], [250.0, 171.0769230769231], [251.0, 167.18716577540104], [252.0, 152.44318181818184], [253.0, 178.90526315789464], [254.0, 162.8351063829788], [255.0, 167.68306010928956], [257.0, 160.5454545454545], [256.0, 162.04232804232802], [258.0, 165.14835164835165], [259.0, 182.24293785310732], [260.0, 165.4505494505494], [261.0, 175.70555555555563], [262.0, 173.9818181818182], [263.0, 157.12883435582816], [264.0, 208.50000000000009], [270.0, 171.74731182795702], [271.0, 170.0548780487804], [268.0, 169.41111111111104], [269.0, 188.99456521739128], [265.0, 194.75862068965523], [266.0, 185.15469613259665], [267.0, 181.06010928961734], [273.0, 190.23626373626377], [272.0, 205.5573770491804], [274.0, 173.56216216216217], [275.0, 174.9247311827956], [276.0, 186.68586387434556], [277.0, 176.84065934065933], [278.0, 178.95675675675673], [279.0, 180.57219251336895], [280.0, 178.0285714285714], [286.0, 178.7696335078534], [287.0, 177.9689119170985], [284.0, 200.83695652173924], [285.0, 184.7076923076924], [281.0, 175.32075471698116], [282.0, 194.14545454545447], [283.0, 229.63043478260875], [289.0, 187.03076923076918], [288.0, 181.82887700534755], [290.0, 183.37305699481854], [291.0, 177.08999999999986], [292.0, 174.63730569948186], [293.0, 185.06417112299462], [294.0, 191.93717277486908], [295.0, 184.43523316062172], [296.0, 183.2736318407959], [302.0, 177.47783251231522], [303.0, 182.87999999999997], [300.0, 182.6871794871795], [301.0, 185.49504950495052], [297.0, 178.44221105527637], [298.0, 181.9384615384616], [299.0, 185.70918367346948], [305.0, 186.09183673469374], [304.0, 180.8316831683168], [306.0, 188.37688442211055], [307.0, 182.92462311557784], [308.0, 185.56250000000003], [309.0, 191.07537688442213], [310.0, 192.66666666666669], [311.0, 187.3636363636363], [312.0, 189.61025641025645], [318.0, 195.3248730964466], [319.0, 193.43548387096772], [316.0, 194.1065989847715], [317.0, 190.63636363636368], [313.0, 188.67156862745102], [314.0, 190.68811881188122], [315.0, 183.9004975124378], [321.0, 192.54591836734681], [320.0, 202.74146341463418], [322.0, 194.34951456310685], [323.0, 194.13265306122432], [324.0, 193.6062176165802], [325.0, 196.78735632183913], [326.0, 221.46808510638303], [327.0, 215.47058823529426], [328.0, 200.54189944134077], [334.0, 220.4444444444444], [335.0, 203.4198895027624], [332.0, 219.34444444444443], [333.0, 228.36702127659575], [329.0, 230.2022471910112], [330.0, 222.80628272251303], [331.0, 203.49438202247185], [337.0, 222.0217391304348], [336.0, 219.1141304347825], [338.0, 215.49180327868854], [339.0, 215.46927374301688], [340.0, 204.5060975609756], [341.0, 241.96874999999983], [342.0, 276.4034090909089], [343.0, 242.1657458563535], [344.0, 226.8255813953489], [350.0, 216.49479166666669], [351.0, 225.85937500000006], [348.0, 213.5077720207254], [349.0, 211.3403141361257], [345.0, 245.92265193370162], [346.0, 237.29729729729732], [347.0, 225.7425742574257], [353.0, 213.31351351351347], [352.0, 220.48499999999999], [354.0, 227.41269841269852], [355.0, 227.108108108108], [356.0, 231.10994764397913], [357.0, 218.0670391061453], [358.0, 234.94475138121535], [359.0, 209.89570552147234], [360.0, 271.17261904761915], [366.0, 232.0162162162162], [367.0, 229.01086956521738], [364.0, 242.93582887700538], [365.0, 235.92708333333326], [361.0, 259.58100558659214], [362.0, 256.27868852459017], [363.0, 246.7297297297298], [369.0, 239.8534031413613], [368.0, 248.9005524861879], [370.0, 235.21739130434776], [371.0, 244.4920634920635], [372.0, 234.07731958762895], [373.0, 233.68844221105525], [374.0, 227.6974358974359], [375.0, 231.69587628865975], [376.0, 230.31770833333323], [382.0, 233.5939086294415], [383.0, 234.79396984924622], [380.0, 246.26633165829142], [381.0, 234.03030303030314], [377.0, 240.51308900523563], [378.0, 230.02617801047134], [379.0, 234.13297872340414], [385.0, 243.43229166666652], [384.0, 230.38709677419357], [386.0, 243.46700507614213], [387.0, 231.31862745098042], [388.0, 235.7424242424242], [389.0, 230.5459183673469], [390.0, 239.94845360824752], [391.0, 246.78756476683935], [392.0, 242.76262626262618], [398.0, 240.9441624365482], [399.0, 243.32307692307683], [396.0, 238.46907216494841], [397.0, 243.35000000000002], [393.0, 241.55102040816328], [394.0, 236.72081218274107], [395.0, 243.11557788944722], [401.0, 242.12765957446803], [400.0, 247.13705583756354], [402.0, 250.79411764705875], [403.0, 243.6716417910447], [404.0, 245.83505154639164], [405.0, 247.5054347826088], [406.0, 265.21910112359535], [407.0, 267.0918918918917], [408.0, 264.3731343283583], [414.0, 255.81313131313127], [415.0, 250.0899999999999], [412.0, 253.9595959595959], [413.0, 255.77948717948726], [409.0, 257.48205128205154], [410.0, 245.6974358974359], [411.0, 252.29381443298965], [417.0, 251.8201058201058], [416.0, 253.41791044776124], [418.0, 254.9019607843137], [419.0, 248.65803108808302], [420.0, 263.9798994974876], [421.0, 253.82051282051287], [422.0, 259.74747474747477], [423.0, 256.32663316582915], [424.0, 257.31818181818176], [430.0, 255.04639175257728], [431.0, 273.5257731958763], [428.0, 261.89005235602104], [429.0, 264.0505050505049], [425.0, 259.7093596059112], [426.0, 256.38743455497365], [427.0, 260.2099999999999], [433.0, 263.2436548223349], [432.0, 267.55384615384617], [434.0, 267.2300000000003], [435.0, 263.6594594594596], [436.0, 273.48205128205115], [437.0, 272.3718592964826], [438.0, 269.8149999999998], [439.0, 266.6354166666665], [440.0, 267.8426395939086], [446.0, 270.8724489795918], [447.0, 272.10999999999996], [444.0, 273.9642857142859], [445.0, 270.13567839195974], [441.0, 268.3762886597938], [442.0, 274.6134020618556], [443.0, 269.9999999999999], [449.0, 269.1909547738694], [448.0, 270.331683168317], [450.0, 268.53960396039616], [451.0, 270.4052631578947], [452.0, 278.33000000000015], [453.0, 278.96923076923065], [454.0, 275.854271356784], [455.0, 279.37113402061857], [456.0, 277.6515151515152], [462.0, 280.54358974358956], [463.0, 289.0812182741117], [460.0, 280.050505050505], [461.0, 282.8826530612243], [457.0, 279.8059701492538], [458.0, 277.72999999999996], [459.0, 273.88717948717937], [465.0, 285.73604060913675], [464.0, 278.9333333333332], [466.0, 286.7643979057592], [467.0, 285.4653465346535], [468.0, 281.5221674876848], [469.0, 284.38693467336674], [470.0, 279.5260416666668], [471.0, 292.896373056995], [472.0, 294.5999999999997], [478.0, 290.12999999999994], [479.0, 285.61748633879796], [476.0, 283.58793969849245], [477.0, 288.68844221105536], [473.0, 285.84771573604075], [474.0, 288.0780487804878], [475.0, 286.0703517587942], [481.0, 304.3300000000001], [480.0, 305.1614583333334], [482.0, 299.0406091370558], [483.0, 293.35643564356445], [484.0, 294.6326530612245], [485.0, 294.2176165803109], [486.0, 297.86633663366337], [487.0, 297.2397959183674], [488.0, 293.0597014925372], [494.0, 300.6546391752574], [495.0, 306.29268292682923], [492.0, 303.78606965174134], [493.0, 299.0618556701032], [489.0, 299.81188118811883], [490.0, 297.72727272727263], [491.0, 293.07291666666646], [496.0, 299.99999999999994], [497.0, 296.8663366336634], [498.0, 300.82914572864325], [499.0, 304.78181818181827], [500.0, 307.0230965343026], [1.0, 34.36363636363636]], "isOverall": false, "label": "HTTP Request", "isController": false}, {"data": [[491.88187590184225, 302.1262539074213]], "isOverall": false, "label": "HTTP Request-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 500.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 97384.83333333333, "minX": 1.72959069E12, "maxY": 4576032.966666667, "series": [{"data": [[1.72959219E12, 4459841.633333334], [1.72959168E12, 4543487.866666666], [1.72959159E12, 4466813.666666667], [1.72959108E12, 4496674.666666667], [1.72959099E12, 4502871.966666667], [1.7295921E12, 4468084.133333334], [1.7295915E12, 4475022.533333333], [1.7295909E12, 4492355.166666667], [1.72959201E12, 4464279.0], [1.72959141E12, 4475373.133333334], [1.72959243E12, 4532632.1], [1.72959081E12, 4546325.266666667], [1.72959192E12, 4470995.533333333], [1.72959183E12, 4538269.166666667], [1.72959132E12, 4464776.166666667], [1.72959123E12, 4477294.9], [1.72959234E12, 4364326.666666667], [1.72959072E12, 4362052.833333333], [1.72959174E12, 4516290.666666667], [1.72959114E12, 4492080.266666667], [1.72959225E12, 4469856.966666667], [1.72959165E12, 4545904.166666667], [1.72959105E12, 4495175.1], [1.72959216E12, 4479168.333333333], [1.72959207E12, 4481839.333333333], [1.72959156E12, 4460673.866666666], [1.72959147E12, 4466995.8], [1.72959096E12, 4493899.0], [1.72959087E12, 4489937.3], [1.72959198E12, 4474557.233333333], [1.72959138E12, 4472774.166666667], [1.72959249E12, 2215525.6666666665], [1.72959078E12, 4576032.966666667], [1.72959189E12, 4475722.9], [1.72959129E12, 4484636.466666667], [1.7295924E12, 4273277.766666667], [1.72959231E12, 4470334.633333334], [1.72959069E12, 2245824.0], [1.7295918E12, 4515614.666666667], [1.72959171E12, 4533419.366666666], [1.7295912E12, 4489635.133333334], [1.72959111E12, 4473191.633333334], [1.72959222E12, 4480463.433333334], [1.72959162E12, 4503695.7], [1.72959102E12, 4507129.533333333], [1.72959213E12, 4471364.7], [1.72959153E12, 4468195.466666667], [1.72959093E12, 4511191.633333334], [1.72959204E12, 4476038.333333333], [1.72959195E12, 4466470.833333333], [1.72959144E12, 4471417.8], [1.72959135E12, 4418865.066666666], [1.72959246E12, 4504170.0], [1.72959084E12, 4503018.6], [1.72959075E12, 4519810.066666666], [1.72959186E12, 4436789.2], [1.72959126E12, 4491253.433333334], [1.72959237E12, 4370419.666666667], [1.72959177E12, 4541625.6], [1.72959117E12, 4484234.566666666], [1.72959228E12, 4476293.033333333]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.72959219E12, 196024.03333333333], [1.72959168E12, 199710.5], [1.72959159E12, 196334.6], [1.72959108E12, 197661.56666666668], [1.72959099E12, 197915.66666666666], [1.7295921E12, 196391.06666666668], [1.7295915E12, 196697.6], [1.7295909E12, 197459.9], [1.72959201E12, 196221.66666666666], [1.72959141E12, 196725.83333333334], [1.72959243E12, 199230.53333333333], [1.72959081E12, 199835.53333333333], [1.72959192E12, 196520.13333333333], [1.72959183E12, 199480.6], [1.72959132E12, 196266.03333333333], [1.72959123E12, 196798.43333333332], [1.72959234E12, 191829.36666666667], [1.72959072E12, 191736.6], [1.72959174E12, 198528.73333333334], [1.72959114E12, 197451.83333333334], [1.72959225E12, 196455.6], [1.72959165E12, 199815.36666666667], [1.72959105E12, 197588.96666666667], [1.72959216E12, 196887.16666666666], [1.72959207E12, 197000.1], [1.72959156E12, 196076.46666666667], [1.72959147E12, 196338.63333333333], [1.72959096E12, 197528.46666666667], [1.72959087E12, 197359.06666666668], [1.72959198E12, 196685.5], [1.72959138E12, 196604.83333333334], [1.72959249E12, 97384.83333333333], [1.72959078E12, 201150.4], [1.72959189E12, 196733.9], [1.72959129E12, 197117.06666666668], [1.7295924E12, 187828.3], [1.72959231E12, 196512.06666666668], [1.72959069E12, 98719.86666666667], [1.7295918E12, 198476.3], [1.72959171E12, 199250.7], [1.7295912E12, 197351.0], [1.72959111E12, 196620.96666666667], [1.72959222E12, 196943.63333333333], [1.72959162E12, 197972.13333333333], [1.72959102E12, 198113.3], [1.72959213E12, 196552.4], [1.72959153E12, 196399.13333333333], [1.72959093E12, 198294.8], [1.72959204E12, 196750.03333333333], [1.72959195E12, 196334.6], [1.72959144E12, 196536.26666666666], [1.72959135E12, 194225.16666666666], [1.72959246E12, 197980.2], [1.72959084E12, 197927.76666666666], [1.72959075E12, 198661.83333333334], [1.72959186E12, 195019.73333333334], [1.72959126E12, 197403.43333333332], [1.72959237E12, 192111.7], [1.72959177E12, 199621.76666666666], [1.72959117E12, 197104.96666666667], [1.72959228E12, 196758.1]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 30000, "maxX": 1.72959249E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 10800000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 41.519243340415024, "minX": 1.72959069E12, "maxY": 322.1062294659553, "series": [{"data": [[1.72959219E12, 308.6250694430168], [1.72959168E12, 302.8777744117933], [1.72959159E12, 308.05955462426624], [1.72959108E12, 305.8085375558603], [1.72959099E12, 305.62492357856314], [1.7295921E12, 308.03220241518125], [1.7295915E12, 307.56145423228367], [1.7295909E12, 306.38750331923677], [1.72959201E12, 308.2895786228179], [1.72959141E12, 307.5432291132759], [1.72959243E12, 303.66460847032164], [1.72959081E12, 302.75858797884575], [1.72959192E12, 307.8026639848916], [1.72959183E12, 303.1165635488663], [1.72959132E12, 308.2369864984308], [1.72959123E12, 307.4062058082126], [1.72959234E12, 315.3617669939644], [1.72959072E12, 160.45452059404963], [1.72959174E12, 304.7456625086349], [1.72959114E12, 306.49306505974965], [1.72959225E12, 307.90543647860835], [1.72959165E12, 302.7943925233666], [1.72959105E12, 306.20416828267497], [1.72959216E12, 307.2471166649599], [1.72959207E12, 307.0759167127304], [1.72959156E12, 308.56506356193995], [1.72959147E12, 308.1436553750077], [1.72959096E12, 306.12990566422843], [1.72959087E12, 306.4777854982414], [1.72959198E12, 307.59634984107885], [1.72959138E12, 307.72793106985137], [1.72959249E12, 305.32582315178956], [1.72959078E12, 300.70711020212036], [1.72959189E12, 307.5163704204827], [1.72959129E12, 306.97018742838253], [1.7295924E12, 322.1062294659553], [1.72959231E12, 307.84811789335356], [1.72959069E12, 41.519243340415024], [1.7295918E12, 305.0644597532967], [1.72959171E12, 303.59630371854814], [1.7295912E12, 306.55965665235857], [1.72959111E12, 307.8087755646273], [1.72959222E12, 307.2437690716609], [1.72959162E12, 305.64416103007164], [1.72959102E12, 305.3855738105448], [1.72959213E12, 307.76506197160074], [1.72959153E12, 308.02002300078], [1.72959093E12, 305.117260597184], [1.72959204E12, 306.9192308480749], [1.72959195E12, 308.146678170836], [1.72959144E12, 307.76762846822965], [1.72959135E12, 311.39233724431466], [1.72959246E12, 305.5083526871216], [1.72959084E12, 305.64029099504995], [1.72959075E12, 286.53541772408903], [1.72959186E12, 310.3587442091317], [1.72959126E12, 306.42022352532217], [1.72959237E12, 314.7657827885183], [1.72959177E12, 302.7874850989071], [1.72959117E12, 306.8968466717138], [1.72959228E12, 307.46784740586145]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 30000, "maxX": 1.72959249E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 10800000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 41.498774309527995, "minX": 1.72959069E12, "maxY": 322.07191479310353, "series": [{"data": [[1.72959219E12, 308.5959753914536], [1.72959168E12, 302.8504493587775], [1.72959159E12, 308.0294999794551], [1.72959108E12, 305.77899075642404], [1.72959099E12, 305.5945791726103], [1.7295921E12, 308.0039636901343], [1.7295915E12, 307.5313730314954], [1.7295909E12, 306.3587025348739], [1.72959201E12, 308.26008221993897], [1.72959141E12, 307.5143208610981], [1.72959243E12, 303.6355170459124], [1.72959081E12, 302.73168368788697], [1.72959192E12, 307.7716936212131], [1.72959183E12, 303.08860042864546], [1.72959132E12, 308.2073118102807], [1.72959123E12, 307.37792306273417], [1.72959234E12, 315.33062803557465], [1.72959072E12, 160.42223063654404], [1.72959174E12, 304.71862175449735], [1.72959114E12, 306.4643856602988], [1.72959225E12, 307.87722756015137], [1.72959165E12, 302.76799014957453], [1.72959105E12, 306.17497805629824], [1.72959216E12, 307.2184779268676], [1.72959207E12, 307.04639354666796], [1.72959156E12, 308.5359978606994], [1.72959147E12, 308.11401220238656], [1.72959096E12, 306.1006044023354], [1.72959087E12, 306.44907218180265], [1.72959198E12, 307.56757920639893], [1.72959138E12, 307.69812288439687], [1.72959249E12, 305.29728722302696], [1.72959078E12, 300.6816049085679], [1.72959189E12, 307.48729934190374], [1.72959129E12, 306.9414593223124], [1.7295924E12, 322.07191479310353], [1.72959231E12, 307.8197528837122], [1.72959069E12, 41.498774309527995], [1.7295918E12, 305.03623320937555], [1.72959171E12, 303.5674581486206], [1.7295912E12, 306.53077866339464], [1.72959111E12, 307.77999548708664], [1.72959222E12, 307.21446271682413], [1.72959162E12, 305.6135604270226], [1.72959102E12, 305.35548362140713], [1.72959213E12, 307.7361282114429], [1.72959153E12, 307.99125148888805], [1.72959093E12, 305.08978114067315], [1.72959204E12, 306.8897931571735], [1.72959195E12, 308.11771231356965], [1.72959144E12, 307.73865128878373], [1.72959135E12, 311.3630775620399], [1.72959246E12, 305.4785274823831], [1.72959084E12, 305.6131070038489], [1.72959075E12, 286.5087402294148], [1.72959186E12, 310.32989328259396], [1.72959126E12, 306.3910671597529], [1.72959237E12, 314.73334593017177], [1.72959177E12, 302.7589760168128], [1.72959117E12, 306.867748470399], [1.72959228E12, 307.4393128753873]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 30000, "maxX": 1.72959249E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 10800000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 5.750431282346149E-4, "minX": 1.72959069E12, "maxY": 0.003391076973361655, "series": [{"data": [[1.72959219E12, 8.02452624431599E-4], [1.72959168E12, 7.47248308593356E-4], [1.72959159E12, 9.860717367188559E-4], [1.72959108E12, 7.753994327340998E-4], [1.72959099E12, 0.0012227430201752554], [1.7295921E12, 5.750431282346149E-4], [1.7295915E12, 6.971784776902945E-4], [1.7295909E12, 0.0011234348509916914], [1.72959201E12, 7.399794450154177E-4], [1.72959141E12, 7.585853408508463E-4], [1.72959243E12, 6.478257348773173E-4], [1.72959081E12, 9.486134097606394E-4], [1.72959192E12, 6.772842952138655E-4], [1.72959183E12, 6.065752759917501E-4], [1.72959132E12, 0.0010480672407061173], [1.72959123E12, 7.378107515422387E-4], [1.72959234E12, 7.989739492441285E-4], [1.72959072E12, 0.002040472884850024], [1.72959174E12, 6.704319206858759E-4], [1.72959114E12, 8.987845981002964E-4], [1.72959225E12, 7.801593167446897E-4], [1.72959165E12, 7.872267414868548E-4], [1.72959105E12, 0.0010410500316397557], [1.72959216E12, 7.784492471576406E-4], [1.72959207E12, 7.780029891693744E-4], [1.72959156E12, 9.0508906899248E-4], [1.72959147E12, 6.984531317405883E-4], [1.72959096E12, 8.575979090946214E-4], [1.72959087E12, 0.0012670644976702332], [1.72959198E12, 7.177278786014579E-4], [1.72959138E12, 6.975074366601765E-4], [1.72959249E12, 8.697452888796793E-4], [1.72959078E12, 7.418992621110035E-4], [1.72959189E12, 7.585542366279172E-4], [1.72959129E12, 0.0010026190865935543], [1.7295924E12, 9.448345465867775E-4], [1.72959231E12, 7.799351422355399E-4], [1.72959069E12, 0.003391076973361655], [1.7295918E12, 6.299660631185352E-4], [1.72959171E12, 8.299427137102534E-4], [1.7295912E12, 7.970570202329907E-4], [1.72959111E12, 7.795031692957799E-4], [1.72959222E12, 9.830223842388745E-4], [1.72959162E12, 9.371689348871344E-4], [1.72959102E12, 0.0010586534742156757], [1.72959213E12, 9.849790691947903E-4], [1.72959153E12, 8.009200312153412E-4], [1.72959093E12, 0.001200065088275971], [1.72959204E12, 7.174924663291092E-4], [1.72959195E12, 0.001027158059082149], [1.72959144E12, 8.824495156788728E-4], [1.72959135E12, 8.306510227390792E-4], [1.72959246E12, 6.722894511673377E-4], [1.72959084E12, 0.001426446314674063], [1.72959075E12, 0.0010760328900619198], [1.72959186E12, 8.893117140966319E-4], [1.72959126E12, 9.398688270028481E-4], [1.72959237E12, 7.558102916168046E-4], [1.72959177E12, 0.0010102438728709123], [1.72959117E12, 0.0010231435061081658], [1.72959228E12, 7.99458827870374E-4]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 30000, "maxX": 1.72959249E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 10800000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 3.0, "minX": 1.72959069E12, "maxY": 1487.0, "series": [{"data": [[1.72959219E12, 651.0], [1.72959168E12, 648.0], [1.72959159E12, 666.0], [1.72959108E12, 777.0], [1.72959099E12, 558.0], [1.7295921E12, 659.0], [1.7295915E12, 779.0], [1.7295909E12, 662.0], [1.72959201E12, 655.0], [1.72959141E12, 660.0], [1.72959243E12, 548.0], [1.72959081E12, 665.0], [1.72959192E12, 675.0], [1.72959183E12, 686.0], [1.72959132E12, 664.0], [1.72959123E12, 704.0], [1.72959234E12, 952.0], [1.72959072E12, 710.0], [1.72959174E12, 696.0], [1.72959114E12, 649.0], [1.72959225E12, 568.0], [1.72959165E12, 661.0], [1.72959105E12, 682.0], [1.72959216E12, 666.0], [1.72959207E12, 557.0], [1.72959156E12, 870.0], [1.72959147E12, 663.0], [1.72959096E12, 811.0], [1.72959087E12, 638.0], [1.72959198E12, 670.0], [1.72959138E12, 656.0], [1.72959249E12, 665.0], [1.72959078E12, 661.0], [1.72959189E12, 660.0], [1.72959129E12, 557.0], [1.7295924E12, 1487.0], [1.72959231E12, 688.0], [1.72959069E12, 232.0], [1.7295918E12, 687.0], [1.72959171E12, 552.0], [1.7295912E12, 658.0], [1.72959111E12, 683.0], [1.72959222E12, 661.0], [1.72959162E12, 661.0], [1.72959102E12, 549.0], [1.72959213E12, 654.0], [1.72959153E12, 669.0], [1.72959093E12, 549.0], [1.72959204E12, 554.0], [1.72959195E12, 563.0], [1.72959144E12, 652.0], [1.72959135E12, 848.0], [1.72959246E12, 983.0], [1.72959084E12, 646.0], [1.72959075E12, 595.0], [1.72959186E12, 874.0], [1.72959126E12, 548.0], [1.72959237E12, 925.0], [1.72959177E12, 652.0], [1.72959117E12, 662.0], [1.72959228E12, 552.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.72959219E12, 4.0], [1.72959168E12, 118.0], [1.72959159E12, 118.0], [1.72959108E12, 120.0], [1.72959099E12, 118.0], [1.7295921E12, 119.0], [1.7295915E12, 6.0], [1.7295909E12, 5.0], [1.72959201E12, 118.0], [1.72959141E12, 119.0], [1.72959243E12, 117.0], [1.72959081E12, 8.0], [1.72959192E12, 6.0], [1.72959183E12, 116.0], [1.72959132E12, 120.0], [1.72959123E12, 6.0], [1.72959234E12, 7.0], [1.72959072E12, 4.0], [1.72959174E12, 10.0], [1.72959114E12, 5.0], [1.72959225E12, 5.0], [1.72959165E12, 115.0], [1.72959105E12, 8.0], [1.72959216E12, 119.0], [1.72959207E12, 6.0], [1.72959156E12, 8.0], [1.72959147E12, 119.0], [1.72959096E12, 7.0], [1.72959087E12, 119.0], [1.72959198E12, 7.0], [1.72959138E12, 9.0], [1.72959249E12, 115.0], [1.72959078E12, 7.0], [1.72959189E12, 6.0], [1.72959129E12, 117.0], [1.7295924E12, 4.0], [1.72959231E12, 119.0], [1.72959069E12, 3.0], [1.7295918E12, 118.0], [1.72959171E12, 7.0], [1.7295912E12, 7.0], [1.72959111E12, 5.0], [1.72959222E12, 4.0], [1.72959162E12, 5.0], [1.72959102E12, 6.0], [1.72959213E12, 118.0], [1.72959153E12, 8.0], [1.72959093E12, 116.0], [1.72959204E12, 15.0], [1.72959195E12, 8.0], [1.72959144E12, 118.0], [1.72959135E12, 6.0], [1.72959246E12, 8.0], [1.72959084E12, 117.0], [1.72959075E12, 114.0], [1.72959186E12, 11.0], [1.72959126E12, 119.0], [1.72959237E12, 6.0], [1.72959177E12, 116.0], [1.72959117E12, 8.0], [1.72959228E12, 118.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.72959219E12, 316.0], [1.72959168E12, 310.0], [1.72959159E12, 316.0], [1.72959108E12, 312.0], [1.72959099E12, 313.0], [1.7295921E12, 314.0], [1.7295915E12, 314.0], [1.7295909E12, 310.0], [1.72959201E12, 316.0], [1.72959141E12, 315.0], [1.72959243E12, 312.0], [1.72959081E12, 314.0], [1.72959192E12, 313.0], [1.72959183E12, 313.90000000000146], [1.72959132E12, 311.0], [1.72959123E12, 319.0], [1.72959234E12, 357.0], [1.72959072E12, 242.0], [1.72959174E12, 308.0], [1.72959114E12, 310.0], [1.72959225E12, 316.0], [1.72959165E12, 312.0], [1.72959105E12, 312.0], [1.72959216E12, 314.0], [1.72959207E12, 315.0], [1.72959156E12, 314.0], [1.72959147E12, 316.0], [1.72959096E12, 311.0], [1.72959087E12, 311.0], [1.72959198E12, 314.0], [1.72959138E12, 314.0], [1.72959249E12, 320.0], [1.72959078E12, 306.0], [1.72959189E12, 316.0], [1.72959129E12, 313.0], [1.7295924E12, 321.0], [1.72959231E12, 322.0], [1.72959069E12, 76.0], [1.7295918E12, 309.0], [1.72959171E12, 311.0], [1.7295912E12, 312.0], [1.72959111E12, 325.0], [1.72959222E12, 313.0], [1.72959162E12, 309.0], [1.72959102E12, 311.0], [1.72959213E12, 316.0], [1.72959153E12, 315.0], [1.72959093E12, 310.0], [1.72959204E12, 314.0], [1.72959195E12, 315.0], [1.72959144E12, 313.0], [1.72959135E12, 323.0], [1.72959246E12, 312.0], [1.72959084E12, 311.0], [1.72959075E12, 308.0], [1.72959186E12, 315.0], [1.72959126E12, 311.0], [1.72959237E12, 320.0], [1.72959177E12, 310.0], [1.72959117E12, 314.0], [1.72959228E12, 314.0]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.72959219E12, 430.0], [1.72959168E12, 419.0], [1.72959159E12, 430.0], [1.72959108E12, 423.0], [1.72959099E12, 425.0], [1.7295921E12, 428.0], [1.7295915E12, 427.0], [1.7295909E12, 422.0], [1.72959201E12, 431.0], [1.72959141E12, 428.0], [1.72959243E12, 421.0], [1.72959081E12, 427.0], [1.72959192E12, 427.0], [1.72959183E12, 425.9900000000016], [1.72959132E12, 423.0], [1.72959123E12, 443.9900000000016], [1.72959234E12, 545.0], [1.72959072E12, 383.0], [1.72959174E12, 418.0], [1.72959114E12, 423.0], [1.72959225E12, 430.0], [1.72959165E12, 423.0], [1.72959105E12, 426.0], [1.72959216E12, 429.0], [1.72959207E12, 428.9900000000016], [1.72959156E12, 428.0], [1.72959147E12, 430.9900000000016], [1.72959096E12, 423.0], [1.72959087E12, 424.0], [1.72959198E12, 428.0], [1.72959138E12, 427.0], [1.72959249E12, 433.0], [1.72959078E12, 414.0], [1.72959189E12, 431.0], [1.72959129E12, 425.0], [1.7295924E12, 436.0], [1.72959231E12, 437.0], [1.72959069E12, 92.0], [1.7295918E12, 419.0], [1.72959171E12, 421.0], [1.7295912E12, 425.0], [1.72959111E12, 443.0], [1.72959222E12, 427.0], [1.72959162E12, 420.0], [1.72959102E12, 424.0], [1.72959213E12, 429.0], [1.72959153E12, 428.0], [1.72959093E12, 422.0], [1.72959204E12, 427.0], [1.72959195E12, 430.0], [1.72959144E12, 426.0], [1.72959135E12, 442.9900000000016], [1.72959246E12, 435.0], [1.72959084E12, 425.0], [1.72959075E12, 418.0], [1.72959186E12, 427.0], [1.72959126E12, 424.0], [1.72959237E12, 437.0], [1.72959177E12, 420.0], [1.72959117E12, 428.0], [1.72959228E12, 428.0]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.72959219E12, 309.0], [1.72959168E12, 303.0], [1.72959159E12, 307.0], [1.72959108E12, 306.0], [1.72959099E12, 306.0], [1.7295921E12, 307.0], [1.7295915E12, 307.0], [1.7295909E12, 306.0], [1.72959201E12, 307.0], [1.72959141E12, 307.0], [1.72959243E12, 303.0], [1.72959081E12, 304.0], [1.72959192E12, 307.0], [1.72959183E12, 302.0], [1.72959132E12, 306.0], [1.72959123E12, 306.0], [1.72959234E12, 311.0], [1.72959072E12, 202.0], [1.72959174E12, 302.0], [1.72959114E12, 305.0], [1.72959225E12, 307.0], [1.72959165E12, 302.0], [1.72959105E12, 306.0], [1.72959216E12, 307.0], [1.72959207E12, 307.0], [1.72959156E12, 307.0], [1.72959147E12, 308.0], [1.72959096E12, 305.0], [1.72959087E12, 306.0], [1.72959198E12, 307.0], [1.72959138E12, 307.0], [1.72959249E12, 304.0], [1.72959078E12, 300.0], [1.72959189E12, 308.0], [1.72959129E12, 306.0], [1.7295924E12, 307.0], [1.72959231E12, 308.0], [1.72959069E12, 48.0], [1.7295918E12, 302.0], [1.72959171E12, 303.0], [1.7295912E12, 306.0], [1.72959111E12, 307.0], [1.72959222E12, 307.0], [1.72959162E12, 303.0], [1.72959102E12, 306.0], [1.72959213E12, 308.0], [1.72959153E12, 307.0], [1.72959093E12, 305.0], [1.72959204E12, 306.0], [1.72959195E12, 308.0], [1.72959144E12, 306.0], [1.72959135E12, 309.0], [1.72959246E12, 304.0], [1.72959084E12, 306.0], [1.72959075E12, 302.0], [1.72959186E12, 307.0], [1.72959126E12, 306.0], [1.72959237E12, 310.0], [1.72959177E12, 303.0], [1.72959117E12, 308.0], [1.72959228E12, 307.0]], "isOverall": false, "label": "Median", "isController": false}, {"data": [[1.72959219E12, 323.9500000000007], [1.72959168E12, 312.0], [1.72959159E12, 323.0], [1.72959108E12, 314.0], [1.72959099E12, 316.0], [1.7295921E12, 317.0], [1.7295915E12, 318.0], [1.7295909E12, 312.0], [1.72959201E12, 321.0], [1.72959141E12, 319.0], [1.72959243E12, 315.0], [1.72959081E12, 321.0], [1.72959192E12, 316.0], [1.72959183E12, 326.0], [1.72959132E12, 313.0], [1.72959123E12, 342.0], [1.72959234E12, 428.0], [1.72959072E12, 311.0], [1.72959174E12, 311.0], [1.72959114E12, 312.0], [1.72959225E12, 324.0], [1.72959165E12, 316.0], [1.72959105E12, 315.0], [1.72959216E12, 316.0], [1.72959207E12, 318.0], [1.72959156E12, 316.0], [1.72959147E12, 320.0], [1.72959096E12, 314.0], [1.72959087E12, 314.0], [1.72959198E12, 317.0], [1.72959138E12, 317.0], [1.72959249E12, 327.0], [1.72959078E12, 308.0], [1.72959189E12, 319.0], [1.72959129E12, 317.0], [1.7295924E12, 332.0], [1.72959231E12, 333.0], [1.72959069E12, 81.0], [1.7295918E12, 311.0], [1.72959171E12, 313.0], [1.7295912E12, 314.0], [1.72959111E12, 332.0], [1.72959222E12, 316.0], [1.72959162E12, 313.0], [1.72959102E12, 313.0], [1.72959213E12, 322.0], [1.72959153E12, 319.0], [1.72959093E12, 313.0], [1.72959204E12, 317.0], [1.72959195E12, 320.0], [1.72959144E12, 316.0], [1.72959135E12, 359.0], [1.72959246E12, 346.0], [1.72959084E12, 313.0], [1.72959075E12, 311.0], [1.72959186E12, 319.0], [1.72959126E12, 313.0], [1.72959237E12, 335.0], [1.72959177E12, 317.0], [1.72959117E12, 319.0], [1.72959228E12, 317.0]], "isOverall": false, "label": "95th percentile", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 30000, "maxX": 1.72959249E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 10800000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 5.0, "minX": 362.0, "maxY": 402.0, "series": [{"data": [[362.0, 5.0], [1128.0, 343.5], [1158.0, 322.0], [1249.0, 401.0], [1241.0, 402.0], [1289.0, 340.0], [1335.0, 358.0], [1399.0, 311.0], [1367.0, 364.0], [1436.0, 7.0], [1470.0, 170.0], [1462.0, 232.0], [1441.0, 356.0], [1469.0, 335.0], [1434.0, 350.0], [1479.0, 240.0], [1507.0, 156.0], [1519.0, 165.0], [1488.0, 179.0], [1492.0, 318.0], [1528.0, 190.0], [1484.0, 337.0], [1487.0, 304.0], [1515.0, 181.0], [1532.0, 318.0], [1500.0, 317.0], [1472.0, 310.0], [1502.0, 329.0], [1503.0, 337.0], [1592.0, 311.0], [1548.0, 320.0], [1562.0, 314.0], [1557.0, 122.0], [1560.0, 316.0], [1559.0, 320.0], [1567.0, 73.0], [1564.0, 319.0], [1563.0, 311.0], [1566.0, 316.0], [1565.0, 322.0], [1540.0, 323.0], [1539.0, 321.0], [1545.0, 320.0], [1546.0, 325.0], [1573.0, 191.0], [1577.0, 167.5], [1580.0, 317.0], [1579.0, 314.0], [1582.0, 317.0], [1583.0, 314.0], [1581.0, 315.0], [1576.0, 317.0], [1574.0, 311.0], [1575.0, 312.0], [1588.0, 231.0], [1587.0, 312.0], [1586.0, 318.0], [1589.0, 314.0], [1585.0, 309.0], [1584.0, 313.0], [1550.0, 323.0], [1591.0, 309.0], [1590.0, 312.0], [1552.0, 311.0], [1555.0, 320.0], [1556.0, 302.0], [1594.0, 315.0], [1593.0, 310.0], [1595.0, 314.0], [1596.0, 313.0], [1597.0, 309.0], [1599.0, 312.0], [1572.0, 312.0], [1571.0, 314.0], [1598.0, 311.0], [1660.0, 301.0], [1613.0, 309.0], [1631.0, 306.0], [1628.0, 307.0], [1629.0, 306.0], [1630.0, 307.0], [1625.0, 307.0], [1626.0, 308.0], [1627.0, 307.0], [1624.0, 308.0], [1616.0, 309.0], [1617.0, 309.0], [1618.0, 309.0], [1619.0, 308.0], [1623.0, 307.0], [1622.0, 308.0], [1621.0, 308.0], [1620.0, 309.0], [1644.0, 304.0], [1643.0, 304.0], [1642.0, 304.0], [1632.0, 306.0], [1662.0, 300.0], [1661.0, 301.0], [1663.0, 301.0], [1633.0, 306.0], [1634.0, 306.0], [1635.0, 306.0], [1641.0, 305.0], [1645.0, 304.0], [1647.0, 304.0], [1646.0, 304.0], [1650.0, 303.0], [1651.0, 303.0], [1653.0, 302.0], [1652.0, 303.0], [1614.0, 310.0], [1615.0, 309.0], [1648.0, 303.0], [1649.0, 303.0], [1657.0, 302.0], [1659.0, 302.0], [1658.0, 302.0], [1655.0, 302.0], [1656.0, 302.0], [1654.0, 302.0], [1636.0, 306.0], [1640.0, 305.0], [1637.0, 305.0], [1638.0, 305.0], [1639.0, 304.0], [1604.0, 310.0], [1607.0, 311.0], [1608.0, 310.0], [1609.0, 310.0], [1605.0, 310.0], [1606.0, 310.0], [1601.0, 310.0], [1603.0, 311.0], [1602.0, 312.0], [1600.0, 311.0], [1612.0, 310.0], [1611.0, 310.0], [1610.0, 310.0], [1667.0, 299.0], [1670.0, 298.0], [1666.0, 301.0], [1664.0, 301.0], [1685.0, 296.0], [1665.0, 300.0], [1674.0, 298.0], [1672.0, 299.0], [1673.0, 300.0], [1671.0, 300.0], [1675.0, 298.0], [1676.0, 299.0], [1677.0, 299.0], [1679.0, 298.0], [1678.0, 299.0], [1669.0, 300.0], [1668.0, 300.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 1685.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 5.0, "minX": 362.0, "maxY": 402.0, "series": [{"data": [[362.0, 5.0], [1128.0, 343.0], [1158.0, 322.0], [1249.0, 401.0], [1241.0, 402.0], [1289.0, 340.0], [1335.0, 358.0], [1399.0, 311.0], [1367.0, 364.0], [1436.0, 7.0], [1470.0, 170.0], [1462.0, 232.0], [1441.0, 356.0], [1469.0, 335.0], [1434.0, 350.0], [1479.0, 240.0], [1507.0, 156.0], [1519.0, 165.0], [1488.0, 179.0], [1492.0, 318.0], [1528.0, 190.0], [1484.0, 337.0], [1487.0, 304.0], [1515.0, 181.0], [1532.0, 318.0], [1500.0, 317.0], [1472.0, 310.0], [1502.0, 329.0], [1503.0, 337.0], [1592.0, 311.0], [1548.0, 319.0], [1562.0, 314.0], [1557.0, 121.5], [1560.0, 316.0], [1559.0, 320.0], [1567.0, 73.0], [1564.0, 319.0], [1563.0, 311.0], [1566.0, 316.0], [1565.0, 322.0], [1540.0, 323.0], [1539.0, 321.0], [1545.0, 320.0], [1546.0, 324.0], [1573.0, 190.5], [1577.0, 167.5], [1580.0, 317.0], [1579.0, 314.0], [1582.0, 317.0], [1583.0, 314.0], [1581.0, 315.0], [1576.0, 317.0], [1574.0, 311.0], [1575.0, 312.0], [1588.0, 231.0], [1587.0, 311.5], [1586.0, 318.0], [1589.0, 314.0], [1585.0, 309.0], [1584.0, 313.0], [1550.0, 323.0], [1591.0, 309.0], [1590.0, 312.0], [1552.0, 311.0], [1555.0, 320.0], [1556.0, 302.0], [1594.0, 315.0], [1593.0, 310.0], [1595.0, 314.0], [1596.0, 313.0], [1597.0, 309.0], [1599.0, 312.0], [1572.0, 312.0], [1571.0, 314.0], [1598.0, 311.0], [1660.0, 301.0], [1613.0, 309.0], [1631.0, 306.0], [1628.0, 307.0], [1629.0, 306.0], [1630.0, 307.0], [1625.0, 307.0], [1626.0, 308.0], [1627.0, 307.0], [1624.0, 308.0], [1616.0, 309.0], [1617.0, 309.0], [1618.0, 309.0], [1619.0, 308.0], [1623.0, 307.0], [1622.0, 308.0], [1621.0, 308.0], [1620.0, 309.0], [1644.0, 304.0], [1643.0, 304.0], [1642.0, 304.0], [1632.0, 306.0], [1662.0, 300.0], [1661.0, 301.0], [1663.0, 301.0], [1633.0, 306.0], [1634.0, 306.0], [1635.0, 306.0], [1641.0, 305.0], [1645.0, 304.0], [1647.0, 304.0], [1646.0, 304.0], [1650.0, 303.0], [1651.0, 303.0], [1653.0, 302.0], [1652.0, 303.0], [1614.0, 310.0], [1615.0, 309.0], [1648.0, 303.0], [1649.0, 303.0], [1657.0, 302.0], [1659.0, 302.0], [1658.0, 302.0], [1655.0, 302.0], [1656.0, 302.0], [1654.0, 302.0], [1636.0, 306.0], [1640.0, 305.0], [1637.0, 305.0], [1638.0, 305.0], [1639.0, 304.0], [1604.0, 310.0], [1607.0, 311.0], [1608.0, 310.0], [1609.0, 310.0], [1605.0, 310.0], [1606.0, 310.0], [1601.0, 310.0], [1603.0, 311.0], [1602.0, 311.0], [1600.0, 311.0], [1612.0, 310.0], [1611.0, 310.0], [1610.0, 310.0], [1667.0, 299.0], [1670.0, 298.0], [1666.0, 301.0], [1664.0, 300.0], [1685.0, 296.0], [1665.0, 300.0], [1674.0, 298.0], [1672.0, 299.0], [1673.0, 300.0], [1671.0, 300.0], [1675.0, 298.0], [1676.0, 299.0], [1677.0, 299.0], [1679.0, 298.0], [1678.0, 299.0], [1669.0, 300.0], [1668.0, 300.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 1685.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 749.4666666666667, "minX": 1.72959069E12, "maxY": 1662.1333333333334, "series": [{"data": [[1.72959219E12, 1620.2], [1.72959168E12, 1650.2666666666667], [1.72959159E12, 1623.0], [1.72959108E12, 1633.8], [1.72959099E12, 1635.8666666666666], [1.7295921E12, 1623.4333333333334], [1.7295915E12, 1625.5666666666666], [1.7295909E12, 1632.0333333333333], [1.72959201E12, 1623.7333333333333], [1.72959141E12, 1625.4], [1.72959243E12, 1646.8], [1.72959081E12, 1650.5], [1.72959192E12, 1624.5333333333333], [1.72959183E12, 1646.1], [1.72959132E12, 1621.7], [1.72959123E12, 1626.9], [1.72959234E12, 1585.8], [1.72959072E12, 1586.2], [1.72959174E12, 1640.0666666666666], [1.72959114E12, 1634.9666666666667], [1.72959225E12, 1623.3], [1.72959165E12, 1651.3], [1.72959105E12, 1632.7], [1.72959216E12, 1626.4333333333334], [1.72959207E12, 1628.1], [1.72959156E12, 1625.4333333333334], [1.72959147E12, 1622.2], [1.72959096E12, 1632.7], [1.72959087E12, 1630.9333333333334], [1.72959198E12, 1623.8333333333333], [1.72959138E12, 1624.8333333333333], [1.72959249E12, 749.4666666666667], [1.72959078E12, 1662.1333333333334], [1.72959189E12, 1625.9666666666667], [1.72959129E12, 1629.6333333333334], [1.7295924E12, 1553.4], [1.72959231E12, 1623.4], [1.72959069E12, 868.4333333333333], [1.7295918E12, 1643.9], [1.72959171E12, 1647.1], [1.7295912E12, 1631.2], [1.72959111E12, 1622.1666666666667], [1.72959222E12, 1627.6333333333334], [1.72959162E12, 1637.0333333333333], [1.72959102E12, 1636.8], [1.72959213E12, 1624.1333333333334], [1.72959153E12, 1618.5], [1.72959093E12, 1639.0], [1.72959204E12, 1626.5333333333333], [1.72959195E12, 1622.2333333333333], [1.72959144E12, 1624.2333333333333], [1.72959135E12, 1605.5333333333333], [1.72959246E12, 1636.0333333333333], [1.72959084E12, 1635.7], [1.72959075E12, 1643.3333333333333], [1.72959186E12, 1612.6333333333334], [1.72959126E12, 1631.2333333333333], [1.72959237E12, 1587.6666666666667], [1.72959177E12, 1646.6666666666667], [1.72959117E12, 1627.8], [1.72959228E12, 1626.6333333333334]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 30000, "maxX": 1.72959249E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 10800000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 804.8333333333334, "minX": 1.72959069E12, "maxY": 1662.4, "series": [{"data": [[1.72959219E12, 1620.0333333333333], [1.72959168E12, 1650.5], [1.72959159E12, 1622.6], [1.72959108E12, 1633.5666666666666], [1.72959099E12, 1635.6666666666667], [1.7295921E12, 1623.0666666666666], [1.7295915E12, 1625.6], [1.7295909E12, 1631.9], [1.72959201E12, 1621.6666666666667], [1.72959141E12, 1625.8333333333333], [1.72959243E12, 1646.5333333333333], [1.72959081E12, 1651.5333333333333], [1.72959192E12, 1624.1333333333334], [1.72959183E12, 1648.6], [1.72959132E12, 1622.0333333333333], [1.72959123E12, 1626.4333333333334], [1.72959234E12, 1585.3666666666666], [1.72959072E12, 1584.6], [1.72959174E12, 1640.7333333333333], [1.72959114E12, 1631.8333333333333], [1.72959225E12, 1623.6], [1.72959165E12, 1651.3666666666666], [1.72959105E12, 1632.9666666666667], [1.72959216E12, 1627.1666666666667], [1.72959207E12, 1628.1], [1.72959156E12, 1620.4666666666667], [1.72959147E12, 1622.6333333333334], [1.72959096E12, 1632.4666666666667], [1.72959087E12, 1631.0666666666666], [1.72959198E12, 1625.5], [1.72959138E12, 1624.8333333333333], [1.72959249E12, 804.8333333333334], [1.72959078E12, 1662.4], [1.72959189E12, 1625.9], [1.72959129E12, 1629.0666666666666], [1.7295924E12, 1552.3], [1.72959231E12, 1624.0666666666666], [1.72959069E12, 815.8666666666667], [1.7295918E12, 1640.3], [1.72959171E12, 1646.7], [1.7295912E12, 1631.0], [1.72959111E12, 1624.9666666666667], [1.72959222E12, 1627.6333333333334], [1.72959162E12, 1636.1333333333334], [1.72959102E12, 1637.3], [1.72959213E12, 1624.4], [1.72959153E12, 1623.1333333333334], [1.72959093E12, 1638.8], [1.72959204E12, 1626.0333333333333], [1.72959195E12, 1622.6], [1.72959144E12, 1624.2666666666667], [1.72959135E12, 1605.1666666666667], [1.72959246E12, 1636.2], [1.72959084E12, 1635.7666666666667], [1.72959075E12, 1641.8333333333333], [1.72959186E12, 1611.7333333333333], [1.72959126E12, 1631.4333333333334], [1.72959237E12, 1587.7], [1.72959177E12, 1649.7666666666667], [1.72959117E12, 1628.9666666666667], [1.72959228E12, 1626.1]], "isOverall": false, "label": "200", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 30000, "maxX": 1.72959249E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 10800000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 804.8333333333334, "minX": 1.72959069E12, "maxY": 1662.4, "series": [{"data": [[1.72959219E12, 1620.0333333333333], [1.72959168E12, 1650.5], [1.72959159E12, 1622.6], [1.72959108E12, 1633.5666666666666], [1.72959099E12, 1635.6666666666667], [1.7295921E12, 1623.0666666666666], [1.7295915E12, 1625.6], [1.7295909E12, 1631.9], [1.72959201E12, 1621.6666666666667], [1.72959141E12, 1625.8333333333333], [1.72959243E12, 1646.5333333333333], [1.72959081E12, 1651.5333333333333], [1.72959192E12, 1624.1333333333334], [1.72959183E12, 1648.6], [1.72959132E12, 1622.0333333333333], [1.72959123E12, 1626.4333333333334], [1.72959234E12, 1585.3666666666666], [1.72959072E12, 1584.6], [1.72959174E12, 1640.7333333333333], [1.72959114E12, 1631.8333333333333], [1.72959225E12, 1623.6], [1.72959165E12, 1651.3666666666666], [1.72959105E12, 1632.9666666666667], [1.72959216E12, 1627.1666666666667], [1.72959207E12, 1628.1], [1.72959156E12, 1620.4666666666667], [1.72959147E12, 1622.6333333333334], [1.72959096E12, 1632.4666666666667], [1.72959087E12, 1631.0666666666666], [1.72959198E12, 1625.5], [1.72959138E12, 1624.8333333333333], [1.72959249E12, 804.8333333333334], [1.72959078E12, 1662.4], [1.72959189E12, 1625.9], [1.72959129E12, 1629.0666666666666], [1.7295924E12, 1552.3], [1.72959231E12, 1624.0666666666666], [1.72959069E12, 815.8666666666667], [1.7295918E12, 1640.3], [1.72959171E12, 1646.7], [1.7295912E12, 1631.0], [1.72959111E12, 1624.9666666666667], [1.72959222E12, 1627.6333333333334], [1.72959162E12, 1636.1333333333334], [1.72959102E12, 1637.3], [1.72959213E12, 1624.4], [1.72959153E12, 1623.1333333333334], [1.72959093E12, 1638.8], [1.72959204E12, 1626.0333333333333], [1.72959195E12, 1622.6], [1.72959144E12, 1624.2666666666667], [1.72959135E12, 1605.1666666666667], [1.72959246E12, 1636.2], [1.72959084E12, 1635.7666666666667], [1.72959075E12, 1641.8333333333333], [1.72959186E12, 1611.7333333333333], [1.72959126E12, 1631.4333333333334], [1.72959237E12, 1587.7], [1.72959177E12, 1649.7666666666667], [1.72959117E12, 1628.9666666666667], [1.72959228E12, 1626.1]], "isOverall": false, "label": "HTTP Request-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 30000, "maxX": 1.72959249E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 10800000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 804.8333333333334, "minX": 1.72959069E12, "maxY": 1662.4, "series": [{"data": [[1.72959219E12, 1620.0333333333333], [1.72959168E12, 1650.5], [1.72959159E12, 1622.6], [1.72959108E12, 1633.5666666666666], [1.72959099E12, 1635.6666666666667], [1.7295921E12, 1623.0666666666666], [1.7295915E12, 1625.6], [1.7295909E12, 1631.9], [1.72959201E12, 1621.6666666666667], [1.72959141E12, 1625.8333333333333], [1.72959243E12, 1646.5333333333333], [1.72959081E12, 1651.5333333333333], [1.72959192E12, 1624.1333333333334], [1.72959183E12, 1648.6], [1.72959132E12, 1622.0333333333333], [1.72959123E12, 1626.4333333333334], [1.72959234E12, 1585.3666666666666], [1.72959072E12, 1584.6], [1.72959174E12, 1640.7333333333333], [1.72959114E12, 1631.8333333333333], [1.72959225E12, 1623.6], [1.72959165E12, 1651.3666666666666], [1.72959105E12, 1632.9666666666667], [1.72959216E12, 1627.1666666666667], [1.72959207E12, 1628.1], [1.72959156E12, 1620.4666666666667], [1.72959147E12, 1622.6333333333334], [1.72959096E12, 1632.4666666666667], [1.72959087E12, 1631.0666666666666], [1.72959198E12, 1625.5], [1.72959138E12, 1624.8333333333333], [1.72959249E12, 804.8333333333334], [1.72959078E12, 1662.4], [1.72959189E12, 1625.9], [1.72959129E12, 1629.0666666666666], [1.7295924E12, 1552.3], [1.72959231E12, 1624.0666666666666], [1.72959069E12, 815.8666666666667], [1.7295918E12, 1640.3], [1.72959171E12, 1646.7], [1.7295912E12, 1631.0], [1.72959111E12, 1624.9666666666667], [1.72959222E12, 1627.6333333333334], [1.72959162E12, 1636.1333333333334], [1.72959102E12, 1637.3], [1.72959213E12, 1624.4], [1.72959153E12, 1623.1333333333334], [1.72959093E12, 1638.8], [1.72959204E12, 1626.0333333333333], [1.72959195E12, 1622.6], [1.72959144E12, 1624.2666666666667], [1.72959135E12, 1605.1666666666667], [1.72959246E12, 1636.2], [1.72959084E12, 1635.7666666666667], [1.72959075E12, 1641.8333333333333], [1.72959186E12, 1611.7333333333333], [1.72959126E12, 1631.4333333333334], [1.72959237E12, 1587.7], [1.72959177E12, 1649.7666666666667], [1.72959117E12, 1628.9666666666667], [1.72959228E12, 1626.1]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 30000, "maxX": 1.72959249E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 10800000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

